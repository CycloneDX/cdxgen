syntax = "proto3";
package cyclonedx.v1_5;
import "google/protobuf/timestamp.proto";

// Specifies attributes of the text
message AttachedText {
  // Specifies the content type of the text. Defaults to 'text/plain' if not specified.
  optional string content_type = 1;
  // Specifies the optional encoding the text is represented in
  optional string encoding = 2;
  // SimpleContent value of element. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
  string value = 3;
}

message Bom {
  // The version of the CycloneDX specification a BOM is written to (starting at version 1.3)
  string spec_version = 1;
  // The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.
  optional int32 version = 2;
  // Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
  optional string serial_number = 3;
  // Provides additional information about a BOM.
  optional Metadata metadata = 4;
  // Provides the ability to document a list of components.
  repeated Component components = 5;
  // Provides the ability to document a list of external services.
  repeated Service services = 6;
  // Provides the ability to document external references related to the BOM or to the project the BOM describes.
  repeated ExternalReference external_references = 7;
  // Provides the ability to document dependency relationships.
  repeated Dependency dependencies = 8;
  // Compositions describe constituent parts (including components, services, and dependency relationships) and their completeness. The completeness of vulnerabilities expressed in a BOM may also be described.
  repeated Composition compositions = 9;
  // Vulnerabilities identified in components or services.
  repeated Vulnerability vulnerabilities = 10;
  // Comments made by people, organizations, or tools about any object with a bom-ref, such as components, services, vulnerabilities, or the BOM itself. Unlike inventory information, annotations may contain opinion or commentary from various stakeholders.
  repeated Annotation annotations = 11;
  // Specifies optional, custom, properties
  repeated Property properties = 12;
  // Describes how a component or service was manufactured or deployed. This is achieved through the use of formulas, workflows, tasks, and steps, which declare the precise steps to reproduce along with the observed formulas describing the steps which transpired in the manufacturing process.
  repeated Formula formulation = 13;
}

enum Classification {
  CLASSIFICATION_NULL = 0;
  // A software application. Refer to https://en.wikipedia.org/wiki/Application_software for information about applications.
  CLASSIFICATION_APPLICATION = 1;
  // A software framework. Refer to https://en.wikipedia.org/wiki/Software_framework for information on how frameworks vary slightly from libraries.
  CLASSIFICATION_FRAMEWORK = 2;
  // A software library. Refer to https://en.wikipedia.org/wiki/Library_(computing) for information about libraries. All third-party and open source reusable components will likely be a library. If the library also has key features of a framework, then it should be classified as a framework. If not, or is unknown, then specifying library is recommended.
  CLASSIFICATION_LIBRARY = 3;
  // A software operating system without regard to deployment model (i.e. installed on physical hardware, virtual machine, image, etc) Refer to https://en.wikipedia.org/wiki/Operating_system
  CLASSIFICATION_OPERATING_SYSTEM = 4;
  // A hardware device such as a processor, or chip-set. A hardware device containing firmware should include a component for the physical hardware itself, and another component of type 'firmware' or 'operating-system' (whichever is relevant), describing information about the software running on the device. See also the list of known device properties: https://github.com/CycloneDX/cyclonedx-property-taxonomy/blob/main/cdx/device.md
  CLASSIFICATION_DEVICE = 5;
  // A computer file. Refer to https://en.wikipedia.org/wiki/Computer_file for information about files.
  CLASSIFICATION_FILE = 6;
  // A packaging and/or runtime format, not specific to any particular technology, which isolates software inside the container from software outside of a container through virtualization technology. Refer to https://en.wikipedia.org/wiki/OS-level_virtualization
  CLASSIFICATION_CONTAINER = 7;
  // A special type of software that provides low-level control over a devices hardware. Refer to https://en.wikipedia.org/wiki/Firmware
  CLASSIFICATION_FIRMWARE = 8;
  // A special type of software that operates or controls a particular type of device. Refer to https://en.wikipedia.org/wiki/Device_driver
  CLASSIFICATION_DEVICE_DRIVER = 9;
  // A runtime environment which interprets or executes software. This may include runtimes such as those that execute bytecode or low-code/no-code application platforms.
  CLASSIFICATION_PLATFORM = 10;
  // A model based on training data that can make predictions or decisions without being explicitly programmed to do so.
  CLASSIFICATION_MACHINE_LEARNING_MODEL = 11;
  // A collection of discrete values that convey information.
  CLASSIFICATION_DATA = 12;
}

message Commit {
  // A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
  optional string uid = 1;
  // The URL to the commit. This URL will typically point to a commit in a version control system.
  optional string url = 2;
  // The author who created the changes in the commit
  optional IdentifiableAction author = 3;
  // The person who committed or pushed the commit
  optional IdentifiableAction committer = 4;
  // The text description of the contents of the commit
  optional string message = 5;
}

message Component {
  // Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
  Classification type = 1;
  // The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
  optional string mime_type = 2;
  // An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
  optional string bom_ref = 3;
  // The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
  optional OrganizationalEntity supplier = 4;
  // The person(s) or organization(s) that authored the component
  optional string author = 5;
  // The person(s) or organization(s) that published the component
  optional string publisher = 6;
  // The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
  optional string group = 7;
  // The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
  string name = 8;
  // The component version. The version should ideally comply with semantic versioning but is not enforced. Version was made optional in v1.4 of the spec. For backward compatibility, it is RECOMMENDED to use an empty string to represent components without version information.
  string version = 9;
  // Specifies a description for the component
  optional string description = 10;
  // Specifies the scope of the component. If scope is not specified, SCOPE_REQUIRED scope should be assumed by the consumer of the BOM
  optional Scope scope = 11;
  repeated Hash hashes = 12;
  repeated LicenseChoice licenses = 13;
  // An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
  optional string copyright = 14;
  // DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
  optional string cpe = 15;
  // Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
  optional string purl = 16;
  // Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
  optional Swid swid = 17;
  // DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
  optional bool modified = 18;
  // Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
  optional Pedigree pedigree = 19;
  // Provides the ability to document external references related to the component or to the project the component describes.
  repeated ExternalReference external_references = 20;
  // Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -> subsystem -> parts assembly in physical supply chains.
  repeated Component components = 21;
  // Specifies optional, custom, properties
  repeated Property properties = 22;
  // Specifies optional license and copyright evidence
  optional Evidence evidence = 23;
  // Specifies optional release notes.
  optional ReleaseNotes releaseNotes = 24;
  // A model card describes the intended uses of a machine learning model, potential limitations, biases, ethical considerations, training parameters, datasets used to train the model, performance metrics, and other relevant data useful for ML transparency.
  optional ModelCard modelCard = 25;
  // This object SHOULD be specified for any component of type `data` and MUST NOT be specified for other component types.
  optional ComponentData data = 26;
}

// Specifies the data flow.
message DataFlow {
  // Specifies the flow direction of the data.
  DataFlowDirection flow = 1;
  // Data classification tags data according to its type, sensitivity, and value if altered, stolen, or destroyed.
  string value = 2;
  // Name for the defined data
  optional string name = 3;
  // Short description of the data content and usage
  optional string description = 4;
  // The URI, URL, or BOM-Link of the components or services the data came in from
  repeated string source = 5;
  // The URI, URL, or BOM-Link of the components or services the data is sent to
  repeated string destination = 6;
  // Data Governance
  optional DataGovernance governance = 7;
}

// Specifies the flow direction of the data. Valid values are: inbound, outbound, bi-directional, and unknown. Direction is relative to the service. Inbound flow states that data enters the service. Outbound flow states that data leaves the service. Bi-directional states that data flows both ways, and unknown states that the direction is not known.
enum DataFlowDirection {
  DATA_FLOW_NULL = 0;
  DATA_FLOW_INBOUND = 1;
  DATA_FLOW_OUTBOUND = 2;
  DATA_FLOW_BI_DIRECTIONAL = 3;
  DATA_FLOW_UNKNOWN = 4;
}

message Dependency {
  // References a component or service by the its bom-ref attribute
  string ref = 1;
  repeated Dependency dependencies = 2;
}

message Diff {
  // Specifies the optional text of the diff
  optional AttachedText text = 1;
  // Specifies the URL to the diff
  optional string url = 2;
}

message ExternalReference {
  // Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
  ExternalReferenceType type = 1;
  // The URL to the external reference
  string url = 2;
  // An optional comment describing the external reference
  optional string comment = 3;
  // Optional integrity hashes for the external resource content
  repeated Hash hashes = 4;
}

enum ExternalReferenceType {
  // Use this if no other types accurately describe the purpose of the external reference
  EXTERNAL_REFERENCE_TYPE_OTHER = 0;
  // Version Control System
  EXTERNAL_REFERENCE_TYPE_VCS = 1;
  // Issue or defect tracking system, or an Application Lifecycle Management (ALM) system
  EXTERNAL_REFERENCE_TYPE_ISSUE_TRACKER = 2;
  // Website
  EXTERNAL_REFERENCE_TYPE_WEBSITE = 3;
  // Security advisories
  EXTERNAL_REFERENCE_TYPE_ADVISORIES = 4;
  // Bill-of-material document (CycloneDX, SPDX, SWID, etc)
  EXTERNAL_REFERENCE_TYPE_BOM = 5;
  // Mailing list or discussion group
  EXTERNAL_REFERENCE_TYPE_MAILING_LIST = 6;
  // Social media account
  EXTERNAL_REFERENCE_TYPE_SOCIAL = 7;
  // Real-time chat platform
  EXTERNAL_REFERENCE_TYPE_CHAT = 8;
  // Documentation, guides, or how-to instructions
  EXTERNAL_REFERENCE_TYPE_DOCUMENTATION = 9;
  // Community or commercial support
  EXTERNAL_REFERENCE_TYPE_SUPPORT = 10;
  // Direct or repository download location
  EXTERNAL_REFERENCE_TYPE_DISTRIBUTION = 11;
  // The URL to the license file. If a license URL has been defined in the license node, it should also be defined as an external reference for completeness
  EXTERNAL_REFERENCE_TYPE_LICENSE = 12;
  // Build-system specific meta file (i.e. pom.xml, package.json, .nuspec, etc)
  EXTERNAL_REFERENCE_TYPE_BUILD_META = 13;
  // URL to an automated build system
  EXTERNAL_REFERENCE_TYPE_BUILD_SYSTEM = 14;
  // Specifies a way to contact the maintainer, supplier, or provider in the event of a security incident. Common URIs include links to a disclosure procedure, a mailto (RFC-2368) that specifies an email address, a tel (RFC-3966) that specifies a phone number, or dns (RFC-4501]) that specifies the records containing DNS Security TXT.
  EXTERNAL_REFERENCE_TYPE_SECURITY_CONTACT = 15;
  // Human or machine-readable statements containing facts, evidence, or testimony
  EXTERNAL_REFERENCE_TYPE_ATTESTATION = 16;
  // An enumeration of identified weaknesses, threats, and countermeasures, dataflow diagram (DFD), attack tree, and other supporting documentation in human-readable or machine-readable format
  EXTERNAL_REFERENCE_TYPE_THREAT_MODEL = 17;
  // The defined assumptions, goals, and capabilities of an adversary.
  EXTERNAL_REFERENCE_TYPE_ADVERSARY_MODEL = 18;
  // Identifies and analyzes the potential of future events that may negatively impact individuals, assets, and/or the environment. Risk assessments may also include judgments on the tolerability of each risk.
  EXTERNAL_REFERENCE_TYPE_RISK_ASSESSMENT = 19;
  // The location where a component was published to. This is often the same as "distribution" but may also include specialized publishing processes that act as an intermediary
  EXTERNAL_REFERENCE_TYPE_DISTRIBUTION_INTAKE = 20;
  // A Vulnerability Disclosure Report (VDR) which asserts the known and previously unknown vulnerabilities that affect a component, service, or product including the analysis and findings describing the impact (or lack of impact) that the reported vulnerability has on a component, service, or product
  EXTERNAL_REFERENCE_TYPE_VULNERABILITY_ASSERTION = 21;
  // A Vulnerability Exploitability eXchange (VEX) which asserts the known vulnerabilities that do not affect a product, product family, or organization, and optionally the ones that do. The VEX should include the analysis and findings describing the impact (or lack of impact) that the reported vulnerability has on the product, product family, or organization
  EXTERNAL_REFERENCE_TYPE_EXPLOITABILITY_STATEMENT = 22;
  // Results from an authorized simulated cyberattack on a component or service, otherwise known as a penetration test
  EXTERNAL_REFERENCE_TYPE_PENTEST_REPORT = 23;
  // SARIF or proprietary machine or human-readable report for which static analysis has identified code quality, security, and other potential issues with the source code
  EXTERNAL_REFERENCE_TYPE_STATIC_ANALYSIS_REPORT = 24;
  // Dynamic analysis report that has identified issues such as vulnerabilities and misconfigurations
  EXTERNAL_REFERENCE_TYPE_DYNAMIC_ANALYSIS_REPORT = 25;
  // Report generated by analyzing the call stack of a running application
  EXTERNAL_REFERENCE_TYPE_RUNTIME_ANALYSIS_REPORT = 26;
  // Report generated by Software Composition Analysis (SCA), container analysis, or other forms of component analysis
  EXTERNAL_REFERENCE_TYPE_COMPONENT_ANALYSIS_REPORT = 27;
  // Report containing a formal assessment of an organization, business unit, or team against a maturity model
  EXTERNAL_REFERENCE_TYPE_MATURITY_REPORT = 28;
  // Industry, regulatory, or other certification from an accredited (if applicable) certification body
  EXTERNAL_REFERENCE_TYPE_CERTIFICATION_REPORT = 29;
  // Report or system in which quality metrics can be obtained
  EXTERNAL_REFERENCE_TYPE_QUALITY_METRICS = 30;
  // Code or configuration that defines and provisions virtualized infrastructure, commonly referred to as Infrastructure as Code (IaC)
  EXTERNAL_REFERENCE_TYPE_CODIFIED_INFRASTRUCTURE = 31;
  // A model card describes the intended uses of a machine learning model, potential limitations, biases, ethical considerations, training parameters, datasets used to train the model, performance metrics, and other relevant data useful for ML transparency.
  EXTERNAL_REFERENCE_TYPE_MODEL_CARD = 32;
    // Plans of Action and Milestones (POAM) compliment an "attestation" external reference. POAM is defined by NIST as a "document that identifies tasks needing to be accomplished. It details resources required to accomplish the elements of the plan, any milestones in meeting the tasks and scheduled completion dates for the milestones".
  EXTERNAL_REFERENCE_TYPE_POAM = 33;
  // A record of events that occurred in a computer system or application, such as problems, errors, or information on current operations.
  EXTERNAL_REFERENCE_TYPE_LOG = 34;
  // Parameters or settings that may be used by other components or services.
  EXTERNAL_REFERENCE_TYPE_CONFIGURATION = 35;
  // Information used to substantiate a claim.
  EXTERNAL_REFERENCE_TYPE_EVIDENCE = 36;
  // Describes how a component or service was manufactured or deployed.
  EXTERNAL_REFERENCE_TYPE_FORMULATION = 37;
}

enum HashAlg {
  HASH_ALG_NULL = 0;
  HASH_ALG_MD_5 = 1;
  HASH_ALG_SHA_1 = 2;
  HASH_ALG_SHA_256 = 3;
  HASH_ALG_SHA_384 = 4;
  HASH_ALG_SHA_512 = 5;
  HASH_ALG_SHA_3_256 = 6;
  HASH_ALG_SHA_3_384 = 7;
  HASH_ALG_SHA_3_512 = 8;
  HASH_ALG_BLAKE_2_B_256 = 9;
  HASH_ALG_BLAKE_2_B_384 = 10;
  HASH_ALG_BLAKE_2_B_512 = 11;
  HASH_ALG_BLAKE_3 = 12;
}

// Specifies the file hash of the component
message Hash {
  // Specifies the algorithm used to create the hash
  HashAlg alg = 1;
  // SimpleContent value of element
  string value = 2;
}

message IdentifiableAction {
  // The timestamp in which the action occurred
  optional google.protobuf.Timestamp timestamp = 1;
  // The name of the individual who performed the action
  optional string name = 2;
  // The email address of the individual who performed the action
  optional string email = 3;
}

enum IssueClassification {
  ISSUE_CLASSIFICATION_NULL = 0;
  // A fault, flaw, or bug in software
  ISSUE_CLASSIFICATION_DEFECT = 1;
  // A new feature or behavior in software
  ISSUE_CLASSIFICATION_ENHANCEMENT = 2;
  // A special type of defect which impacts security
  ISSUE_CLASSIFICATION_SECURITY = 3;
}

message Issue {
  // Specifies the type of issue
  IssueClassification type = 1;
  // The identifier of the issue assigned by the source of the issue
  optional string id = 2;
  // The name of the issue
  optional string name = 3;
  // A description of the issue
  optional string description = 4;
  optional Source source = 5;
  repeated string references = 6;
}

// The source of the issue where it is documented.
message Source {
  // The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
  optional string name = 1;
  // The url of the issue documentation as provided by the source
  optional string url = 2;
}

message LicenseChoice {
  oneof choice {
    License license = 1;
    string expression = 2;
  }
}

message License {
  oneof license {
    // A valid SPDX license ID
    string id = 1;
    // If SPDX does not define the license used, this field may be used to provide the license name
    string name = 2;
  }
  // Specifies the optional full text of the attachment
  optional AttachedText text = 3;
  // The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
  optional string url = 4;
  // An optional identifier which can be used to reference the license elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
  optional string bom_ref = 5;
  // Licensing details describing the licensor/licensee, license type, renewal and expiration dates, and other important metadata
  optional Licensing licensing = 6;
  // Specifies optional, custom, properties
  repeated Property properties = 7;
}

message Licensing {
  // License identifiers that may be used to manage licenses and their lifecycle
  repeated string altIds = 1;
  // The individual or organization that grants a license to another individual or organization
  optional OrganizationalEntityOrContact licensor = 2;
  // The individual or organization for which a license was granted to
  optional OrganizationalEntityOrContact licensee = 3;
  // The individual or organization that purchased the license
  optional OrganizationalEntityOrContact purchaser = 4;
  // The purchase order identifier the purchaser sent to a supplier or vendor to authorize a purchase
  optional string purchaseOrder = 5;
  // The type of license(s) that was granted to the licensee
  repeated LicensingTypeEnum licenseTypes = 6;
  // The timestamp indicating when the license was last renewed. For new purchases, this is often the purchase or acquisition date. For non-perpetual licenses or subscriptions, this is the timestamp of when the license was last renewed.
  optional google.protobuf.Timestamp lastRenewal = 7;
  // The timestamp indicating when the current license expires (if applicable).
  optional google.protobuf.Timestamp expiration = 8;
}

message OrganizationalEntityOrContact {
  oneof choice {
    OrganizationalEntity organization = 1;
    OrganizationalContact individual = 2;
  }
}

enum LicensingTypeEnum {
  LICENSING_TYPE_NULL = 0;
  // A license that grants use of software solely for the purpose of education or research.
  LICENSING_TYPE_ACADEMIC = 1;
  // A license covering use of software embedded in a specific piece of hardware.
  LICENSING_TYPE_APPLIANCE = 2;
  // A Client Access License (CAL) allows client computers to access services provided by server software.
  LICENSING_TYPE_CLIENT_ACCESS = 3;
  // A Concurrent User license (aka floating license) limits the number of licenses for a software application and licenses are shared among a larger number of users.
  LICENSING_TYPE_CONCURRENT_USER = 4;
  // A license where the core of a computer's processor is assigned a specific number of points.
  LICENSING_TYPE_CORE_POINTS = 5;
  // A license for which consumption is measured by non-standard metrics.
  LICENSING_TYPE_CUSTOM_METRIC = 6;
  // A license that covers a defined number of installations on computers and other types of devices.
  LICENSING_TYPE_DEVICE = 7;
  // A license that grants permission to install and use software for trial purposes.
  LICENSING_TYPE_EVALUATION = 8;
  // A license that grants access to the software to one or more pre-defined users.
  LICENSING_TYPE_NAMED_USER = 9;
  // A license that grants access to the software on one or more pre-defined computers or devices.
  LICENSING_TYPE_NODE_LOCKED = 10;
  // An Original Equipment Manufacturer license that is delivered with hardware, cannot be transferred to other hardware, and is valid for the life of the hardware.
  LICENSING_TYPE_OEM = 11;
  // A license where the software is sold on a one-time basis and the licensee can use a copy of the software indefinitely.
  LICENSING_TYPE_PERPETUAL = 12;
  // A license where each installation consumes points per processor.
  LICENSING_TYPE_PROCESSOR_POINTS = 13;
  // A license where the licensee pays a fee to use the software or service.
  LICENSING_TYPE_SUBSCRIPTION = 14;
  // A license that grants access to the software or service by a specified number of users.
  LICENSING_TYPE_USER = 15;
  // Another license type.
  LICENSING_TYPE_OTHER = 16;
}

message Metadata {
  // The date and time (timestamp) when the document was created.
  optional google.protobuf.Timestamp timestamp = 1;
  // The tool(s) used in the creation of the BOM.
  optional Tool tools = 2;
  // The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
  repeated OrganizationalContact authors = 3;
  // The component that the BOM describes.
  optional Component component = 4;
  // The organization that manufactured the component that the BOM describes.
  optional OrganizationalEntity manufacture = 5;
  // The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
  optional OrganizationalEntity supplier = 6;
  // The license information for the BOM document
  optional LicenseChoice licenses = 7;
  // Specifies optional, custom, properties
  repeated Property properties = 8;
  // The product lifecycle(s) that this BOM represents.
  repeated Lifecycles lifecycles = 9;
}

message Lifecycles {
   oneof choice {
     // A pre-defined phase in the product lifecycle.
     LifecyclePhase phase = 1;
     // The name of the lifecycle phase
     string name = 2;
   }
   // The description of the lifecycle phase
  optional string description = 3;
}

enum LifecyclePhase {
  // BOM produced early in the development lifecycle containing inventory of components and services that are proposed or planned to be used. The inventory may need to be procured, retrieved, or resourced prior to use.
  LIFECYCLE_PHASE_DESIGN = 0;
  // BOM consisting of information obtained prior to a build process and may contain source files and development artifacts and manifests. The inventory may need to be resolved and retrieved prior to use.
  LIFECYCLE_PHASE_PRE_BUILD = 1;
  // BOM consisting of information obtained during a build process where component inventory is available for use. The precise versions of resolved components are usually available at this time as well as the provenance of where the components were retrieved from.
  LIFECYCLE_PHASE_BUILD = 2;
  // BOM consisting of information obtained after a build process has completed and the resulting components(s) are available for further analysis. Built components may exist as the result of a CI/CD process, may have been installed or deployed to a system or device, and may need to be retrieved or extracted from the system or device.
  LIFECYCLE_PHASE_POST_BUILD = 3;
  // BOM produced that represents inventory that is running and operational. This may include staging or production environments and will generally encompass multiple SBOMs describing the applications and operating system, along with HBOMs describing the hardware that makes up the system. Operations Bill of Materials (OBOM) can provide full-stack inventory of runtime environments, configurations, and additional dependencies.
  LIFECYCLE_PHASE_OPERATIONS = 4;
  // BOM consisting of information observed through network discovery providing point-in-time enumeration of embedded, on-premise, and cloud-native services such as server applications, connected devices, microservices, and serverless functions.
  LIFECYCLE_PHASE_DISCOVERY = 5;
  // BOM containing inventory that will be, or has been retired from operations.
  LIFECYCLE_PHASE_DECOMMISSION = 6;
}

message OrganizationalContact {
  // The name of the contact
  optional string name = 1;
  // The email address of the contact.
  optional string email = 2;
  // The phone number of the contact.
  optional string phone = 3;
  // An optional identifier which can be used to reference the object elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
  optional string bom_ref = 4;
}

message OrganizationalEntity {
  // The name of the organization
  optional string name = 1;
  // The URL of the organization. Multiple URLs are allowed.
  repeated string url = 2;
  // A contact person at the organization. Multiple contacts are allowed.
  repeated OrganizationalContact contact = 3;
  // An optional identifier which can be used to reference the object elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
  optional string bom_ref = 4;
}

enum PatchClassification {
  PATCH_CLASSIFICATION_NULL = 0;
  // A patch which is not developed by the creators or maintainers of the software being patched. Refer to https://en.wikipedia.org/wiki/Unofficial_patch
  PATCH_CLASSIFICATION_UNOFFICIAL = 1;
  // A patch which dynamically modifies runtime behavior. Refer to https://en.wikipedia.org/wiki/Monkey_patch
  PATCH_CLASSIFICATION_MONKEY = 2;
  // A patch which takes code from a newer version of software and applies it to older versions of the same software. Refer to https://en.wikipedia.org/wiki/Backporting
  PATCH_CLASSIFICATION_BACKPORT = 3;
  // A patch created by selectively applying commits from other versions or branches of the same software.
  PATCH_CLASSIFICATION_CHERRY_PICK = 4;
}

message Patch {
  // Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
  PatchClassification type = 1;
  // The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
  optional Diff diff = 2;
  repeated Issue resolves = 3;
}

// Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.
message Pedigree {
  // Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
  repeated Component ancestors = 1;
  // Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
  repeated Component descendants = 2;
  // Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
  repeated Component variants = 3;
  // A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
  repeated Commit commits = 4;
  // A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
  repeated Patch patches = 5;
  // Notes, observations, and other non-structured commentary describing the components pedigree.
  optional string notes = 6;
}

enum Scope {
  // Default
  SCOPE_UNSPECIFIED = 0;
  // The component is required for runtime
  SCOPE_REQUIRED = 1;
  // The component is optional at runtime. Optional components are components that are not capable of being called due to them not be installed or otherwise accessible by any means. Components that are installed but due to configuration or other restrictions are prohibited from being called must be scoped as 'required'.
  SCOPE_OPTIONAL = 2;
  // Components that are excluded provide the ability to document component usage for test and other non-runtime purposes. Excluded components are not reachable within a call graph at runtime.
  SCOPE_EXCLUDED = 3;
}

message Service {
  // An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
  optional string bom_ref = 1;
  // The organization that provides the service.
  optional OrganizationalEntity provider = 2;
  // The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
  optional string group = 3;
  // The name of the service. This will often be a shortened, single name of the service.
  string name = 4;
  // The service version.
  optional string version = 5;
  // Specifies a description for the service.
  optional string description = 6;
  repeated string endpoints = 7;
  // A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
  optional bool authenticated = 8;
  // A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
  optional bool x_trust_boundary = 9;
  repeated DataFlow data = 10;
  repeated LicenseChoice licenses = 11;
  // Provides the ability to document external references related to the service.
  repeated ExternalReference external_references = 12;
  // Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -> subsystem -> parts assembly in physical supply chains.
  repeated Service services = 13;
  // Specifies optional, custom, properties
  repeated Property properties = 14;
  // Specifies optional release notes.
  optional ReleaseNotes releaseNotes = 15;
  // The name of the trust zone the service resides in.
  optional string trustZone = 16;
}

message Swid {
  // Maps to the tagId of a SoftwareIdentity.
  string tag_id = 1;
  // Maps to the name of a SoftwareIdentity.
  string name = 2;
  // Maps to the version of a SoftwareIdentity. Defaults to '0.0' if not specified.
  optional string version = 3;
  // Maps to the tagVersion of a SoftwareIdentity. Defaults to '0' if not specified.
  optional int32 tag_version = 4;
  // Maps to the patch of a SoftwareIdentity. Defaults to 'false' if not specified.
  optional bool patch = 5;
  // Specifies the full content of the SWID tag.
  optional AttachedText text = 6;
  // The URL to the SWID file.
  optional string url = 7;
}

// Specifies a tool (manual or automated).
message Tool {
  // DEPRECATED - DO NOT USE - The vendor of the tool used to create the BOM.
  optional string vendor = 1 [deprecated = true];
  // DEPRECATED - DO NOT USE - The name of the tool used to create the BOM.
  optional string name = 2 [deprecated = true];
  // DEPRECATED - DO NOT USE - The version of the tool used to create the BOM.
  optional string version = 3 [deprecated = true];
  // DEPRECATED - DO NOT USE
  repeated Hash hashes = 4 [deprecated = true];
  // DEPRECATED - DO NOT USE - Provides the ability to document external references related to the tool.
  repeated ExternalReference external_references = 5 [deprecated = true];
  // A list of software and hardware components used as tools
  repeated Component components = 6;
  // A list of services used as tools. This may include microservices, function-as-a-service, and other types of network or intra-process services.
  repeated Service services = 7;
}

// Specifies a property
message Property {
  string name = 1;
  optional string value = 2;
}

enum Aggregate {
  // The relationship completeness is not specified.
  AGGREGATE_NOT_SPECIFIED = 0;
  // The relationship is complete. No further relationships including constituent components, services, or dependencies are known to exist.
  AGGREGATE_COMPLETE = 1;
  // The relationship is incomplete. Additional relationships exist and may include constituent components, services, or dependencies.
  AGGREGATE_INCOMPLETE = 2;
  // The relationship is incomplete. Only relationships for first-party components, services, or their dependencies are represented.
  AGGREGATE_INCOMPLETE_FIRST_PARTY_ONLY = 3;
  // The relationship is incomplete. Only relationships for third-party components, services, or their dependencies are represented.
  AGGREGATE_INCOMPLETE_THIRD_PARTY_ONLY = 4;
  // The relationship may be complete or incomplete. This usually signifies a 'best-effort' to obtain constituent components, services, or dependencies but the completeness is inconclusive.
  AGGREGATE_UNKNOWN = 5;
  // The relationship is incomplete. Only relationships for first-party components, services, or their dependencies are represented, limited specifically to those that are proprietary.
  AGGREGATE_INCOMPLETE_FIRST_PARTY_PROPRIETARY_ONLY = 6;
  // The relationship is incomplete. Only relationships for first-party components, services, or their dependencies are represented, limited specifically to those that are opensource.
  AGGREGATE_INCOMPLETE_FIRST_PARTY_OPENSOURCE_ONLY = 7;
  // The relationship is incomplete. Only relationships for third-party components, services, or their dependencies are represented, limited specifically to those that are proprietary.
  AGGREGATE_INCOMPLETE_THIRD_PARTY_PROPRIETARY_ONLY = 8;
  // The relationship is incomplete. Only relationships for third-party components, services, or their dependencies are represented, limited specifically to those that are opensource.
  AGGREGATE_INCOMPLETE_THIRD_PARTY_OPENSOURCE_ONLY = 9;
}

message Composition {
  // Indicates the aggregate completeness
  Aggregate aggregate = 1;
  // The assemblies the aggregate completeness applies to
  repeated string assemblies = 2;
  // The dependencies the aggregate completeness applies to
  repeated string dependencies = 3;
  // The bom-ref identifiers of the vulnerabilities being described.
  repeated string vulnerabilities = 4;
  // An optional identifier which can be used to reference the composition elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
  optional string bom_ref = 5;
}

message EvidenceCopyright {
  // Copyright text
  string text = 1;
}

message Evidence {
  repeated LicenseChoice licenses = 1;
  repeated EvidenceCopyright copyright = 2;
  optional EvidenceIdentity identity = 3;
  repeated EvidenceOccurrences occurrences = 4;
  optional Callstack callstack = 5;
}

// Evidence of the components use through the callstack.
message Callstack {
  repeated Frames frames = 1;

  message Frames {
    // A package organizes modules into namespaces, providing a unique namespace for each type it contains.
    optional string package = 1;
    // A module or class that encloses functions/methods and other code.
    string module = 2;
    // A block of code designed to perform a particular task.
    optional string function = 3;
    // Optional arguments that are passed to the module or function.
    repeated string parameters = 4;
    // The line number the code that is called resides on.
    optional int32 line = 5;
    // The column the code that is called resides.
    optional int32 column = 6;
    // The full path and filename of the module.
    optional string fullFilename = 7;
  }
}

message EvidenceIdentity {
  // The identity field of the component which the evidence describes.
  EvidenceFieldType field = 1;
  // The overall confidence of the evidence from 0 - 1, where 1 is 100% confidence.
  optional float confidence = 2;
  // The methods used to extract and/or analyze the evidence.
  repeated EvidenceMethods methods = 3;
  // The object in the BOM identified by its bom-ref. This is often a component or service, but may be any object type supporting bom-refs. Tools used for analysis should already be defined in the BOM, either in the metadata/tools, components, or formulation.
  repeated string tools = 4;
}

message EvidenceMethods {
  // The technique used in this method of analysis.
  EvidenceTechnique technique = 1;
  // The confidence of the evidence from 0 - 1, where 1 is 100% confidence. Confidence is specific to the technique used. Each technique of analysis can have independent confidence.
  float confidence = 2;
  // The value or contents of the evidence.
  optional string value = 3;
}

message EvidenceOccurrences {
  // An optional identifier which can be used to reference the occurrence elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
  optional string bom_ref = 1;
  // The location or path to where the component was found.
  string location = 2;
}

enum EvidenceFieldType {
  EVIDENCE_FIELD_NULL = 0;
  EVIDENCE_FIELD_GROUP = 1;
  EVIDENCE_FIELD_NAME = 2;
  EVIDENCE_FIELD_VERSION = 3;
  EVIDENCE_FIELD_PURL = 4;
  EVIDENCE_FIELD_CPE = 5;
  EVIDENCE_FIELD_SWID = 6;
  EVIDENCE_FIELD_HASH = 7;
}

enum EvidenceTechnique {
  EVIDENCE_TECHNIQUE_SOURCE_CODE_ANALYSIS = 0;
  EVIDENCE_TECHNIQUE_BINARY_ANALYSIS = 1;
  EVIDENCE_TECHNIQUE_MANIFEST_ANALYSIS = 2;
  EVIDENCE_TECHNIQUE_AST_FINGERPRINT = 3;
  EVIDENCE_TECHNIQUE_HASH_COMPARISON = 4;
  EVIDENCE_TECHNIQUE_INSTRUMENTATION = 5;
  EVIDENCE_TECHNIQUE_DYNAMIC_ANALYSIS = 6;
  EVIDENCE_TECHNIQUE_FILENAME = 7;
  EVIDENCE_TECHNIQUE_ATTESTATION = 8;
  EVIDENCE_TECHNIQUE_OTHER = 9;
}

message Note {
  // The ISO-639 (or higher) language code and optional ISO-3166 (or higher) country code. Examples include: "en", "en-US", "fr" and "fr-CA".
  optional string locale = 1;
  // Specifies the full content of the release note.
  optional AttachedText text = 2;
}

message ReleaseNotes {
  // The software versioning type. It is RECOMMENDED that the release type use one of 'major', 'minor', 'patch', 'pre-release', or 'internal'. Representing all possible software release types is not practical, so standardizing on the recommended values, whenever possible, is strongly encouraged.
  string type = 1;
  // The title of the release.
  optional string title = 2;
  // The URL to an image that may be prominently displayed with the release note.
  optional string featuredImage = 3;
  // The URL to an image that may be used in messaging on social media platforms.
  optional string socialImage = 4;
  // A short description of the release.
  optional string description = 5;
  // The date and time (timestamp) when the release note was created.
  optional google.protobuf.Timestamp timestamp = 6;
  // Optional alternate names the release may be referred to. This may include unofficial terms used by development and marketing teams (e.g. code names).
  repeated string aliases = 7;
  // Optional tags that may aid in search or retrieval of the release note.
  repeated string tags = 8;
  // A collection of issues that have been resolved.
  repeated Issue resolves = 9;
  // Zero or more release notes containing the locale and content. Multiple note messages may be specified to support release notes in a wide variety of languages.
  repeated Note notes = 10;
  // Specifies optional, custom, properties
  repeated Property properties = 11;
}

message Vulnerability {
  // An optional identifier which can be used to reference the vulnerability elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
  optional string bom_ref = 1;
  // The identifier that uniquely identifies the vulnerability.
  optional string id = 2;
  // The source that published the vulnerability.
  optional Source source = 3;
  // Zero or more pointers to vulnerabilities that are the equivalent of the vulnerability specified. Often times, the same vulnerability may exist in multiple sources of vulnerability intelligence, but have different identifiers. References provide a way to correlate vulnerabilities across multiple sources of vulnerability intelligence.
  repeated VulnerabilityReference references = 4;
  // List of vulnerability ratings
  repeated VulnerabilityRating ratings = 5;
  // List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability. For example 399 (of https://cwe.mitre.org/data/definitions/399.html)
  repeated int32 cwes = 6;
  // A description of the vulnerability as provided by the source.
  optional string description = 7;
  // If available, an in-depth description of the vulnerability as provided by the source organization. Details often include information useful in understanding root cause.
  optional string detail = 8;
  // Recommendations of how the vulnerability can be remediated or mitigated.
  optional string recommendation = 9;
  // Published advisories of the vulnerability if provided.
  repeated Advisory advisories = 10;
  // The date and time (timestamp) when the vulnerability record was created in the vulnerability database.
  optional google.protobuf.Timestamp created = 11;
  // The date and time (timestamp) when the vulnerability record was first published.
  optional google.protobuf.Timestamp published = 12;
  // The date and time (timestamp) when the vulnerability record was last updated.
  optional google.protobuf.Timestamp updated = 13;
  // Individuals or organizations credited with the discovery of the vulnerability.
  optional VulnerabilityCredits credits = 14;
  // The tool(s) used to identify, confirm, or score the vulnerability.
  optional Tool tools = 15;
  // An assessment of the impact and exploitability of the vulnerability.
  optional VulnerabilityAnalysis analysis = 16;
  // affects
  repeated VulnerabilityAffects affects = 17;
  // Specifies optional, custom, properties
  repeated Property properties = 18;
  // The date and time (timestamp) when the vulnerability record was rejected (if applicable).
  optional google.protobuf.Timestamp rejected = 19;
  // Evidence used to reproduce the vulnerability.
  optional ProofOfConcept proofOfConcept = 20;
  // A bypass, usually temporary, of the vulnerability that reduces its likelihood and/or impact. Workarounds often involve changes to configuration or deployments.
  optional string workaround = 21;
}

message ProofOfConcept {
  // Precise steps to reproduce the vulnerability.
  optional string reproductionSteps = 1;
  // A description of the environment in which reproduction was possible.
  optional string environment = 2;
  // Supporting material that helps in reproducing or understanding how reproduction is possible. This may include screenshots, payloads, and PoC exploit code.
  repeated AttachedText supportingMaterial = 3;
}

message VulnerabilityReference {
  // An identifier that uniquely identifies the vulnerability.
  string id = 1;
  // The source that published the vulnerability.
  Source source = 2;
}

message VulnerabilityRating {
  // The source that calculated the severity or risk rating of the vulnerability.
  optional Source source = 1;
  // The numerical score of the rating.
  optional double score = 2;
  // Textual representation of the severity that corresponds to the numerical score of the rating.
  optional Severity severity = 3;
  // Specifies the severity or risk scoring methodology or standard used.
  optional ScoreMethod method = 4;
  // Textual representation of the metric values used to score the vulnerability.
  optional string vector = 5;
  // An optional reason for rating the vulnerability as it was.
  optional string justification = 6;
}

enum Severity {
  SEVERITY_UNKNOWN = 0;
  SEVERITY_CRITICAL = 1;
  SEVERITY_HIGH = 2;
  SEVERITY_MEDIUM = 3;
  SEVERITY_LOW = 4;
  SEVERITY_INFO = 5;
  SEVERITY_NONE = 6;
}

enum ScoreMethod {
  // An undefined score method
  SCORE_METHOD_NULL = 0;
  // Common Vulnerability Scoring System v2 - https://www.first.org/cvss/v2/
  SCORE_METHOD_CVSSV2 = 1;
  // Common Vulnerability Scoring System v3 - https://www.first.org/cvss/v3-0/
  SCORE_METHOD_CVSSV3 = 2;
  // Common Vulnerability Scoring System v3.1 - https://www.first.org/cvss/v3-1/
  SCORE_METHOD_CVSSV31 = 3;
  // OWASP Risk Rating Methodology - https://owasp.org/www-community/OWASP_Risk_Rating_Methodology
  SCORE_METHOD_OWASP = 4;
  // Other scoring method
  SCORE_METHOD_OTHER = 5;
  // Common Vulnerability Scoring System v3.1 - https://www.first.org/cvss/v4-0/
  SCORE_METHOD_CVSSV4 = 6;
  // Stakeholder Specific Vulnerability Categorization (all versions) - https://github.com/CERTCC/SSVC
  SCORE_METHOD_SSVC = 7;
}

message Advisory {
  // An optional name of the advisory.
  optional string title = 1;
  // Location where the advisory can be obtained.
  string url = 2;
}

message VulnerabilityCredits {
  // The organizations credited with vulnerability discovery.
  repeated OrganizationalEntity organizations = 1;
  // The individuals, not associated with organizations, that are credited with vulnerability discovery.
  repeated OrganizationalContact individuals = 2;
}

message VulnerabilityAnalysis {
  // Declares the current state of an occurrence of a vulnerability, after automated or manual analysis.
  optional ImpactAnalysisState state = 1;
  // The rationale of why the impact analysis state was asserted.
  optional ImpactAnalysisJustification justification = 2;
  // A response to the vulnerability by the manufacturer, supplier, or project responsible for the affected component or service. More than one response is allowed. Responses are strongly encouraged for vulnerabilities where the analysis state is exploitable.
  repeated VulnerabilityResponse response = 3;
  // Detailed description of the impact including methods used during assessment. If a vulnerability is not exploitable, this field should include specific details on why the component or service is not impacted by this vulnerability.
  optional string detail = 4;
  // The date and time (timestamp) when the analysis was first issued.
  optional google.protobuf.Timestamp firstIssued = 5;
  // The date and time (timestamp) when the analysis was last updated.
  optional google.protobuf.Timestamp lastUpdated = 6;
}

enum ImpactAnalysisState {
  // An undefined impact analysis state
  IMPACT_ANALYSIS_STATE_NULL = 0;
  // The vulnerability has been remediated.
  IMPACT_ANALYSIS_STATE_RESOLVED = 1;
  // The vulnerability has been remediated and evidence of the changes are provided in the affected components pedigree containing verifiable commit history and/or diff(s).
  IMPACT_ANALYSIS_STATE_RESOLVED_WITH_PEDIGREE = 2;
  // The vulnerability may be directly or indirectly exploitable.
  IMPACT_ANALYSIS_STATE_EXPLOITABLE = 3;
  // The vulnerability is being investigated.
  IMPACT_ANALYSIS_STATE_IN_TRIAGE = 4;
  // The vulnerability is not specific to the component or service and was falsely identified or associated.
  IMPACT_ANALYSIS_STATE_FALSE_POSITIVE = 5;
  // The component or service is not affected by the vulnerability. Justification should be specified for all not_affected cases.
  IMPACT_ANALYSIS_STATE_NOT_AFFECTED = 6;
}

enum ImpactAnalysisJustification {
  // An undefined impact analysis justification
  IMPACT_ANALYSIS_JUSTIFICATION_NULL = 0;
  // The code has been removed or tree-shaked.
  IMPACT_ANALYSIS_JUSTIFICATION_CODE_NOT_PRESENT = 1;
  // The vulnerable code is not invoked at runtime.
  IMPACT_ANALYSIS_JUSTIFICATION_CODE_NOT_REACHABLE = 2;
  // Exploitability requires a configurable option to be set/unset.
  IMPACT_ANALYSIS_JUSTIFICATION_REQUIRES_CONFIGURATION = 3;
  // Exploitability requires a dependency that is not present.
  IMPACT_ANALYSIS_JUSTIFICATION_REQUIRES_DEPENDENCY = 4;
  // Exploitability requires a certain environment which is not present.
  IMPACT_ANALYSIS_JUSTIFICATION_REQUIRES_ENVIRONMENT = 5;
  // Exploitability requires a compiler flag to be set/unset.
  IMPACT_ANALYSIS_JUSTIFICATION_PROTECTED_BY_COMPILER = 6;
  // Exploits are prevented at runtime.
  IMPACT_ANALYSIS_JUSTIFICATION_PROTECTED_AT_RUNTIME = 7;
  // Attacks are blocked at physical, logical, or network perimeter.
  IMPACT_ANALYSIS_JUSTIFICATION_PROTECTED_AT_PERIMETER = 8;
  // Preventative measures have been implemented that reduce the likelihood and/or impact of the vulnerability.
  IMPACT_ANALYSIS_JUSTIFICATION_PROTECTED_BY_MITIGATING_CONTROL = 9;
}

enum VulnerabilityResponse {
  VULNERABILITY_RESPONSE_NULL = 0;
  VULNERABILITY_RESPONSE_CAN_NOT_FIX = 1;
  VULNERABILITY_RESPONSE_WILL_NOT_FIX = 2;
  VULNERABILITY_RESPONSE_UPDATE = 3;
  VULNERABILITY_RESPONSE_ROLLBACK = 4;
  VULNERABILITY_RESPONSE_WORKAROUND_AVAILABLE = 5;
}

message VulnerabilityAffects {
  // References a component or service by the objects bom-ref
  string ref = 1;
  // Zero or more individual versions or range of versions.
  repeated VulnerabilityAffectedVersions versions = 2;
}

message VulnerabilityAffectedVersions {
  oneof choice {
    // A single version of a component or service.
    string version = 1;
    // A version range specified in Package URL Version Range syntax (vers) which is defined at https://github.com/package-url/purl-spec/VERSION-RANGE-SPEC.rst
    string range = 2;
  }
  // The vulnerability status for the version or range of versions. Defaults to VULNERABILITY_AFFECTED_STATUS_AFFECTED if not specified.
  optional VulnerabilityAffectedStatus status = 3;
}

enum VulnerabilityAffectedStatus {
  // The vulnerability status of a given version or range of versions of a product. The statuses 'affected' and 'unaffected' indicate that the version is affected or unaffected by the vulnerability. The status 'unknown' indicates that it is unknown or unspecified whether the given version is affected. There can be many reasons for an 'unknown' status, including that an investigation has not been undertaken or that a vendor has not disclosed the status.
  VULNERABILITY_AFFECTED_STATUS_UNKNOWN = 0;
  VULNERABILITY_AFFECTED_STATUS_AFFECTED = 1;
  VULNERABILITY_AFFECTED_STATUS_NOT_AFFECTED = 2;
}

message AnnotatorChoice {
  oneof choice {
    // The organization that created the annotation
    OrganizationalEntity organization = 1;
    // The person that created the annotation
    OrganizationalContact individual = 2;
    // The tool or component that created the annotation
    Component component = 3;
    // The service that created the annotation
    Service service = 4;
  }
}

message Annotation {
  // An optional identifier which can be used to reference the annotation elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
  optional string bom_ref = 1;
  // The object in the BOM identified by its bom-ref. This is often a component or service, but may be any object type supporting bom-refs.
  repeated string subjects = 2;
  // The organization, person, component, or service which created the textual content of the annotation.
  AnnotatorChoice annotator = 3;
  // The date and time (timestamp) when the annotation was created.
  google.protobuf.Timestamp timestamp = 4;
  // The textual content of the annotation.
  string text = 5;
}

message ModelCard {
  // An optional identifier which can be used to reference the model card elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
  optional string bom_ref = 1;
  // Hyper-parameters for construction of the model.
  optional ModelParameters modelParameters = 2;
  // A quantitative analysis of the model
  optional QuantitativeAnalysis quantitativeAnalysis = 3;
  // What considerations should be taken into account regarding the model's construction, training, and application?
  optional ModelCardConsiderations considerations = 4;

  message ModelParameters {
    // The overall approach to learning used by the model for problem solving.
    optional Approach approach = 1;
    // Directly influences the input and/or output. Examples include classification, regression, clustering, etc.
    optional string task = 2;
    // The model architecture family such as transformer network, convolutional neural network, residual neural network, LSTM neural network, etc.
    optional string architectureFamily = 3;
    //The specific architecture of the model such as GPT-1, ResNet-50, YOLOv3, etc.
    optional string modelArchitecture = 4;
    // The datasets used to train and evaluate the model.
    repeated Datasets datasets = 5;
    // The input format(s) of the model
    repeated MachineLearningInputOutputParameters inputs = 6;
    // The output format(s) from the model
    repeated MachineLearningInputOutputParameters outputs = 7;

    message Approach {
      optional ModelParameterApproachType type = 1;
    }
    message Datasets {
      oneof choice {
        ComponentData dataset = 1;
        // References a data component by the components bom-ref attribute
        string ref = 2;
      }
    }
    message MachineLearningInputOutputParameters {
      // The data format for input/output to the model. Example formats include string, image, time-series
      optional string format = 1;
    }
  }
  message QuantitativeAnalysis {
    // The model performance metrics being reported. Examples may include accuracy, F1 score, precision, top-3 error rates, MSC, etc.
    repeated PerformanceMetrics performanceMetrics = 1;
    optional GraphicsCollection graphics = 2;

    message PerformanceMetrics {
      // The type of performance metric.
      optional string type = 1;
      // The value of the performance metric.
      optional string value = 2;
      // The name of the slice this metric was computed on. By default, assume this metric is not sliced.
      optional string slice = 3;
      // The confidence interval of the metric.
      optional ConfidenceInterval confidenceInterval = 4;

      message ConfidenceInterval {
        // The lower bound of the confidence interval.
        optional string lowerBound = 1;
        // The upper bound of the confidence interval.
        optional string upperBound = 2;
      }
    }
  }
  message ModelCardConsiderations {
    // Who are the intended users of the model?
    repeated string users = 1;
    // What are the intended use cases of the model?
    repeated string useCases = 2;
    // What are the known technical limitations of the model? E.g. What kind(s) of data should the model be expected not to perform well on? What are the factors that might degrade model performance?
    repeated string technicalLimitations = 3;
    // What are the known tradeoffs in accuracy/performance of the model?
    repeated string performanceTradeoffs = 4;
    // What are the ethical (or environmental) risks involved in the application of this model?
    repeated EthicalConsiderations ethicalConsiderations = 5;
    // How does the model affect groups at risk of being systematically disadvantaged? What are the harms and benefits to the various affected groups?
    repeated FairnessAssessments fairnessAssessments = 6;

    message EthicalConsiderations {
      // The name of the risk.
      optional string name = 1;
      // Strategy used to address this risk.
      optional string mitigationStrategy = 2;
    }
    message FairnessAssessments {
      // The groups or individuals at risk of being systematically disadvantaged by the model.
      optional string groupAtRisk = 1;
      // Expected benefits to the identified groups.
      optional string benefits = 2;
      // Expected harms to the identified groups.
      optional string harms = 3;
      // With respect to the benefits and harms outlined, please describe any mitigation strategy implemented.
      optional string mitigationStrategy = 4;
    }
  }
}

enum ModelParameterApproachType {
  MODEL_PARAMETER_APPROACH_TYPE_SUPERVISED = 0;
  MODEL_PARAMETER_APPROACH_TYPE_UNSUPERVISED = 1;
  MODEL_PARAMETER_APPROACH_TYPE_REINFORCED_LEARNING = 2;
  MODEL_PARAMETER_APPROACH_TYPE_SEMI_SUPERVISED = 3;
  MODEL_PARAMETER_APPROACH_TYPE_SELF_SUPERVISED = 4;
}

message ComponentData {
  // An optional identifier which can be used to reference the dataset elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
  optional string bom_ref = 1;
  // The general theme or subject matter of the data being specified.
  ComponentDataType type = 2;
  // The name of the dataset.
  optional string name = 3;
  // The contents or references to the contents of the data being described.
  optional ComponentDataContents contents = 4;
  // Data classification tags data according to its type, sensitivity, and value if altered, stolen, or destroyed.
  optional string classification = 5;
  // A description of any sensitive data in a dataset.
  repeated string sensitiveData = 6;
  // A collection of graphics that represent various measurements.
  optional GraphicsCollection graphics = 7;
  // A description of the dataset. Can describe size of dataset, whether it's used for source code, training, testing, or validation, etc.
  optional string description = 8;
  // Data Governance
  optional DataGovernance governance = 9;

  message ComponentDataContents {
    // An optional way to include textual or encoded data.
    optional AttachedText attachment = 1;
    // The URL to where the data can be retrieved.
    optional string url = 2;
    // Provides the ability to document name-value parameters used for configuration.
    repeated Property properties = 3;
  }
}

message DataGovernance {
  // Data custodians are responsible for the safe custody, transport, and storage of data.
  repeated DataGovernanceResponsibleParty custodians = 1;
  // Data stewards are responsible for data content, context, and associated business rules.
  repeated DataGovernanceResponsibleParty stewards = 2;
  // Data owners are concerned with risk and appropriate access to data.
  repeated DataGovernanceResponsibleParty owners = 3;

  message DataGovernanceResponsibleParty {
    oneof choice {
      OrganizationalEntity organization = 1;
      OrganizationalContact contact = 2;
    }
  }
}

enum ComponentDataType {
  // Any type of code, code snippet, or data-as-code
  COMPONENT_DATA_TYPE_SOURCE_CODE = 0;
  // Parameters or settings that may be used by other components.
  COMPONENT_DATA_TYPE_CONFIGURATION = 1;
  // A collection of data.
  COMPONENT_DATA_TYPE_DATASET = 2;
  // Data that can be used to create new instances of what the definition defines.
  COMPONENT_DATA_TYPE_DEFINITION = 3;
  // Any other type of data that does not fit into existing definitions.
  COMPONENT_DATA_TYPE_OTHER = 4;
}

message GraphicsCollection {
  // A description of this collection of graphics.
  optional string description = 1;
  // A collection of graphics.
  repeated Graphic graphic = 2;

  message Graphic {
    // The name of the graphic.
    optional string name = 1;
    // The graphic (vector or raster). Base64 encoding MUST be specified for binary images.
    optional AttachedText image = 2;
  }
}

// Describes workflows and resources that captures rules and other aspects of how the associated BOM component or service was formed.
message Formula {
  // BOM unique reference to the resource.
  optional string bom_ref = 1;
  // Transient components that are used in tasks that constitute one or more of this formula's workflows
  repeated Component components = 2;
  // Transient services that are used in tasks that constitute one or more of this formula's workflows
  repeated Service services = 3;
  // List of workflows that can be declared to accomplish specific orchestrated goals and independently triggered.
  repeated Workflow workflows = 4;
  // Domain-specific formula properties.
  repeated Property properties = 5;
}

// A specialized orchestration task.
message Workflow {
  // BOM unique reference to the resource.
  string bom_ref = 1;
  // The unique identifier for the resource instance within its deployment context.
  string uid = 2;
  // The name of the resource instance.
  optional string name = 3;
  // A description of the resource instance.
  optional string description = 4;
  // Domain-specific resource instance properties.
  repeated Property properties = 5;
  // References to component or service resources that are used to realize the resource instance.
  repeated ResourceReferenceChoice resourceReferences = 6;
  // The tasks that comprise the workflow.
  repeated Task tasks = 7;
  // The graph of dependencies between tasks within the workflow.
  repeated Dependency taskDependencies = 8;
  // Indicates the types of activities performed by the set of workflow tasks.
  repeated TaskType taskTypes = 9;
  // The trigger that initiated the task.
  optional Trigger trigger = 10;
  // The sequence of steps for the task.
  repeated Step steps = 11;
  // Represents resources and data brought into a task at runtime by executor or task commands
  repeated InputType inputs = 12;
  // Represents resources and data output from a task at runtime by executor or task commands
  repeated OutputType outputs = 13;
  // The date and time (timestamp) when the task started.
  optional google.protobuf.Timestamp timeStart = 14;
  // The date and time (timestamp) when the task ended.
  optional google.protobuf.Timestamp timeEnd = 15;
  // A set of named filesystem or data resource shareable by workflow tasks.
  repeated Workspace workspaces = 16;
  // A graph of the component runtime topology for workflow's instance.
  repeated Dependency runtimeTopology = 17;
}

// Describes the inputs, sequence of steps and resources used to accomplish a task and its output.
message Task {
  // BOM unique reference to the resource.
  string bom_ref = 1;
  // The unique identifier for the resource instance within its deployment context.
  string uid = 2;
  // The name of the resource instance.
  optional string name = 3;
  // A description of the resource instance.
  optional string description = 4;
  // Domain-specific task instance properties.
  repeated Property properties = 5;
  // References to component or service resources that are used to realize the resource instance.
  repeated ResourceReferenceChoice resourceReferences = 6;
  // Indicates the types of activities performed by the set of workflow tasks.
  repeated TaskType taskTypes = 7;
  // The trigger that initiated the task.
  optional Trigger trigger = 8;
  // "The sequence of steps for the task.
  repeated Step steps = 9;
  // Represents resources and data brought into a task at runtime by executor or task commands
  repeated InputType inputs = 10;
  // Represents resources and data output from a task at runtime by executor or task commands
  repeated OutputType outputs = 11;
  // The date and time (timestamp) when the task started.
  optional google.protobuf.Timestamp timeStart = 14;
  // The date and time (timestamp) when the task ended.
  optional google.protobuf.Timestamp timeEnd = 15;
  // A set of named filesystem or data resource shareable by workflow tasks.
  repeated Workspace workspaces = 16;
  // A graph of the component runtime topology for task's instance.
  repeated Dependency runtimeTopology = 17;
}

// Executes specific commands or tools in order to accomplish its owning task as part of a sequence.
message Step {
  // A name for the step.
  optional string name = 1;
  // A description of the step.
  optional string description = 2;
  // Ordered list of commands or directives for the step
  repeated Command commands = 3;
  // Domain-specific step properties.
  repeated Property properties = 4;
}

message Command {
  // A text representation of the executed command.
  optional string executed = 1;
  // Domain-specific command properties.
  repeated Property properties = 2;
}

// A named filesystem or data resource shareable by workflow tasks.
message Workspace {
  // BOM unique reference to the resource.
  string bom_ref = 1;
  // The unique identifier for the resource instance within its deployment context.
  string uid = 2;
  // The name of the resource instance.
  optional string name = 3;
  // The names for the workspace as referenced by other workflow tasks. Effectively, a name mapping so other tasks can use their own local name in their steps.
  repeated string aliases = 4;
  // A description of the resource instance.
  optional string description = 5;
  // Domain-specific workspace instance properties.
  repeated Property properties = 6;
  // References to component or service resources that are used to realize the resource instance.
  repeated ResourceReferenceChoice resourceReferences = 7;
  // Describes the read-write access control for the workspace relative to the owning resource instance.
  optional AccessMode accessMode = 8;
  // A path to a location on disk where the workspace will be available to the associated task's steps.
  optional string mountPath = 9;
  // The name of a domain-specific data type the workspace represents.
  optional string managedDataType = 10;
  // Identifies the reference to the request for a specific volume type and parameters.
  optional string volumeRequest = 11;
  // Information about the actual volume instance allocated to the workspace.
  optional Volume volume = 12;

  enum AccessMode {
    ACCESS_MODE_READ_ONLY = 0;
    ACCESS_MODE_READ_WRITE = 1;
    ACCESS_MODE_READ_WRITE_ONCE = 2;
    ACCESS_MODE_WRITE_ONCE = 3;
    ACCESS_MODE_WRITE_ONLY = 4;
  }
}

// An identifiable, logical unit of data storage tied to a physical device.
message Volume {
  // The unique identifier for the volume instance within its deployment context.
  optional string uid = 1;
  // The name of the volume instance
  optional string name = 2;
  // The volume mode for the volume instance.
  optional VolumeMode mode = 3;
  // The underlying path created from the actual volume.
  optional string path = 4;
  // The allocated size of the volume accessible to the associated workspace. This should include the scalar size as well as IEC standard unit in either decimal or binary form.
  optional string sizeAllocated = 5;
  // Indicates if the volume persists beyond the life of the resource it is associated with.
  optional bool persistent = 6;
  // Indicates if the volume is remotely (i.e., network) attached.
  optional bool remote = 7;
  // Domain-specific volume instance properties.
  repeated Property properties = 8;

  enum VolumeMode {
    VOLUME_MODE_FILESYSTEM = 0;
    VOLUME_MODE_BLOCK = 1;
  }
}

// Represents a resource that can conditionally activate (or fire) tasks based upon associated events and their data.
message Trigger {
  // BOM unique reference to the resource.
  string bom_ref = 1;
  // The unique identifier for the resource instance within its deployment context.
  string uid = 2;
  // The name of the resource instance.
  optional string name = 3;
  // A description of the resource instance.
  optional string description = 4;
  // Additional properties of the trigger.
  repeated Property properties = 5;
  // References to component or service resources that are used to realize the resource instance.
  repeated ResourceReferenceChoice resourceReferences = 6;
  // The source type of event which caused the trigger to fire.
  TriggerType type = 7;
  // The event data that caused the associated trigger to activate.
  optional Event event = 8;
  // Conditions
  repeated Condition conditions = 9;
  // The date and time (timestamp) when the trigger was activated.
  optional google.protobuf.Timestamp timeActivated = 10;
  // Represents resources and data brought into a task at runtime by executor or task commands
  repeated InputType inputs = 11;
  // Represents resources and data output from a task at runtime by executor or task commands
  repeated OutputType outputs = 12;

  enum TriggerType {
    TRIGGER_TYPE_MANUAL = 0;
    TRIGGER_TYPE_API = 1;
    TRIGGER_TYPE_WEBHOOK = 2;
    TRIGGER_TYPE_SCHEDULED = 3;
  }
}

// Represents something that happened that may trigger a response.
message Event {
  // The unique identifier of the event.
  optional string uid = 1;
  // A description of the event.
  optional string description = 2;
  // The date and time (timestamp) when the event was received.
  optional google.protobuf.Timestamp timeReceived = 3;
  // Encoding of the raw event data.
  optional AttachedText data = 4;
  // References the component or service that was the source of the event
  optional ResourceReferenceChoice source = 5;
  // References the component or service that was the target of the event
  optional ResourceReferenceChoice target = 6;
  // Additional properties of the event.
  repeated Property properties = 7;
}

// Type that represents various input data types and formats.
message InputType {
  // A references to the component or service that provided the input to the task (e.g., reference to a service with data flow value of `inbound`)
  optional ResourceReferenceChoice source = 1;
  // A reference to the component or service that received or stored the input if not the task itself (e.g., a local, named storage workspace)
  optional ResourceReferenceChoice target = 2;
  // A reference to an independent resource provided as an input to a task by the workflow runtime.
  optional ResourceReferenceChoice resource = 3;
  // Inputs that have the form of parameters with names and values.
  repeated Parameter parameters = 4;
  // Inputs that have the form of parameters with names and values.
  repeated EnvironmentVars environmentVars = 5;
  // Inputs that have the form of data.
  optional AttachedText data = 6;
  // Additional properties of the input data.
  repeated Property properties = 7;
}

message OutputType {
  // Describes the type of data output.
  optional OutputTypeType type = 1;
  // Component or service that generated or provided the output from the task (e.g., a build tool)
  optional ResourceReferenceChoice source = 2;
  // Component or service that received the output from the task (e.g., reference to an artifactory service with data flow value of `outbound`)
  optional ResourceReferenceChoice target = 3;
  // A reference to an independent resource generated as output by the task.
  optional ResourceReferenceChoice resource = 4;
  // Outputs that have the form of data.
  optional AttachedText data = 5;
  // Outputs that have the form of environment variables.
  repeated EnvironmentVars environmentVars = 6;
  // Additional properties of the output data.
  repeated Property properties = 7;

  enum OutputTypeType {
    OUTPUT_TYPE_ARTIFACT = 0;
    OUTPUT_TYPE_ATTESTATION = 1;
    OUTPUT_TYPE_LOG = 2;
    OUTPUT_TYPE_EVIDENCE = 3;
    OUTPUT_TYPE_METRICS = 4;
    OUTPUT_TYPE_OTHER = 5;
  }
}

message ResourceReferenceChoice {
  oneof choice {
    string ref = 1;
    ExternalReference externalReference = 2;
  }
}

// A condition that was used to determine a trigger should be activated.
message Condition {
  // Describes the set of conditions which cause the trigger to activate.
  optional string description = 1;
  // The logical expression that was evaluated that determined the trigger should be fired.
  optional string expression = 2;
  // Domain-specific condition instance properties.
  repeated Property properties = 3;
}

enum TaskType {
  TASK_TYPE_COPY = 0;
  TASK_TYPE_CLONE = 1;
  TASK_TYPE_LINT = 2;
  TASK_TYPE_SCAN = 3;
  TASK_TYPE_MERGE = 4;
  TASK_TYPE_BUILD = 5;
  TASK_TYPE_TEST = 6;
  TASK_TYPE_DELIVER = 7;
  TASK_TYPE_DEPLOY = 8;
  TASK_TYPE_RELEASE = 9;
  TASK_TYPE_CLEAN = 10;
  TASK_TYPE_OTHER = 11;
}

// A representation of a functional parameter.
message Parameter {
  // The name of the parameter.
  optional string name = 1;
  // The value of the parameter.
  optional string value = 2;
  // The data type of the parameter.
  optional string dataType = 3;
}

message EnvironmentVars {
  oneof choice {
    Property property = 1;
    string value = 2;
  }
}
