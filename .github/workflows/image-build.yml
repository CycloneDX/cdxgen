name: Image build

# This workflow CAN NOT be called directly. It is currently used by:
# - build-images.yml
# - build-rolling-image.yml
#
# If any changes are made to this workflow, specifically with any inputs, make
# sure to check/update the above workflows!

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      latest:
        required: true
        type: boolean

env:
  NEXUS_ALPINE_REPO_PATH: /repository/alpine
  NEXUS_COMPOSER_PATH: /repository/composer
  NEXUS_DEBIAN_REPO_PATH: /repository/debian
  NEXUS_GITHUB_PATH: /repository/github
  NEXUS_NODEJS_PATH: /repository/nodejs
  NEXUS_NPM_REPO_PATH: /repository/npm
  NEXUS_NUGET_REPO_PATH: /repository/nuget
  NEXUS_OPENSUSE_CODECS_REPO_PATH: /repository/opensuse-codecs
  NEXUS_OPENSUSE_REPO_PATH: /repository/opensuse
  NEXUS_PORT: 8081
  NEXUS_PYPI_REPO_PATH: /repository/pypi
  NEXUS_REDHAT_REPO_PATH: /repository/redhat
  NEXUS_RUBY_LANG_PATH: /repository/ruby-lang
  NEXUS_RUBYGEMS_REPO_PATH: /repository/rubygems
  NEXUS_SDKMAN_PATH: /repository/sdkman
  NEXUS_SERVER: 100.73.146.80
  NEXUS_SUSE_MICROSOFT_REPO_PATH: /repository/suse-microsoft
  NEXUS_SUSE_REPO_PATH: /repository/suse
  NEXUS_SWIFT_PATH: /repository/swift
  REPO: ghcr.io
  TAG: v11
  TEAM: cyclonedx


# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/controlling-permissions-for-github_token
permissions: {}

jobs:
  image:
    permissions:
      packages: write  # needed for publishing images on GH package registry
    runs-on: ${{ fromJSON(inputs.image).runner || 'ubuntu-24.04' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Free disk space
        if: ${{ ! fromJSON(inputs.image).runner }}
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
      - name: Trim CI agent even more
        if: ${{ ! fromJSON(inputs.image).runner }}
        run: |
          chmod +x contrib/free_disk_space.sh
          ./contrib/free_disk_space.sh
      - name: Set up QEMU
        if: ${{ ! fromJSON(inputs.image).runner }}
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - name: Fix QEMU
        if: ${{ fromJSON(inputs.image).fix-qemu }}
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes -c yes
      - name: Set up Docker BuildX
        if: ${{ ! fromJSON(inputs.image).runner }}
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Setup ORAS
        uses: oras-project/setup-oras@22ce207df3b08e061f537244349aac6ae1d214f6 # v1.2.4
      - name: Setup Nexus usage
        id: nexus
        if: ${{ fromJSON(inputs.image).runner }}
        run: |
          NPM_REPO=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_NPM_REPO_PATH
          echo -e "registry=$NPM_REPO\n@jsr:registry=$NPM_REPO" > .npmrc
          cat >> "$GITHUB_OUTPUT" << EOF
          docker-args<<VALUE
          "ALPINE_REPO=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_ALPINE_REPO_PATH"
          "COMPOSER_URL=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_COMPOSER_PATH"
          "DEBIAN_REPO=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_DEBIAN_REPO_PATH"
          "GITHUB_URL=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_GITHUB_PATH"
          "NODEJS_DIST_URL=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_NODEJS_PATH/dist"
          "NPM_REPO=$NPM_REPO"
          "NUGET_REPO=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_NUGET_REPO_PATH"
          "OPENSUSE_CODECS_REPO=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_OPENSUSE_CODECS_REPO_PATH"
          "OPENSUSE_REPO=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_OPENSUSE_REPO_PATH"
          "PIP_CONFIG=[global]\nindex-url=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_PYPI_REPO_PATH/simple\ntrusted-host=$NEXUS_SERVER"
          "REDHAT_REPO=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_REDHAT_REPO_PATH"
          "RUBY_LANG_URL=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_RUBY_LANG_PATH"
          "RUBYGEMS_REPO=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_RUBYGEMS_REPO_PATH"
          "SDKMAN_URL=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_SDKMAN_PATH/2"
          "SUSE_MICROSOFT_REPO=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_SUSE_MICROSOFT_REPO_PATH"
          "SUSE_REPO=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_SUSE_REPO_PATH"
          "SWIFT_URL=http://$NEXUS_SERVER:$NEXUS_PORT$NEXUS_SWIFT_PATH"
          VALUE
          EOF
      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
      - name: Install project dependencies
        run: |
          pnpm install:frozen
          mkdir -p $RUNNER_TEMP/cdxgen-sboms
      - name: Login to the Container registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Base image
      - name: Build base image
        uses: ./.github/actions/build-docker-images-generate-attach-sboms
        with:
          build-arm: ${{ ! fromJSON(inputs.image).skip-arm }}
          dockerfile: ci/images/${{ fromJSON(inputs.image).distro }}/Dockerfile.${{ fromJSON(inputs.image).lang }}
          docker-args: ${{ steps.nexus.outputs.docker-args }}
          images: |
             ${{ env.REPO }}/${{ env.TEAM }}/${{ fromJSON(inputs.image).base-image.name || fromJSON(inputs.image).distro || 'bci' }}-${{ fromJSON(inputs.image).base-image.lang || fromJSON(inputs.image).lang }}
             ${{ fromJSON(inputs.image).base-image.additional-image && format('{0}/{1}/{2}', env.REPO, env.TEAM, fromJSON(inputs.image).base-image.additional-image) || '' }}
          latest: ${{ inputs.latest }}
          signing-key: ${{ secrets.SBOM_SIGN_PRIVATE_KEY }}
          target: base

      # cdxgen image
      - name: Build cdxgen image - master-branch
        if: ${{ startsWith(github.ref, 'refs/heads/') }}
        uses: ./.github/actions/build-docker-images-generate-attach-sboms
        with:
          build-arm: ${{ ! fromJSON(inputs.image).skip-arm }}
          dockerfile: ci/images/${{ fromJSON(inputs.image).distro }}/Dockerfile.${{ fromJSON(inputs.image).lang }}
          docker-args: ${{ steps.nexus.outputs.docker-args }}
          images: |
            ${{ env.REPO }}/${{ env.TEAM }}/cdxgen${{ fromJSON(inputs.image).distro && format('-{0}', fromJSON(inputs.image).distro) }}-${{ fromJSON(inputs.image).lang }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image && format('{0}/{1}/{2}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image) || '' }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image2 && format('{0}/{1}/{2}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image2) || '' }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image3 && format('{0}/{1}/{2}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image3) || '' }}
          language: ${{ fromJSON(inputs.image).lang }}
          latest: ${{ inputs.latest }}
          main-tag: ${{ env.REPO }}/${{ env.TEAM }}/cdxgen${{ fromJSON(inputs.image).distro && format('-{0}', fromJSON(inputs.image).distro) }}-${{ fromJSON(inputs.image).lang }}:${{ env.TAG }}
          signing-key: ${{ secrets.SBOM_SIGN_PRIVATE_KEY }}
          tags: |
            ${{ env.REPO }}/${{ env.TEAM }}/cdxgen${{ fromJSON(inputs.image).distro && format('-{0}', fromJSON(inputs.image).distro) }}-${{ fromJSON(inputs.image).lang }}:${{ env.TAG }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image && format('{0}/{1}/{2}:{3}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image, env.TAG) }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image2 && format('{0}/{1}/{2}:{3}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image2, env.TAG) }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image3 && format('{0}/{1}/{2}:{3}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image3, env.TAG) }}
          target: cdxgen
      - name: Build cdxgen image - tags
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: ./.github/actions/build-docker-images-generate-attach-sboms
        with:
          build-arm: ${{ ! fromJSON(inputs.image).skip-arm }}
          dockerfile: ci/images/${{ fromJSON(inputs.image).distro }}/Dockerfile.${{ fromJSON(inputs.image).lang }}
          docker-args: ${{ steps.nexus.outputs.docker-args }}
          images: |
            ${{ env.REPO }}/${{ env.TEAM }}/cdxgen${{ fromJSON(inputs.image).distro && format('-{0}', fromJSON(inputs.image).distro) }}-${{ fromJSON(inputs.image).lang }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image && format('{0}/{1}/{2}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image) || '' }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image2 && format('{0}/{1}/{2}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image2) || '' }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image3 && format('{0}/{1}/{2}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image3) || '' }}
          language: ${{ fromJSON(inputs.image).lang }}
          latest: ${{ inputs.latest }}
          signing-key: ${{ secrets.SBOM_SIGN_PRIVATE_KEY }}
          target: cdxgen

      # Cleanup
      - name: Clean buildx cache
        if: ${{ fromJSON(inputs.image).runner || failure() }}
        shell: bash
        run: |
          docker buildx prune -af
          docker system prune -af --volumes
