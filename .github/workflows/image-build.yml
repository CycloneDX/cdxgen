name: Image build

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      runner:
        type: string

env:
  REPO: ghcr.io
  TAG: v11
  TEAM: cyclonedx

jobs:
  image:
    runs-on: ${{ inputs.runner || 'ubuntu-24.04' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        if: ${{ ! inputs.runner }}
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        if: ${{ ! inputs.runner }}
        uses: docker/setup-buildx-action@v3
      - name: QEMU workaround
        if: ${{ fromJSON(inputs.image).fix-qemu }}
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes -c yes
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Base image
      - name: Extract metadata (tags, labels) for Docker base-image
        id: base-metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REPO }}/${{ env.TEAM }}/${{ fromJSON(inputs.image).base-image.name || fromJSON(inputs.image).distro || 'bci' }}-${{ fromJSON(inputs.image).base-image.lang || fromJSON(inputs.image).lang }}
            ${{ fromJSON(inputs.image).base-image.additional-image && format('{0}/{1}/{2}', env.REPO, env.TEAM, fromJSON(inputs.image).base-image.additional-image) || '' }}
      - name: Build and push Docker base-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ci/base-images/${{ fromJSON(inputs.image).distro || 'sle' }}/Dockerfile.${{ fromJSON(inputs.image).lang }}
          platforms: linux/amd64${{ ! fromJSON(inputs.image).skip-arm && ',linux/arm64' || '' }}
          push: true
          tags: ${{ steps.base-metadata.outputs.tags }}
          labels: ${{ steps.base-metadata.outputs.labels }}
      # cdxgen image
      - name: Extract metadata (tags, labels) for Docker cdxgen-image
        id: cdxgen-metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REPO }}/${{ env.TEAM }}/cdxgen${{ fromJSON(inputs.image).distro && format('-{0}', fromJSON(inputs.image).distro) }}-${{ fromJSON(inputs.image).lang }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image && format('{0}/{1}/{2}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image) || '' }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image2 && format('{0}/{1}/{2}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image2) || '' }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image3 && format('{0}/{1}/{2}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image3) || '' }}
      - name: Build and push Docker cdxgen-image for master
        uses: docker/build-push-action@v5
        if: github.ref == 'refs/heads/master'
        with:
          context: .
          file: ci/base-images/cdxgen/${{ fromJSON(inputs.image).distro }}/Dockerfile.${{ fromJSON(inputs.image).lang }}
          platforms: linux/amd64${{ ! fromJSON(inputs.image).skip-arm && ',linux/arm64' || '' }}
          push: true
          tags: |
            ${{ env.REPO }}/${{ env.TEAM }}/cdxgen${{ fromJSON(inputs.image).distro && format('-{0}', fromJSON(inputs.image).distro) }}-${{ fromJSON(inputs.image).lang }}:${{ env.TAG }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image && format('{0}/{1}/{2}:{3}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image, env.TAG) }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image2 && format('{0}/{1}/{2}:{3}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image2, env.TAG) }}
            ${{ fromJSON(inputs.image).cdxgen-image.additional-image3 && format('{0}/{1}/{2}:{3}', env.REPO, env.TEAM, fromJSON(inputs.image).cdxgen-image.additional-image3, env.TAG) }}
          labels: ${{ steps.cdxgen-metadata.outputs.labels }}
      - name: Build and push Docker cdxgen-image for tag
        uses: docker/build-push-action@v5
        if: ${{ startsWith(github.ref, 'refs/tags/') && ! fromJSON(inputs.image).cdxgen-image.skip-tags }}
        with:
          context: .
          file: ci/base-images/cdxgen/${{ fromJSON(inputs.image).distro }}/Dockerfile.${{ fromJSON(inputs.image).lang }}
          platforms: linux/amd64${{ ! fromJSON(inputs.image).skip-arm && ',linux/arm64' || '' }}
          push: true
          tags: ${{ steps.cdxgen-metadata.outputs.tags }}
          labels: ${{ steps.cdxgen-metadata.outputs.labels }}
      - name: Attach cdx sbom to base
        run: |
          corepack pnpm install --config.strict-dep-builds=true --package-import-method copy --frozen-lockfile
          node bin/cdxgen.js -t docker -o sbom-oci-base-image.cdx.json ${{ steps.base-metadata.outputs.tags[0] }}
          oras attach --artifact-type sbom/cyclonedx ${{ steps.base-metadata.outputs.tags[0] }} ./sbom-oci-base-image.cdx.json:application/json
          oras discover --format tree ${{ steps.base-metadata.outputs.tags[0] }}
        continue-on-error: true
        if: github.ref == 'refs/heads/master'
      - name: Attach cdx sbom
        run: |
          corepack pnpm install --config.strict-dep-builds=true --package-import-method copy --frozen-lockfile
          node bin/cdxgen.js -t docker -o sbom-oci-image.cdx.json ${{ steps.cdxgen-metadata.outputs.tags[0] }}
          oras attach --artifact-type sbom/cyclonedx ${{ steps.cdxgen-metadata.outputs.tags[0] }} ./sbom-oci-image.cdx.json:application/json
          oras discover --format tree ${{ steps.cdxgen-metadata.outputs.tags[0] }}
        continue-on-error: true
        if: ${{ startsWith(github.ref, 'refs/tags/') && ! fromJSON(inputs.image).cdxgen-image.skip-tags }}
