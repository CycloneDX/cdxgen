{
  "win_version": {
    "query": "select tb1.name, tb1.build_version, (case when (arch like '%-bit') then concat('x', replace(arch,'-bit', '')) else arch end) as arch, 'Microsoft' as publisher, tb2.version from (select name, version as build_version, arch from os_version) tb1,(select data as version from registry where path = 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\DisplayVersion') tb2;",
    "name": "win_version",
    "description": "Retrieves the name, version number, build version, and arch of the target Windows system.",
    "purlType": "swid",
    "componentType": "operating-system"
  },
  "kernel_info": {
    "query": "select * from kernel_info;",
    "name": "os-image",
    "description": "Retrieves information from the current kernel in the target system.",
    "purlType": "swid"
  },
  "chrome_extensions": {
    "query": "select chrome_extensions.* from users join chrome_extensions using (uid);",
    "description": "Retrieves the list of extensions for Chrome in the target system.",
    "purlType": "swid"
  },
  "firefox_addons": {
    "query": "select firefox_addons.* from users join firefox_addons using (uid);",
    "description": "Retrieves the list of addons for Firefox in the target system.",
    "purlType": "swid"
  },
  "backdoored_python_packages": {
    "query": "select name as package_name, version as package_version, path as package_path from python_packages where package_name = 'acqusition' or package_name = 'apidev-coop' or package_name = 'bzip' or package_name = 'crypt' or package_name = 'django-server' or package_name = 'pwd' or package_name = 'setup-tools' or package_name = 'telnet' or package_name = 'urlib3' or package_name = 'urllib';",
    "description": "Watches for the backdoored Python packages installed on system.",
    "purlType": "pypi"
  },
  "windows_programs": {
    "query": "select * from programs;",
    "description": "Retrieves the list of products as they are installed by Windows Installer in the target Windows system.",
    "purlType": "swid"
  },
  "windows_patches": {
    "query": "select * from patches;",
    "description": "Retrieves all the information for the current windows drivers in the target Windows system.",
    "purlType": "swid"
  },
  "windows_drivers": {
    "query": "select * from drivers;",
    "description": "Retrieves all the information for the current windows drivers in the target Windows system.",
    "purlType": "swid"
  },
  "windows_shared_resources": {
    "query": "select * from shared_resources;",
    "description": "Retrieves the list of shared resources in the target Windows system.",
    "purlType": "swid",
    "componentType": "data"
  },
  "appcompat_shims": {
    "query": "SELECT * FROM appcompat_shims WHERE description!='EMET_Database' AND executable NOT IN ('setuphost.exe','setupprep.exe','iisexpress.exe');",
    "description": "Appcompat shims (.sdb files) installed on Windows hosts.",
    "purlType": "swid",
    "componentType": "data"
  },
  "system_info_snapshot": {
    "query": "SELECT * FROM system_info;",
    "description": "System info snapshot query.",
    "purlType": "swid",
    "componentType": "data"
  },
  "pipes_snapshot": {
    "query": "SELECT processes.path, processes.cmdline, processes.uid, processes.on_disk, pipes.name, pid FROM pipes JOIN processes USING (pid);",
    "description": "Pipes snapshot query.",
    "purlType": "swid",
    "componentType": "data"
  },
  "services_snapshot": {
    "query": "SELECT * FROM services;",
    "description": "Services snapshot query.",
    "purlType": "swid",
    "componentType": "data"
  },
  "wmi_cli_event_consumers": {
    "query": "SELECT * FROM wmi_cli_event_consumers;",
    "description": "WMI CommandLineEventConsumer, which can be used for persistence on Windows. See https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf for more details.",
    "purlType": "swid",
    "componentType": "data"
  },
  "wmi_filter_consumer_binding": {
    "query": "SELECT * FROM wmi_filter_consumer_binding;",
    "description": "Lists the relationship between event consumers and filters.",
    "purlType": "swid",
    "componentType": "data"
  },
  "wmi_cli_event_consumers_snapshot": {
    "query": "SELECT * FROM wmi_cli_event_consumers;",
    "description": "Snapshot query for WMI event consumers.",
    "purlType": "swid",
    "componentType": "data"
  },
  "certificates": {
    "query": "SELECT * FROM certificates WHERE path != 'Other People';",
    "description": "List all certificates in the trust store.",
    "purlType": "swid",
    "componentType": "data"
  },
  "wmi_event_filters": {
    "query": "SELECT * FROM wmi_event_filters;",
    "description": "Lists WMI event filters.",
    "purlType": "swid",
    "componentType": "data"
  },
  "pipes": {
    "query": "SELECT processes.path, processes.cmdline, processes.uid, processes.on_disk, pipes.name, pid FROM pipes JOIN processes USING (pid);",
    "description": "Named and Anonymous pipes.",
    "purlType": "swid",
    "componentType": "data"
  },
  "etc_hosts": {
    "query": "SELECT * FROM etc_hosts;",
    "description": "List the contents of the Windows hosts file.",
    "purlType": "swid",
    "componentType": "data"
  },
  "scheduled_tasks": {
    "query": "SELECT * FROM scheduled_tasks;",
    "description": "List all scheduled_tasks.",
    "purlType": "swid",
    "componentType": "data"
  },
  "chocolatey_packages": {
    "query": "SELECT * FROM chocolatey_packages;",
    "description": "List all chocolatey_packages.",
    "purlType": "swid",
    "componentType": "data"
  }
}
