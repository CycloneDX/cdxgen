{
  "os_version": {
    "query": "select * from os_version;",
    "description": "Retrieves the current version of the running osquery in the target system and where the configuration was loaded from.",
    "purlType": "swid",
    "componentType": "operating-system"
  },
  "kernel_info": {
    "query": "select * from kernel_info;",
    "name": "os-image",
    "description": "Retrieves information from the current kernel in the target system.",
    "purlType": "swid",
    "componentType": "operating-system"
  },
  "chrome_extensions": {
    "query": "select chrome_extensions.* from users join chrome_extensions using (uid);",
    "description": "Retrieves the list of extensions for Chrome in the target system.",
    "purlType": "swid",
    "componentType": "application"
  },
  "firefox_addons": {
    "query": "select firefox_addons.* from users join firefox_addons using (uid);",
    "description": "Retrieves the list of addons for Firefox in the target system.",
    "purlType": "swid",
    "componentType": "application"
  },
  "deb_packages": {
    "query": "select * from deb_packages;",
    "description": "Retrieves all the installed DEB packages in the target Linux system.",
    "purlType": "deb"
  },
  "apt_sources": {
    "query": "select * from apt_sources;",
    "description": "Retrieves all the APT sources to install packages from in the target Linux system.",
    "purlType": "deb"
  },
  "yum_sources": {
    "query": "select * from yum_sources;",
    "description": "Display yum package manager sources.",
    "purlType": "yum"
  },
  "portage_packages": {
    "query": "select * from portage_packages;",
    "description": "Retrieves all the installed packages on the target Linux system.",
    "purlType": "ebuild"
  },
  "rpm_packages": {
    "query": "select * from rpm_packages;",
    "description": "Retrieves all the installed RPM packages in the target Linux system.",
    "purlType": "rpm"
  },
  "backdoored_python_packages": {
    "query": "select name as package_name, version as package_version, path as package_path from python_packages where package_name = 'acqusition' or package_name = 'apidev-coop' or package_name = 'bzip' or package_name = 'crypt' or package_name = 'django-server' or package_name = 'pwd' or package_name = 'setup-tools' or package_name = 'telnet' or package_name = 'urlib3' or package_name = 'urllib';",
    "description": "Watches for the backdoored Python packages installed on system.",
    "purlType": "pypi",
    "componentType": "application"
  },
  "windows_programs": {
    "query": "select * from programs;",
    "description": "Retrieves the list of products as they are installed by Windows Installer in the target Windows system.",
    "purlType": "swid",
    "componentType": "application"
  },
  "windows_patches": {
    "query": "select * from patches;",
    "description": "Retrieves all the information for the current windows drivers in the target Windows system.",
    "purlType": "swid",
    "componentType": "application"
  },
  "windows_drivers": {
    "query": "select * from drivers;",
    "description": "Retrieves all the information for the current windows drivers in the target Windows system.",
    "purlType": "swid",
    "componentType": "device-driver"
  },
  "windows_shared_resources": {
    "query": "select * from shared_resources;",
    "description": "Retrieves the list of shared resources in the target Windows system.",
    "purlType": "swid",
    "componentType": "data"
  },
  "appcompat_shims": {
    "query": "SELECT * FROM appcompat_shims WHERE description!='EMET_Database' AND executable NOT IN ('setuphost.exe','setupprep.exe','iisexpress.exe');",
    "description": "Appcompat shims (.sdb files) installed on Windows hosts.",
    "purlType": "swid",
    "componentType": "data"
  },
  "system_info_snapshot": {
    "query": "SELECT * FROM system_info;",
    "description": "System info snapshot query.",
    "purlType": "swid",
    "componentType": "data"
  },
  "pipes_snapshot": {
    "query": "SELECT processes.path, processes.cmdline, processes.uid, processes.on_disk, pipes.name, pid FROM pipes JOIN processes USING (pid);",
    "description": "Pipes snapshot query.",
    "purlType": "swid",
    "componentType": "data"
  },
  "services_snapshot": {
    "query": "SELECT * FROM services;",
    "description": "Services snapshot query.",
    "purlType": "swid",
    "componentType": "data"
  },
  "pipes": {
    "query": "SELECT processes.path, processes.cmdline, processes.uid, processes.on_disk, pipes.name, pid FROM pipes JOIN processes USING (pid);",
    "description": "Named and Anonymous pipes.",
    "purlType": "swid",
    "componentType": "data"
  },
  "etc_hosts": {
    "query": "SELECT * FROM etc_hosts;",
    "description": "List the contents of the Windows hosts file.",
    "purlType": "swid",
    "componentType": "data"
  },
  "scheduled_tasks": {
    "query": "SELECT * FROM scheduled_tasks;",
    "description": "List all scheduled_tasks.",
    "purlType": "swid",
    "componentType": "data"
  },
  "homebrew_packages": {
    "query": "SELECT * FROM homebrew_packages;",
    "description": "List all homebrew_packages.",
    "purlType": "swid",
    "componentType": "data"
  },
  "installed_applications": {
    "query": "SELECT * FROM apps;",
    "description": "List all macos apps.",
    "purlType": "swid",
    "componentType": "data"
  },
  "kernel_integrity": {
    "query": "SELECT * FROM kernel_integrity;",
    "description": "Various Linux kernel integrity checked attributes.",
    "purlType": "swid",
    "componentType": "data"
  },
  "crontab_snapshot": {
    "query": "SELECT * FROM crontab;",
    "description": "Retrieves all the jobs scheduled in crontab in the target system.",
    "purlType": "swid",
    "componentType": "data"
  },
  "kernel_modules": {
    "query": "SELECT * FROM kernel_modules;",
    "description": "Linux kernel modules both loaded and within the load search path.",
    "purlType": "swid",
    "componentType": "data"
  },
  "behavioral_reverse_shell": {
    "query": "SELECT DISTINCT(processes.pid), processes.parent, processes.name, processes.path, processes.cmdline, processes.cwd, processes.root, processes.uid, processes.gid, processes.start_time, process_open_sockets.remote_address, process_open_sockets.remote_port, (SELECT cmdline FROM processes AS parent_cmdline WHERE pid=processes.parent) AS parent_cmdline FROM processes JOIN process_open_sockets USING (pid) LEFT OUTER JOIN process_open_files ON processes.pid = process_open_files.pid WHERE (name='sh' OR name='bash') AND remote_address NOT IN ('0.0.0.0', '::', '') AND remote_address NOT LIKE '10.%' AND remote_address NOT LIKE '192.168.%';",
    "description": "Find shell processes that have open sockets.",
    "purlType": "swid",
    "componentType": "data"
  },
  "process_events": {
    "query": "SELECT auid, cmdline, ctime, cwd, egid, euid, gid, parent, path, pid, time, uid FROM process_events WHERE path NOT IN ('/bin/sed', '/usr/bin/tr', '/bin/gawk', '/bin/date', '/bin/mktemp', '/usr/bin/dirname', '/usr/bin/head', '/usr/bin/jq', '/bin/cut', '/bin/uname', '/bin/basename') and cmdline NOT LIKE '%_key%' AND cmdline NOT LIKE '%secret%';",
    "description": "Process events collected from the audit framework.",
    "purlType": "swid",
    "componentType": "data"
  },
  "ld_preload": {
    "query": "SELECT process_envs.pid, process_envs.key, process_envs.value, processes.name, processes.path, processes.cmdline, processes.cwd FROM process_envs join processes USING (pid) WHERE key = 'LD_PRELOAD';",
    "description": "Any processes that run with an LD_PRELOAD environment variable.",
    "purlType": "swid",
    "componentType": "data"
  }
}
