{
"answers": [
{
"question": "Is it possible to utilize data components for detailing the rules and policies of a security tool?",
"answer": "Yes. Data components can represent any non‑code artefact such as policy files, rule sets, or configuration manifests. By assigning a suitable type (e.g., \"policy\", \"rule\" or the generic \"other\"), linking a supplier, adding a checksum, and optionally attaching a lifecycle phase, you can capture the security‑tool rules within the BOM."
},
{
"question": "In what ways do data components aid in compliance reporting?",
"answer": "Data components provide verifiable evidence of required artefacts (e.g., certification files, audit logs, policy documents). They can be annotated with classification, confidence, and lifecycle information, enabling auditors to trace the source, authenticity, and relevance of each compliance artifact directly from the SBOM."
},
{
"question": "What methods does CycloneDX use to integrate with current enterprise SAM/ITAM practices?",
"answer": "CycloneDX maps BOM lifecycle phases to SAM/ITAM processes (Discovery, Procurement, Deployment, Operations, Decommission). It supports supplier and contract fields, commercial‑license structures, and relationships (\"dependsOn\", \"provides\") that mirror asset‑ownership hierarchies. Export formats (JSON, XML, Protobuf) align with existing CMDB import APIs."
},
{
"question": "What distinguishes a BOM from the 'Discovery' phase from one created during the 'Build' phase?",
"answer": "A Discovery‑phase BOM reflects the state of software as observed in production or on an endpoint (actual versions, installed licences, runtime configuration). A Build‑phase BOM is generated from the build pipeline and represents intended components, declared licences, and design‑time dependencies. The former is factual; the latter is declarative."
},
{
"question": "How does CycloneDX offer proof regarding software licensing?",
"answer": "CycloneDX includes both declared and concluded license information, supplier contracts, commercial‑license identifiers, and optional evidence data components. This layered data lets organisations demonstrate licence provenance, compliance decisions, and audit trails."
},
{
"question": "What are the key suggestions for generating a CycloneDX SBOM?",
"answer": "1. Capture every component (binary, source, data). 2. Record both declared and concluded licences. 3. Add supplier, version, CPE and checksum metadata. 4. Use lifecycle phases to show when the component was observed. 5. Include relationships, vulnerabilities, and data components for policies or configuration. 6. Validate against the official schema. 7. Sign the BOM (or its annotations) for integrity."
},
{
"question": "What constitutes a Vulnerability Disclosure Report (VDR)?",
"answer": "A VDR is a structured document that records a vulnerability’s identifier, description, impact, remediation steps, evidence of exploitation, affected component references (bom‑ref), and any related CVE/CWE data. NIST SP 800‑161 recommends inclusion of attacker‑observed data, mitigation status, and provenance."
},
{
"question": "What information does a Vulnerability Exploitability eXchange (VEX) provide?",
"answer": "VEX conveys a vendor’s determination of whether each listed vulnerability is \"affected\", \"not affected\", or \"unknown\" for a specific component version. It includes bom‑ref, vulnerability ID, justification, and timestamps."
},
{
"question": "In what way does CycloneDX support compliance with open‑source and commercial licences?",
"answer": "CycloneDX distinguishes open‑source licences (SPDX expression) from commercial licences (structured fields: licenceId, name, url, expiry, scope). It allows both declared and concluded licences, evidence data components, and relationships to contracts, enabling full‑stack licence compliance."
},
{
"question": "How are open‑source licences depicted within CycloneDX?",
"answer": "Open‑source licences are expressed as SPDX licence identifiers or full SPDX expressions in the \"license\" object of a component. The \"licenseExpression\" field can contain complex AND/OR/WITH constructions."
},
{
"question": "How can data gathered in the Discovery phase influence future Design phase decisions?",
"answer": "Discovery data (actual versions, undocumented dependencies, security policies) reveal gaps between intended and deployed software. Designers can adjust architecture, replace risky components, or add missing controls before the next build."
},
{
"question": "What format does CycloneDX use for representing open‑source licences?",
"answer": "SPDX licence identifiers or SPDX licence expressions (e.g., \"MIT\", \"GPL‑2.0‑or‑later\", \"Apache‑2.0 WITH LLVM-exception\")."
},
{
"question": "What is the distinction between declared and concluded licences?",
"answer": "Declared licences are what the upstream component claims (often in source headers). Concluded licences are the licence(s) the consuming organisation determines after analysis, possibly differing from the declared set."
},
{
"question": "How do 'Operations' phase BOMs assist in reconciling software licences?",
"answer": "Operations‑phase BOMs capture the licences of components actually running in production, including any overrides, patches, or additional commercial contracts. Comparing them with design‑time declared licences highlights mismatches that need reconciliation."
},
{
"question": "What is the primary goal of CycloneDX?",
"answer": "To provide a lightweight, interoperable, and verifiable representation of the software bill of materials that enables transparency, risk management, and compliance across the software supply chain."
},
{
"question": "What advantages do Operating Systems gain from using CycloneDX?",
"answer": "OS vendors can publish BOMs for each image, simplify vulnerability patching, prove licence compliance for bundled packages, and enable automated tooling in patch management pipelines."
},
{
"question": "What factors should guide the selection of lifecycle phases for a BOM?",
"answer": "Stakeholder needs (risk, compliance, asset‑management), the point of data collection (Discovery vs Build), regulatory requirements, and the intended consumers (internal IT, auditors, external partners)."
},
{
"question": "What details are necessary when creating a custom lifecycle phase definition?",
"answer": "A unique \"name\", a descriptive \"description\", an optional \"timestamp\", and an optional \"environment\" object. The definition must be added to the top‑level \"metadata.lifecycle\" array."
},
{
"question": "How does CycloneDX assist in managing commercial software licences?",
"answer": "It provides a dedicated \"commercial\" licence object with fields for licenceId, name, url, expiry, scope, and optional contract references. This can be linked to the component and to data components that hold the actual contract documentation."
},
{
"question": "What fields are available for detailing commercial licences in CycloneDX?",
"answer": "licenseId, name, url, expiry (date), scope (e.g., \"enterprise\", \"site\"), and optional \"vendor\" and \"contract\" objects."
},
{
"question": "Is it possible to specify several licence types for a single commercial licence?",
"answer": "Yes. The commercial licence object can contain an array of \"licenseId\" values or a nested \"licenseExpression\" field that combines multiple licences."
},
{
"question": "What role does CycloneDX play in cybersecurity tools for national security?",
"answer": "It standardises SBOM exchange, enabling rapid vulnerability correlation, supply‑chain risk scoring, and audit‑ready evidence for critical‑infrastructure systems, which aligns with national‑security directives."
},
{
"question": "How does CycloneDX enable tracking of copyright information for software components?",
"answer": "Each component can contain a \"copyright\" array with holder name, year, and optional URL. Data components can store full copyright notices as evidence."
},
{
"question": "How should multiple licences for a single software component be represented in CycloneDX?",
"answer": "Use the \"license\" object with an \"expression\" field that lists all licences in SPDX syntax (e.g., \"MIT OR Apache-2.0\"). For commercial licences, include an array of licence objects."
},
{
"question": "Can you provide an example of a commonly used XML extension?",
"answer": "The \"<properties>\" element is often extended with custom namespaces, e.g., `<properties xmlns:my=\"urn:example:custom\"><my:policy>enabled</my:policy></properties>`."
},
{
"question": "What is the function of the Formulation section in CycloneDX?",
"answer": "Formulation records how a component was built: declared (what the supplier says), observed (what was actually built), and any transformations (e.g., compilation flags). It helps differentiate intent from reality."
},
{
"question": "How does CycloneDX manage information about vulnerabilities?",
"answer": "Vulnerabilities are listed under the top‑level \"vulnerabilities\" array with fields for id, source, ratings, description, affected component references (bom‑ref), and remediation. VEX can be linked to give exploitability status."
},
{
"question": "What does the 'formulation' section of a CycloneDX BOM detail?",
"answer": "It details the component’s declared licence/expression, observed licence/expression, and any build‑time metadata such as compiler, build‑environment, or configuration that produced the artefact."
},
{
"question": "Why is it crucial to distinguish between declared and concluded licences during a software audit?",
"answer": "Declared licences may be inaccurate or ambiguous; concluded licences represent the auditor’s legal determination. Differentiation prevents false‑positive compliance claims and supports defensible audit findings."
},
{
"question": "How can CycloneDX help identify components requiring specific attribution notices?",
"answer": "By capturing licence expressions and linking to data components that store the full attribution text, tools can generate attribution bundles automatically for distribution."
},
{
"question": "What information should be provided when defining a custom lifecycle phase?",
"answer": "Name, description, optional timestamp, optional environment (e.g., host, region), and a unique identifier if referenced elsewhere."
},
{
"question": "How are lifecycle phases utilized when creating a VEX document?",
"answer": "Each VEX entry can include a \"phase\" attribute indicating when the vendor made the determination (e.g., \"Build\", \"Operations\"), aiding consumers in understanding the currency of the exploitability statement."
},
{
"question": "What is the objective of software transparency?",
"answer": "To make the composition, provenance, vulnerabilities, and licence obligations of software discoverable and verifiable by all stakeholders."
},
{
"question": "What are some broad use cases for SBOMs?",
"answer": "Vulnerability management, licence compliance, risk analytics, supply‑chain governance, incident response, procurement validation, and regulatory reporting."
},
{
"question": "What are the benefits of using CycloneDX with Unmanned Aerial Vehicles (UAVs)?",
"answer": "SBOMs help certify firmware components, prove licence compliance for commercial IP, enable rapid patching of known vulnerabilities, and satisfy aerospace regulatory requirements."
},
{
"question": "According to NIST SP 800-161, what elements should VDRs contain?",
"answer": "Vulnerability identifier, description, affected component references, impact assessment, remediation steps, evidence of exploitation, disclosure timeline, and provenance of the report."
},
{
"question": "How can declared and concluded licences be acknowledged?",
"answer": "Both are stored in the \"license\" object: \"declared\" and \"concluded\" fields. Auditors reference the concluded field for compliance decisions while retaining the declared field for traceability."
},
{
"question": "What is the purpose of relationships within CycloneDX?",
"answer": "To model how components depend on, provide, contain, or replace each other (e.g., \"dependsOn\", \"provides\", \"contains\", \"replaces\"). This enables impact analysis and supply‑chain mapping."
},
{
"question": "What differentiates first‑party from third‑party components in CycloneDX?",
"answer": "First‑party components are developed internally (supplier = organisation) and often have internal identifiers. Third‑party components are sourced from external vendors and include supplier information and external licences."
},
{
"question": "How are license and copyright details presented in CycloneDX?",
"answer": "License details appear in the component's \"license\" object (SPDX expression or commercial fields). Copyright is an array of strings or objects with holder, year, and optional URL."
},
{
"question": "What is the role of describing data flow in services?",
"answer": "Data flow descriptions (often in data components) help auditors understand what data each service consumes or produces, aiding privacy impact assessments and compliance with data‑handling regulations."
},
{
"question": "How can CycloneDX dependencies illustrate service‑to‑service dependencies?",
"answer": "Using the \"dependsOn\" relationship type between service components, optionally adding a \"scope\" (e.g., \"runtime\") and a description of the API contract."
},
{
"question": "How does CycloneDX support VEX (Vulnerability Exploitability eXchange)?",
"answer": "CycloneDX defines a VEX object with fields for bom‑ref, vulnerability ID, status (affected/not‑affected/unknown), justification, and timestamps. It can be embedded in the same BOM or shipped as a separate file linked via the \"vex\" array."
},
{
"question": "What is the difference between declared and observed formulas in the 'formulation' section?",
"answer": "Declared formulas reflect the supplier’s intended licence/build metadata. Observed formulas capture what was actually built, as determined by scanning, hashing, or runtime inspection."
},
{
"question": "Is it possible to digitally sign annotations in CycloneDX?",
"answer": "Yes. The \"annotations\" array can be signed using the \"signature\" object (JWS, PGP, or X.509). The signature covers the annotation payload to guarantee integrity."
},
{
"question": "What is the importance of attestations and claims in the 'declarations' section?",
"answer": "Attestations bind claims (system‑specific statements of compliance) to supporting evidence. Claims restate requirements using the organisation’s terminology; attestations provide a verifiable, signed record of those claims."
},
{
"question": "Does CycloneDX offer a way to represent digital and analog signatures?",
"answer": "Yes. The top‑level \"signatures\" array can hold multiple signature objects, each specifying the algorithm, key identifier, and the signed payload (digital). Analog signatures can be recorded as evidence data components with a description indicating a physical signature."
},
{
"question": "Is it possible to develop custom extensions for CycloneDX for specific needs?",
"answer": "Yes. The specification permits custom XML namespaces, JSON property prefixes, or Protobuf extensions. Extensions must be documented and versioned to maintain interoperability."
},
{
"question": "Where can the official schema locations for JSON, XML, and Protobuf CycloneDX BOMs be found?",
"answer": "https://cyclonedx.org/schema/bom-1.6.schema.json, https://cyclonedx.org/schema/bom-1.6.xsd, and https://cyclonedx.org/schema/bom-1.6.proto (latest version numbers may vary)."
},
{
"question": "How does CycloneDX help organisations under strict cybersecurity standards with regulatory compliance?",
"answer": "It delivers a single, auditable artefact that supplies required data (CPE, licences, vulnerabilities, attestations). This satisfies standards such as NIST 800‑53, ISO 27001, and supply‑chain regulations by providing traceable evidence."
},
{
"question": "What are the drawbacks of relying only on automated tools for generating a CycloneDX BOM, and how can they be overcome?",
"answer": "Automated scans can miss hidden dependencies, mis‑classify licences, or lack evidence for commercial contracts. Mitigation: combine automated scanning with manual verification, use data components for policy documents, and apply signed attestations for critical artefacts."
},
{
"question": "What are the benefits of using annotations in CycloneDX?",
"answer": "Annotations allow arbitrary key‑value metadata (e.g., CI pipeline ID, risk score) without altering the core schema, support enrichment by downstream tools, and can be signed for integrity."
},
{
"question": "How do Declarations contribute to compliance as code?",
"answer": "Declarations encode compliance requirements as structured claims within the BOM. When paired with automated policy engines, they enable continuous compliance checks—treating compliance rules as executable code."
},
{
"question": "How does CycloneDX support collaboration and information sharing in the software supply chain?",
"answer": "Standardised format, versioning, digital signatures, and shared lifecycle phases allow multiple organisations (vendors, integrators, auditors) to exchange SBOMs with confidence that data is consistent and trustworthy."
},
{
"question": "What does the 'other' data component type signify?",
"answer": "It is a catch‑all for data that does not fit predefined types (e.g., custom policy, legal contract). The type must be documented in the component’s \"description\" or a custom property."
},
{
"question": "What are some situations where including data components in a BOM would be appropriate?",
"answer": "Embedding security policies, compliance certificates, configuration files, cryptographic key inventories, or audit logs that are needed to prove risk‑mitigation decisions."
},
{
"question": "Can data components have suppliers different from the main component?",
"answer": "Yes. Each data component can specify its own \"supplier\" object, reflecting the party that provided the policy or configuration file."
},
{
"question": "Why is it important to provide evidence for multiple potential CPEs?",
"answer": "A component may be identified by several CPE strings (different vendor/product naming). Supplying evidence for each improves vulnerability matching accuracy."
},
{
"question": "What range of values does the 'confidence' metric use?",
"answer": "An integer from 0 (no confidence) to 100 (full confidence). It indicates the certainty of the CPE or licence attribution."
},
{
"question": "What steps should organisations take as part of an agile cryptographic approach?",
"answer": "1. Inventory all cryptographic assets. 2. Document dependencies (uses/provides). 3. Assign confidence scores. 4. Store evidence as data components. 5. Automate rotation/replacement policies. 6. Sign BOMs to verify integrity."
},
{
"question": "Where should cryptographic assets be documented?",
"answer": "As data components of type \"cryptographic‑key\" or \"certificate\" with supplier, confidence, and evidence fields. They can also be linked via the \"dependsOn\" relationship to the software that uses them."
},
{
"question": "What are the benefits of using CycloneDX in environments with commercial software licensing?",
"answer": "Clear visibility of licence scope, expiry, and contractual obligations; ability to map licences to components; support for audit trails; and reduction of licence‑non‑compliance risk."
},
{
"question": "How can lifecycle information enhance the speed of incident response?",
"answer": "Knowing which phase a vulnerable component was introduced (e.g., Build vs Operations) helps responders prioritise patches, roll‑back deployments, or isolate affected assets quickly."
},
{
"question": "How can a file with configuration settings be represented as a data component?",
"answer": "Create a data component with \"type\": \"configuration\", include a checksum, supplier, lifecycle phase (e.g., \"Operations\"), and optional \"properties\" that hold key‑value pairs of the settings."
},
{
"question": "For a large dataset, is it better to include it directly in the BOM or reference it externally?",
"answer": "Reference it externally via a URL and checksum. Embedding large blobs inflates the BOM and hampers parsing performance."
},
{
"question": "What type of information is collected during the 'Discovery' lifecycle phase?",
"answer": "Observed component versions, installed licences, runtime configuration files, actual CPEs, vulnerability findings, and evidence data components from the environment."
},
{
"question": "What does the 'Decommission' lifecycle phase signify?",
"answer": "The component or service has been retired, removed from production, and its licence obligations end. The BOM can record the decommission date for audit purposes."
},
{
"question": "How can data components be used to track different versions of a configuration file over time?",
"answer": "Create a separate data component for each version, each with its own \"version\" field, timestamp, and a relationship (e.g., \"replaces\") to the prior version."
},
{
"question": "How do consumers of BOMs interpret data components?",
"answer": "They treat them as supplemental artefacts that provide context, evidence, or policy data. Tools can retrieve the data component via its \"bom-ref\" and process its checksum, type, and properties."
},
{
"question": "Can you give an example of a custom lifecycle phase?",
"answer": "Name: \"Pre‑Prod Testing\", Description: \"Components validated in staging before promotion to production\", Timestamp: \"2024-09-01T12:00:00Z\"."
},
{
"question": "What are the different focuses of SDLC and SAM use cases regarding licensing?",
"answer": "SDLC focuses on ensuring that licences are compatible before code is released (design‑time compliance). SAM focuses on tracking licences of assets already in use, reconciling contracts, and managing renewals (operational compliance)."
},
{
"question": "How does lifecycle information improve incident response efficiency?",
"answer": "It provides quick visibility of when and where a vulnerable component entered the environment, allowing responders to target the specific stage (e.g., rebuild, patch, or decommission) rather than scanning the entire inventory."
},
{
"question": "Is it possible to use a custom enumeration for the phase value?",
"answer": "Yes. The specification allows custom phases if they are declared in the top‑level \"metadata.lifecycle\" array; consumers that do not recognise them should treat them as opaque strings."
},
{
"question": "How can data components be used to document a microservice's API specification?",
"answer": "Create a data component of type \"api‑specification\" (or \"other\" with description), include a checksum, URL to the OpenAPI/Swagger file, supplier, and lifecycle phase (e.g., \"Design\")."
},
{
"question": "What is the best method to represent a database query as a data component?",
"answer": "Use type \"query\" (or \"other\"), store the SQL string in a \"properties\" field, add a checksum of the query text, and link it to the service component via a \"dependsOn\" relationship."
},
{
"question": "How are multiple lifecycle phases depicted in a CycloneDX BOM?",
"answer": "Each component or data component includes a \"phase\" field referencing one of the phases defined in the top‑level \"metadata.lifecycle\" array. Multiple phases can be represented by multiple components each with its own phase."
},
{
"question": "Why is knowledge of the lifecycle phase important for vulnerability analysis?",
"answer": "It indicates whether a vulnerable component is still active (e.g., Operations) or has been removed (Decommission), helping prioritize remediation effort."
},
{
"question": "How can CycloneDX lifecycle phases be used to track the evolution of software components?",
"answer": "By creating a component record for each version and assigning it a phase (Design, Build, Operations, etc.), organisations can see the progression and retirement of each component over time."
},
{
"question": "How does CycloneDX facilitate integration with existing enterprise SAM/ITAM practices?",
"answer": "Through supplier, contract, commercial‑license objects, lifecycle phases that map to asset‑management states, and relationship types that mirror ownership hierarchies, allowing direct import into CMDBs and SAM tools."
},
{
"question": "Can data components be used to represent the rules and policies of a security tool?",
"answer": "Yes – model each rule‑set or policy file as a data component (type \"policy\" or \"other\"), attach checksum, supplier, and optionally link to the security‑tool component via a \"provides\" relationship."
},
{
"question": "How are data components useful for compliance reporting?",
"answer": "They store evidence artefacts (e.g., PCI‑DSS reports, SOC‑2 attestations) that auditors can reference directly from the BOM, thereby automating proof‑of‑compliance collection."
},
{
"question": "In what ways does CycloneDX integrate with existing enterprise SAM/ITAM practices?",
"answer": "Same answer as earlier – mapping of phases, supplier/contract fields, commercial licences, and relationship modeling to reflect ownership, depreciation, and lifecycle states."
},
{
"question": "How does a BOM from the 'Discovery' phase differ from one from the 'Build' phase?",
"answer": "Discovery BOM reflects what is actually installed and running; Build BOM reflects intended composition before deployment. The former includes observed licences, real CPEs, and runtime data components; the latter contains declared licences and design‑time dependencies."
},
{
"question": "How does CycloneDX provide evidence for licensing compliance?",
"answer": "Through concluded licences, commercial‑license objects, contract data components, and signed attestations that tie licences to specific component versions."
},
{
"question": "What are the main recommendations for creating a CycloneDX SBOM?",
"answer": "Collect all components, capture both declared and concluded licences, include checksum and CPE, use lifecycle phases, add relationships, record vulnerabilities, attach evidence data components, validate schema, and sign the BOM."
},
{
"question": "What defines a Vulnerability Disclosure Report (VDR)?",
"answer": "A structured report documenting a discovered vulnerability, its impact, affected components (bom‑ref), remediation guidance, and supporting evidence, as defined by NIST SP 800‑161."
},
{
"question": "What is the purpose of a Vulnerability Exploitability eXchange (VEX)?",
"answer": "To communicate a vendor’s determination of exploitability (affected/not‑affected/unknown) for each vulnerability in a BOM, enabling downstream consumers to make risk‑based decisions."
},
{
"question": "How does CycloneDX help with open‑source and commercial license compliance?",
"answer": "By storing SPDX expressions for OSS, structured commercial‑license objects for proprietary software, and allowing audit‑grade evidence via data components and attestations."
},
{
"question": "What is the method for representing open‑source licences in CycloneDX?",
"answer": "Using the SPDX licence identifier or expression in the component's \"license\" object."
},
{
"question": "How can insights from the Discovery phase influence future Design phases?",
"answer": "Discovery reveals real‑world component usage, hidden dependencies, and licence gaps, informing architecture refactoring, replacement of risky libraries, and policy updates in the next Design cycle."
},
{
"question": "How are open‑source licences specifically represented in CycloneDX?",
"answer": "As SPDX licence identifiers or SPDX expressions inside the \"license\" object of each component."
},
{
"question": "What is the difference between declared and concluded licences?",
"answer": "Declared = supplier’s claim; Concluded = organisation’s legal determination after analysis."
},
{
"question": "How do BOMs from the 'Operations' phase help with license reconciliation in SAM?",
"answer": "They capture the actual licences of components in production, exposing any mismatches with design‑time licences that must be reconciled in SAM inventories."
},
{
"question": "What is the core purpose of CycloneDX?",
"answer": "To provide a standard, machine‑readable SBOM that enables transparency, risk management, and compliance across the software supply chain."
},
{
"question": "How do Operating Systems benefit from implementing CycloneDX?",
"answer": "They can publish a BOM for each distro image, streamline vulnerability notifications, prove licence compliance for bundled packages, and support automated patch pipelines."
},
{
"question": "What is the best approach to selecting lifecycle phases for inclusion in a BOM?",
"answer": "Identify stakeholder requirements, map phases to asset states (Design → Build → Operations → Decommission), include only those that provide actionable data, and document any custom phases clearly."
},
{
"question": "What should be included when creating a definition for a custom lifecycle phase?",
"answer": "Name, description, optional timestamp, optional environment/context, and a unique identifier added to the top‑level lifecycle array."
},
{
"question": "In what way does CycloneDX assist in managing commercial software licences?",
"answer": "Provides a structured commercial‑license object, links to contract evidence data components, and allows licence scope and expiry tracking."
},
{
"question": "What specific fields exist for detailing commercial license information in CycloneDX?",
"answer": "licenseId, name, url, expiry, scope, vendor, and optional contract reference."
},
{
"question": "Can a commercial license have multiple license types specified?",
"answer": "Yes – an array of licenceIds or a combined licenceExpression can be used."
},
{
"question": "What role does CycloneDX play in cybersecurity tools for national security?",
"answer": "It creates a common language for SBOM exchange, enabling rapid supply‑chain risk assessment, coordinated vulnerability mitigation, and auditability required by national‑security policies."
},
{
"question": "How does CycloneDX facilitate the tracking of copyright information for software components?",
"answer": "Via the \"copyright\" array on each component and optional data components that store full copyright notices."
},
{
"question": "How is a software component with multiple licences represented in CycloneDX?",
"answer": "Using an SPDX licence expression like \"MIT OR GPL-2.0-or-later\" or an array of commercial licence objects."
},
{
"question": "What is a common example of an XML extension in use?",
"answer": "Adding a custom namespace to <properties>, e.g., `<properties xmlns:my=\"urn:example\">`."
},
{
"question": "What is the intended use of the Formulation section in CycloneDX?",
"answer": "To record the declared vs. observed licence/build metadata and any transformation steps used to produce the component."
},
{
"question": "How does CycloneDX deal with vulnerability information?",
"answer": "Via the top‑level \"vulnerabilities\" array and optional embedded VEX entries, each linking to affected components."
},
{
"question": "What information does the 'formulation' section of a CycloneDX BOM contain?",
"answer": "Declared licence/expression, observed licence/expression, build environment details, and any applied transformations."
},
{
"question": "Why is differentiating between declared and concluded licences important during a software audit?",
"answer": "Because the declared licence may be inaccurate; the concluded licence reflects the legal risk assessment used for audit decisions."
},
{
"question": "How does CycloneDX help identify components needing specific attribution?",
"answer": "By exposing the licence expression and providing links to attribution data components that contain the required notices."
},
{
"question": "What details are required when defining a custom lifecycle phase?",
"answer": "Name, description, optional timestamp, optional environment metadata."
},
{
"question": "How can lifecycle phases be used in generating a VEX document?",
"answer": "Each VEX entry can reference the phase during which the vendor performed the exploitability assessment, clarifying its freshness."
},
{
"question": "What is the aim of achieving software transparency?",
"answer": "To make the composition, provenance, and risk posture of software visible and verifiable to all stakeholders."
},
{
"question": "What are some high‑level applications for SBOMs?",
"answer": "Vulnerability triage, licence compliance, risk analytics, procurement validation, incident response, and regulatory reporting."
},
{
"question": "What advantages does using CycloneDX offer for Unmanned Aerial Vehicles (UAVs)?",
"answer": "It enables traceability of firmware components, proof of licence compliance for commercial IP, rapid vulnerability patching, and meets aviation‑industry supply‑chain regulations."
},
{
"question": "What does NIST SP 800‑161 specify should be included in VDRs?",
"answer": "Vulnerability ID, description, affected component references, impact assessment, remediation guidance, evidence of exploitability, disclosure timeline, and provenance."
},
{
"question": "How are declared and concluded licences acknowledged?",
"answer": "Both are stored in the component’s \"license\" object under distinct fields (\"declared\" and \"concluded\")."
},
{
"question": "Why are relationships used in CycloneDX?",
"answer": "To model dependency, containment, replacement, and provision relationships, enabling impact analysis and supply‑chain mapping."
},
{
"question": "How do first‑party from third‑party components differ in CycloneDX?",
"answer": "First‑party components have the organisation as the supplier; third‑party components reference an external supplier and often carry external licences."
},
{
"question": "How are license and copyright details presented in CycloneDX?",
"answer": "License via SPDX or commercial licence objects; copyright via an array of strings or objects with holder, year, and URL."
},
{
"question": "What is the role of describing data flow in services?",
"answer": "To document what data is consumed, produced, and transferred, supporting privacy impact assessments and compliance with data‑handling regulations."
},
{
"question": "How can CycloneDX dependencies illustrate service‑to‑service dependencies?",
"answer": "Using \"dependsOn\" relationships between service components, optionally adding a \"description\" of the API contract."
},
{
"question": "How does CycloneDX support VEX (Vulnerability Exploitability eXchange)?",
"answer": "By defining a VEX object that links each vulnerability to component references with status and justification, optionally scoped by lifecycle phase."
},
{
"question": "What is the difference between declared and observed formulas in the 'formulation' section?",
"answer": "Declared formulas state the supplier's intended licence/build metadata; observed formulas capture what was actually built as detected by scanning."
},
{
"question": "Is it possible to digitally sign annotations in CycloneDX?",
"answer": "Yes – annotations can be signed using the \"signature\" object, which stores a JWS or PGP signature over the annotation payload."
},
{
"question": "What is the importance of attestations and claims in the 'declarations' section?",
"answer": "Claims restate compliance requirements in system‑specific language; attestations bind those claims to signed evidence, enabling verifiable compliance-as‑code."
},
{
"question": "Does CycloneDX offer a way to represent digital and analog signatures?",
"answer": "Digital signatures are represented via the \"signatures\" array; analog (hand‑written) signatures can be captured as evidence data components with description and image data."
},
{
"question": "Is it possible to develop custom extensions for CycloneDX for specific needs?",
"answer": "Yes – custom XML namespaces, JSON property prefixes, or Protobuf extensions can be defined, provided they are documented and versioned."
},
{
"question": "Where can the official schema locations for JSON, XML, and Protobuf CycloneDX BOMs be found?",
"answer": "See https://cyclonedx.org/schema/bom-1.6.schema.json, https://cyclonedx.org/schema/bom-1.6.xsd, and https://cyclonedx.org/schema/bom-1.6.proto."
},
{
"question": "How does CycloneDX assist organisations under strict cybersecurity standards with regulatory compliance?",
"answer": "By delivering an auditable SBOM containing licences, vulnerabilities, attestations, and signed evidence that map directly to control requirements in standards such as NIST 800‑53, ISO 27001, and CMMC."
},
{
"question": "What are the drawbacks of automated CycloneDX BOM generation, and how can they be overcome?",
"answer": "Automated scans may miss transitive dependencies, mis‑classify licences, or lack contract evidence. Overcome by supplementing with manual review, adding data components for contracts, and signing the final BOM."
},
{
"question": "What advantages do annotations in CycloneDX provide?",
"answer": "They allow arbitrary enrichment (e.g., CI build ID, risk score) without schema changes, can be signed, and are easily consumed by downstream tools."
},
{
"question": "How do Declarations contribute to compliance as code?",
"answer": "Declarations encode compliance requirements as structured claims that can be programmatically evaluated against evidence, enabling automated compliance checks in CI/CD pipelines."
},
{
"question": "How does CycloneDX support collaboration and information sharing in the software supply chain?",
"answer": "Through a common, versioned schema, digital signatures for trust, lifecycle phase semantics, and extensibility that let multiple organisations exchange verifiable SBOMs."
},
{
"question": "What does the 'other' data component type signify?",
"answer": "A generic placeholder for data that does not fit predefined types; users must describe its purpose via the component's \"description\" or custom properties."
},
{
"question": "What are some situations where including data components in a BOM would be appropriate?",
"answer": "When you need to ship policy files, security‑tool rule sets, compliance certificates, cryptographic key inventories, or configuration baselines as part of the software artefact."
},
{
"question": "Can data components have suppliers different from the main component?",
"answer": "Yes – each data component can specify its own \"supplier\" object."
},
{
"question": "Why is it important to provide evidence for multiple potential CPEs?",
"answer": "Different vulnerability databases may reference the component under different CPE strings; supplying evidence for each improves match accuracy."
},
{
"question": "What numerical range is used for the 'confidence' metric?",
"answer": "0 to 100 inclusive."
},
{
"question": "What actions should organisations take for an agile cryptographic approach?",
"answer": "Inventory keys, document dependencies, assign confidence, store evidence as data components, automate rotation, and sign BOMs."
},
{
"question": "Where should cryptographic assets be documented?",
"answer": "As data components of type \"cryptographic-key\" or \"certificate\" with appropriate metadata and relationships to the software that uses them."
},
{
"question": "What are the benefits of using CycloneDX for managing commercial software licenses?",
"answer": "Clear licence scope, expiry tracking, contract linkage, audit‑ready evidence, and the ability to reconcile licences against SAM inventories."
},
{
"question": "How can lifecycle information help organisations respond to incidents more efficiently?",
"answer": "By indicating which phase introduced the vulnerable component, enabling rapid remediation (patch, rebuild, or decommission) and reducing investigation time."
},
{
"question": "How can a configuration settings file be represented using a data component?",
"answer": "Create a data component with \"type\": \"configuration\", include checksum, supplier, lifecycle phase, and optional properties for each setting."
},
{
"question": "When dealing with a large dataset, is it better to include it directly in the BOM or reference it externally?",
"answer": "Reference it externally via a URL and checksum; embedding large data inflates the BOM and hinders processing."
},
{
"question": "What information is gathered during the 'Discovery' lifecycle phase?",
"answer": "Observed component versions, installed licences, runtime configurations, vulnerability findings, CPEs, and supporting evidence data components."
},
{
"question": "What does the 'Decommission' lifecycle phase signify?",
"answer": "The component or service has been retired from use; licences may expire and the BOM records the decommission date."
},
{
"question": "How can data components be used to track different versions of a configuration file over time?",
"answer": "Create a separate data component for each version, each with its own version identifier and a \"replaces\" relationship to the previous version."
},
{
"question": "How do consumers of BOMs interpret data components?",
"answer": "As supplemental artefacts that provide context, evidence, or policy; they retrieve them via the bom‑ref and process checksum, type, and properties."
},
{
"question": "Can you give an example of a custom lifecycle phase?",
"answer": "Name: \"Pre‑Prod Validation\", Description: \"Components validated in staging before release\", Timestamp: \"2024‑10‑01T08:00:00Z\"."
},
{
"question": "What are the different focuses of SDLC and SAM use cases regarding licensing?",
"answer": "SDLC ensures licences are compatible before code ships; SAM tracks licences of assets in production, manages renewals, and reconciles contracts."
},
{
"question": "How does lifecycle information improve incident response efficiency?",
"answer": "It tells responders whether a vulnerable component is still active and where it originated, allowing targeted remediation instead of blanket sweeps."
},
{
"question": "Is it possible to use a custom enumeration for the phase value?",
"answer": "Yes, provided the custom phase is declared in the top‑level \"metadata.lifecycle\" array."
},
{
"question": "How can data components be used to document a microservice's API specification?",
"answer": "Create a data component of type \"api‑specification\" (or \"other\"), store the OpenAPI file checksum, link via a \"provides\" relationship to the service component."
},
{
"question": "What is the best method to represent a database query as a data component?",
"answer": "Use type \"query\" (or \"other\"), store the SQL text in a property, include checksum and a \"dependsOn\" relationship to the database component."
},
{
"question": "How are several lifecycle phases depicted in a CycloneDX BOM?",
"answer": "Each component records its own \"phase\" value referencing the definitions in the BOM’s lifecycle array; multiple phases appear as multiple components each with its own phase."
},
{
"question": "Why is understanding the lifecycle phase critical for vulnerability analysis?",
"answer": "It indicates whether the vulnerability is still relevant (e.g., component still in Operations) and helps prioritize patching."
},
{
"question": "How can CycloneDX lifecycle phases be used to track the evolution of software components?",
"answer": "By creating new component entries for each version and assigning appropriate phases (Design, Build, Operations, Decommission), a timeline of evolution emerges."
},
{
"question": "How does CycloneDX support integration with existing enterprise SAM/ITAM practices?",
"answer": "Through supplier, contract, commercial‑license fields, lifecycle phases that align with asset states, and relationship types that model ownership and dependency hierarchies."
},
{
"question": "Why is it crucial to document the dependencies of cryptographic assets?",
"answer": "Because the security of a system depends on how keys and algorithms are used; dependency mapping helps assess impact of a compromised asset and supports agile key rotation."
},
{
"question": "What is the overall scope of CycloneDX?",
"answer": "Provision of a universal, extensible SBOM format covering component inventory, licences, vulnerabilities, relationships, evidence, attestations, and lifecycle metadata for the entire software supply chain."
},
{
"question": "What defines cryptographic agility?",
"answer": "The ability to quickly identify, replace, or update cryptographic assets (keys, algorithms, libraries) with minimal disruption, supported by documented dependencies and automated tooling."
},
{
"question": "Can you explain the `dependsOn` dependency type in CycloneDX?",
"answer": "It indicates that the source component requires the target component to function (e.g., an application dependsOn a library or a service dependsOn a database)."
},
{
"question": "What is the meaning of the `provides` dependency type?",
"answer": "It denotes that the source component offers a capability or specification that the target component consumes (e.g., a service provides an API used by another service)."
},
{
"question": "What capabilities does CycloneDX Attestations provide to organizations?",
"answer": "They allow organisations to make signed, structured claims about compliance, security posture, or risk, backed by verifiable evidence and linked to BOM components."
},
{
"question": "In what way can Attestations be conceptualized?",
"answer": "As a digital statement of fact (claim) that is attested to with evidence and a cryptographic signature, similar to a notarised certificate."
},
{
"question": "What should organizations aim to understand as part of an agile cryptographic approach?",
"answer": "The inventory of keys, algorithms, their dependencies, confidence scores, rotation schedules, and how they map to the software components that use them."
},
{
"question": "What was the specific purpose for which CBOM was designed by CycloneDX?",
"answer": "To provide a concise, verifiable Bill of Materials that includes cryptographic assets and their dependencies, enabling rapid risk assessment and agile key‑management."
},
{
"question": "Why is capturing dependencies important for analyzing crypto assets?",
"answer": "Because the security impact of a compromised key propagates to all components that depend on it; dependency mapping reveals the blast radius."
},
{
"question": "What areas does CycloneDX cover?",
"answer": "Component inventory, licences (open‑source and commercial), vulnerabilities, relationships, data components, lifecycle phases, attestations, and extensions."
},
{
"question": "What does cryptographic agility mean?",
"answer": "The capability to modify or replace cryptographic primitives quickly, supported by documented dependencies and automated tooling."
},
{
"question": "What capabilities are unlocked by using CycloneDX Attestations?",
"answer": "Automated compliance verification, auditable proof of security controls, and the ability to share signed compliance artefacts across organisations."
},
{
"question": "How do CycloneDX Attestations empower organizations?",
"answer": "They provide a standard way to express and prove compliance claims, enabling automated policy enforcement and trusted information exchange."
},
{
"question": "What is a simple way to think about Attestations?",
"answer": "A claim + evidence + cryptographic signature, like a signed receipt that says \"We meet requirement X\"."
},
{
"question": "What should organizations focus on understanding regarding their cryptographic assets?",
"answer": "Where each key/algorithm lives, what software uses it, its confidence level, and how to rotate or replace it safely."
},
{
"question": "What is the primary function or purpose of claims within CDXA?",
"answer": "To restate a requirement in system‑specific terminology so that it can be evaluated against evidence."
},
{
"question": "What are the two fundamental elements that constitute a claim in CDXA?",
"answer": "The target component (what is being claimed) and the predicate component (the requirement or condition)."
},
{
"question": "Which properties are enumerated in the table for claims according to the document?",
"answer": "bom‑ref, target, predicate, confidence, and optional justification fields."
},
{
"question": "How is the 'bom-ref' property described when referring to a CDXA claim?",
"answer": "A unique identifier that links the claim to a specific component or evidence entry within the BOM."
},
{
"question": "What fields define the structure of evidence in CDXA?",
"answer": "bom‑ref, propertyName, description, data, created, and optionally confidence."
},
{
"question": "What is the role of the 'bom-ref' field in CDXA evidence?",
"answer": "It uniquely identifies the evidence item so that claims can reference it unambiguously."
},
{
"question": "How is the 'propertyName' field defined in CDXA evidence?",
"answer": "It specifies the name of the property or attribute that the evidence supports (e.g., \"license‑expiry\")."
},
{
"question": "What is the intended use of the 'description' field in CDXA evidence?",
"answer": "Human‑readable narrative explaining what the evidence represents and how it was obtained."
},
{
"question": "What role does the 'data' field serve for CDXA evidence?",
"answer": "Contains the raw value or artefact (e.g., a hash, a certificate, a JSON snippet) that proves the claim."
},
{
"question": "What information does the 'created' property hold for CDXA evidence?",
"answer": "A timestamp (ISO‑8601) indicating when the evidence was generated."
},
{
"question": "In what way does CycloneDX Attestations record adherence to standards?",
"answer": "Through a \"conformance\" object that lists each standard, a score, rationale, and mitigation strategies, all linked to claims and signed."
},
{
"question": "What are the three distinct fields that comprise conformance in CDXA?",
"answer": "score, rationale, and mitigationStrategies."
},
{
"question": "What is the primary function or purpose of claims within CDXA?",
"answer": "To articulate how a system satisfies a specific requirement, enabling automated verification."
},
{
"question": "How do claims restate requirements using system‑specific terminology?",
"answer": "By mapping generic requirement identifiers to concrete target components and predicates that reflect the organisation’s architecture and policies."
},
{
"question": "What characteristics define a claim within the CDXA framework?",
"answer": "Unique bom‑ref, target component reference, predicate description, optional confidence metric, and linkage to evidence."
},
{
"question": "What is the function of the 'bom-ref' identifier for claims?",
"answer": "Provides a globally unique reference so claims can be retrieved, referenced, and signed within the BOM."
},
{
"question": "What characteristics are associated with evidence in CDXA?",
"answer": "Unique bom‑ref, propertyName, description, data payload, created timestamp, and optional confidence score."
},
{
"question": "How is evidence uniquely identified within a CDXA document?",
"answer": "Via its own bom‑ref value."
},
{
"question": "What is the source or definition for the 'propertyName' in evidence?",
"answer": "It is drawn from the CycloneDX Property Taxonomy, which defines standard property names for security and compliance attributes."
},
{
"question": "How is the creation process of evidence explained in its description?",
"answer": "The description field gives context (who created it, how, and under what conditions) to aid reviewers."
},
{
"question": "What type of information is contained within the evidence 'data' field?",
"answer": "The actual artefact – e.g., a hash string, a PEM‑encoded certificate, a JSON snippet of a test result, or a URL to a scanned report."
},
{
"question": "Why is the creation timestamp important for CDXA evidence?",
"answer": "It establishes the freshness of the evidence, which is critical for time‑sensitive compliance checks."
},
{
"question": "What is the overall objective of the conformance documentation process?",
"answer": "To demonstrate, with measurable scores and rationales, that a system meets specified standards and to record any mitigation steps required."
},
{
"question": "How is the 'score' determined for a given conformance claim?",
"answer": "Typically as a numeric value (0‑100) reflecting the degree of compliance, derived from automated analysis or manual assessment."
},
{
"question": "What information does the 'rationale' provide to stakeholders?",
"answer": "An explanation of why the score was assigned, including context, evidence gaps, or partial compliance details."
},
{
"question": "How are 'mitigationStrategies' used in the context of CDXA conformance?",
"answer": "They list concrete actions the organisation will take to remediate any deficiencies noted in the rationale."
},
{
"question": "How do requirements, claims, and conformance interconnect in CDXA?",
"answer": "Requirements are mapped to claims; claims are supported by evidence; conformance aggregates the claim scores, rationales, and mitigation strategies to show overall compliance."
},
{
"question": "In what way do claims facilitate an organisation's argument for fulfilling requirements?",
"answer": "Claims translate abstract requirements into concrete, verifiable statements linked to evidence, enabling a demonstrable compliance case."
},
{
"question": "How do the target and predicate components form the basis of a claim in CDXA?",
"answer": "The target identifies the BOM element being evaluated; the predicate defines the condition it must satisfy (e.g., \"has licence expiry < 2025\")."
},
{
"question": "What mechanism does CycloneDX use to record conformance through attestations?",
"answer": "The \"attestations\" array contains objects with a \"claims\" list, each claim referencing evidence, and a \"conformance\" section with score, rationale, and mitigation, all optionally signed."
},
{
"question": "What does the conformance score indicate in CDXA?",
"answer": "The percentage of requirement fulfilment for that particular claim – higher scores mean closer alignment to the standard."
},
{
"question": "Why is a rationale provided as part of conformance documentation in CDXA?",
"answer": "To give auditors insight into the assessment process, explaining any deviations or partial compliance."
},
{
"question": "What is the goal of including mitigation strategies in conformance reporting?",
"answer": "To outline actionable remediation steps, demonstrating proactive risk management."
},
{
"question": "How does CycloneDX Attestations provide proof of meeting requirements?",
"answer": "By binding claims and evidence with a cryptographic signature, creating a tamper‑evident record that can be verified by any consumer."
},
{
"question": "What are the essential parts that make up an assertion in CDXA?",
"answer": "Claim (target + predicate), evidence (bom‑ref, propertyName, data, created), and optional conformance metadata (score, rationale, mitigation)."
},
{
"question": "How do claims restate requirements using system‑specific terminology?",
"answer": "They map generic control IDs to concrete component properties and predicates relevant to the organisation’s architecture."
},
{
"question": "What characteristics define a claim within the CDXA framework?",
"answer": "Unique identifier, target component reference, predicate definition, confidence score, and links to supporting evidence."
},
{
"question": "What is the function of the 'bom-ref' identifier for claims?",
"answer": "Provides a stable, unique reference that can be signed and later retrieved."
},
{
"question": "What characteristics are associated with evidence in CDXA?",
"answer": "Unique bom‑ref, propertyName (taxonomy‑based), description, data payload, creation timestamp, confidence."
},
{
"question": "How is evidence uniquely identified within a CDXA document?",
"answer": "By its bom‑ref field."
},
{
"question": "What ensures evidence uniqueness within a CDXA document?",
"answer": "Each evidence entry must have a distinct bom‑ref; duplicate bom‑refs are prohibited by the schema."
},
{
"question": "How is the evidence linked to a specific property definition?",
"answer": "Through the propertyName field, which references a term in the CycloneDX Property Taxonomy."
},
{
"question": "What details are included in the evidence description field?",
"answer": "Human‑readable narrative about the source, method, and purpose of the evidence."
},
{
"question": "What constitutes the supporting data for an evidence entry?",
"answer": "The \"data\" field – e.g., a hash string, a certificate, a JSON snippet, or a URL to a full report."
},
{
"question": "Why is the evidence creation date recorded?",
"answer": "To establish when the evidence was generated and to assess its relevance over time."
},
{
"question": "What are the necessary elements required to establish conformance?",
"answer": "A claim, supporting evidence, a score, a rationale, and any mitigation strategies, optionally signed."
},
{
"question": "What does the numerical value in the 'score' field represent?",
"answer": "A percentage (0‑100) indicating how fully the claim satisfies the associated requirement."
},
{
"question": "What is the nature of information provided in the 'rationale' field?",
"answer": "Explanatory text justifying the score, highlighting evidence gaps, or noting partial compliance."
},
{
"question": "What is the intended outcome of defining mitigation strategies?",
"answer": "To provide a clear remediation plan that addresses any identified compliance shortfalls."
},
{
"question": "How does the conformance section demonstrate fulfillment of requirements?",
"answer": "By presenting scored claims, rationales, and mitigation actions that together evidence compliance with each standard."
},
{
"question": "What is the relationship between claims and the supporting evidence?",
"answer": "Evidence provides the factual basis that validates a claim; claims reference evidence via its bom‑ref."
},
{
"question": "How does the predicate component define the scope of a claim?",
"answer": "It specifies the condition or rule (e.g., \"must have licence expiry after 2024\") that the target component must meet."
},
{
"question": "What does the target component of a claim specify?",
"answer": "The specific BOM element (component, data component, or service) to which the claim applies."
},
{
"question": "What steps are involved in creating a CycloneDX attestation?",
"answer": "1) Define claims; 2) Gather evidence; 3) Compute conformance scores; 4) Write the attestation object with claims, evidence, and conformance; 5) Sign the attestation."
},
{
"question": "How is the ability to meet requirements demonstrated through conformance?",
"answer": "By linking each requirement to a scored claim backed by evidence and signed attestations."
},
{
"question": "What process is involved in gathering data to support claims?",
"answer": "Collect relevant artefacts (licence files, scan results, certificates), create data components, compute checksums, and record timestamps."
},
{
"question": "How are the target and predicate used to build a claim argument?",
"answer": "The target identifies what is being evaluated; the predicate states the condition; together they form a logical assertion that can be verified against evidence."
},
{
"question": "How are organizational requirements connected to specific claims?",
"answer": "Each organisational requirement maps to one or more claims that express the requirement in terms of BOM elements."
},
{
"question": "What does a particular conformance score signify?",
"answer": "The degree of alignment between the claim and the supporting evidence – a higher score signals stronger compliance."
},
{
"question": "Why is it important to document the rationale behind a conformance score?",
"answer": "It provides transparency for auditors, clarifies why a score is not 100, and guides remediation efforts."
},
{
"question": "How are mitigation strategies formulated in response to conformance findings?",
"answer": "By analysing gaps identified in the rationale and defining concrete actions (e.g., update licence, rotate key, patch vulnerability)."
},
{
"question": "How can the CDXA framework be used to demonstrate compliance?",
"answer": "By assembling signed attestations that contain claims, evidence, scores, rationales, and mitigation, then presenting the BOM to auditors as proof."
},
{
"question": "What is the process for creating a valid claim assertion?",
"answer": "Identify the requirement, select the target component, define the predicate, assign a bom‑ref, gather evidence, calculate a score, and optionally sign."
},
{
"question": "How do claims ensure requirements are addressed in a system‑specific manner?",
"answer": "Claims translate generic controls into precise statements about the organisation's components and configurations."
},
{
"question": "What mechanism ensures claims are uniquely identifiable?",
"answer": "The mandatory bom‑ref field for each claim."
},
{
"question": "What is the process for assembling the components of evidence?",
"answer": "Identify the property, capture the data, assign a bom‑ref, write a description, compute checksum, and record creation timestamp."
},
{
"question": "How is the evidence aligned with specific property definitions?",
"answer": "By setting the propertyName to a term from the CycloneDX Property Taxonomy that matches the type of evidence."
},
{
"question": "What information does the evidence description provide about its origin?",
"answer": "Context about who produced it, how, and under what circumstances (e.g., \"Generated by SPDX‑License‑Checker v2.3 on 2024‑07‑01\")."
},
{
"question": "How is the supporting information for evidence structured?",
"answer": "As a JSON object containing propertyName, description, data, created, and optionally confidence."
},
{
"question": "What is the purpose of including a creation timestamp with evidence?",
"answer": "To prove timeliness and relevance, especially for time‑sensitive controls (e.g., key rotation)."
},
{
"question": "What is the overall objective of the CDXA conformance process?",
"answer": "To produce a verifiable, scored, and signed representation of how an organisation meets its security and compliance standards."
},
{
"question": "How is evidence used to substantiate the validity of claims?",
"answer": "Each claim references one or more evidence bom‑refs; the verifier checks that the evidence satisfies the predicate."
},
{
"question": "How do the target and predicate create a logical structure for claims?",
"answer": "Target = subject; predicate = condition; together they form a proposition that can be evaluated true/false."
},
{
"question": "How do claims ensure that specific requirements are directly addressed?",
"answer": "By mapping each requirement to a claim that references the exact component and property involved."
},
{
"question": "What ensures the integrity and traceability of attestations in CDXA?",
"answer": "Cryptographic signatures on the attestation object, immutable bom‑refs, and timestamped evidence."
},
{
"question": "What is the importance of the 'other' data component type?",
"answer": "It provides flexibility to capture any data that does not fit predefined categories while still being part of the BOM."
},
{
"question": "What are the benefits of using CycloneDX with Unmanned Aerial Vehicles (UAVs)?",
"answer": "Traceability of firmware, evidence of licence compliance, rapid vulnerability patching, and meeting aviation‑industry supply‑chain regulations."
},
{
"question": "What is the rationale behind the CBOM's creation in CycloneDX?",
"answer": "To give organisations a standard way to enumerate cryptographic assets and their dependencies, enabling agile risk assessment and key‑management."
},
{
"question": "Why is it essential to document the dependencies of cryptographic assets?",
"answer": "Dependencies define the blast radius of a compromised asset and are needed for effective rotation and impact analysis."
},
{
"question": "What is the overall scope of CycloneDX?",
"answer": "A comprehensive SBOM standard covering component inventory, licences, vulnerabilities, data components, lifecycle phases, attestations, and extensibility for the full software supply chain."
}
]
}
