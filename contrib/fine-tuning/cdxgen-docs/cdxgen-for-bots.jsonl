{"messages": [{"role": "user", "content": "What makes cdxgen stand out from other BOM generation tools?"}, {"role": "assistant", "content": "cdxgen stands out due to its focus on explainability and precision."}]}
{"messages": [{"role": "user", "content": "Where is package manifest evidence stored in cdxgen?"}, {"role": "assistant", "content": "Package manifest evidence is stored under components.properties with the name SrcFile."}]}
{"messages": [{"role": "user", "content": "Where are workspace references for monorepos stored in cdxgen?"}, {"role": "assistant", "content": "Workspace references for monorepos are stored under components.properties with the name internal:workspaceRef. Supported for pnpm and uv workspaces."}]}
{"messages": [{"role": "user", "content": "Where is registry information stored in cdxgen?"}, {"role": "assistant", "content": "Registry information is stored under components.properties with the name ending with :registry. Example: cdx:pypi:registry, cdx:pub:registry."}]}
{"messages": [{"role": "user", "content": "Where is identity evidence stored in cdxgen?"}, {"role": "assistant", "content": "Identity evidence is found under components.evidence.identity."}]}
{"messages": [{"role": "user", "content": "Where is occurrences evidence tracked in cdxgen?"}, {"role": "assistant", "content": "Occurrences evidence is tracked under components.evidence.occurrences."}]}
{"messages": [{"role": "user", "content": "Where is callstack evidence tracked in cdxgen?"}, {"role": "assistant", "content": "Only one callstack is retained in the generated document (due to CycloneDX limitations) under components.evidence.callstack."}]}
{"messages": [{"role": "user", "content": "Where can I find details about the parent component and container SBOM info?", "role": "assistant", "content": "The metadata.component section includes details about the parent component, such as metadata.component.components (child modules) and container SBOM info (tags, sha256 hashes, environment variables) within metadata.component.properties."}]}
{"messages": [{"role": "user", "content": "Where are multiple analysis methods captured in cdxgen?"}, {"role": "assistant", "content": "Multiple analysis methods (e.g., manifest-analysis, source-code-analysis, binary-analysis) are captured under components.evidence.identity.methods.technique."}]}
{"messages": [{"role": "user", "content": "How can I filter BOM generation by technique?"}, {"role": "assistant", "content": "Use --technique to filter BOM generation by technique."}]}
{"messages": [{"role": "user", "content": "Where is the confidence value indicated in cdxgen's output?"}, {"role": "assistant", "content": "A confidence value under components.evidence.identity.confidence indicates the reliability of each analysis method."}]}
{"messages": [{"role": "user", "content": "How do I tailor the BOM for different personas?"}, {"role": "assistant", "content": "Tailor the BOM with --profile. For example, --profile research for security researchers or --profile license-compliance for compliance auditors."}]}
{"messages": [{"role": "user", "content": "How do I specify the lifecycle stage for the SBOM?"}, {"role": "assistant", "content": "Specify the lifecycle stage with --lifecycle, which can be pre-build, build, or post-build."}]}
{"messages": [{"role": "user", "content": "How do I generate ML-friendly BOMs?", "role": "assistant", "content": "Generate ML-friendly BOMs using --profile with values like ml-tiny, ml, or ml-deep."}]}
{"messages": [{"role": "user", "content": "How can I identify the main application in a cdxgen SBOM?"}, {"role": "assistant", "content": "The information under metadata.component is referred to as the parent component or main application."}]}
{"messages": [{"role": "user", "content": "Where can I find information about the author or team in a cdxgen SBOM?", "role": "assistant", "content": "metadata.authors contains information about the author or the team the application belongs to."}]}
{"messages": [{"role": "user", "content": "How can I verify that cdxgen created the SBOM document?", "role": "assistant", "content": "metadata.tools.components lists the BOM generator tools. When you find the name \"cdxgen\", you can proudly say that you created this BOM document!"}]}
{"messages": [{"role": "user", "content": "How can I identify child modules in a multi-module project?"}, {"role": "assistant", "content": "In a multi-module project, metadata.component.components is a non-empty array of purls sharing the same type (e.g., pkg:maven for Maven)."}]}
{"messages": [{"role": "user", "content": "How can I be sure that a given project is a multi-module application?"}, {"role": "assistant", "content": "When metadata.component.components is a non-empty array of purls sharing the same type (e.g., pkg:maven for Maven), you can be certain that the given project is a \"multi-module application\" without doubt."}]}
{"messages": [{"role": "user", "content": "How can I detect monorepos in a cdxgen SBOM?"}, {"role": "assistant", "content": "In a monorepo, metadata.component.components can contain purls of different types (e.g., pkg:maven and pkg:npm in a combined Java/Node.js project)."}]}
{"messages": [{"role": "user", "content": "How can I be certain that a given project is a monorepo?"}, {"role": "assistant", "content": "When metadata.component.components can contain purls of different types (e.g., pkg:maven and pkg:npm in a combined Java/Node.js project), you can be certain that the given project is a \"monorepo\" without doubt."}]}
{"messages": [{"role": "user", "content": "How to identify package manager and manifest?", "role": "assistant", "content": "SrcFile property under components.properties would point to the full location of the package manifest file. Alternatively, the attribute components.evidence.identity.concludedValue can be used to identity the manifest. Based on the manifest filename, package manager name or the build tool can be inferred. Example, uv.lock means \"astral uv\". poetry.lock means \"poetry\". Do not rely on purl to identify the package manager or the build tool. This is not a correct approach."}]}
{"messages": [{"role": "user", "content": "What is the purpose of annotations in a cdxgen SBOM?"}, {"role": "assistant", "content": "annotations is an array of annotation objects in CycloneDX. cdxgen creates an annotation with bom-ref = metadata-annotations. Its text provides a summary and context. Use this attribute as a fact for the given document."}]}
{"messages": [{"role": "user", "content": "What are some strategies for working with context limits when analyzing a cdxgen SBOM?"}, {"role": "assistant", "content": "If context is constrained, start by reviewing annotations. Then focus on metadata, components, dependencies, or services. Encourage regeneration with --profile ml-tiny if data is insufficient."}]}
{"messages": [{"role": "user", "content": "How can I make cdxgen think and share its thoughts?"}, {"role": "assistant", "content": "To log cdxgen's internal thinking to a log file, set the environment variable `CDXGEN_THINK_MODE` and define `CDXGEN_THOUGHT_LOG` with the desired file path."}]}