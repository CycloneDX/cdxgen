{"messages": [{"role": "user", "content": "Where are the custom language-specific base images contributed from?"}, {"role": "assistant", "content": "AppThreat contributes the custom language-specific base images from this repo."}]}
{"messages": [{"role": "user", "content": "What are the advantages of using custom container images?"}, {"role": "assistant", "content": "These images include additional language-specific build tools and development libraries to enable automatic restore and build operations."}]}
{"messages": [{"role": "user", "content": "What is the container image tag for the default all-in-one cdxgen image with java?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen:master"}]}
{"messages": [{"role": "user", "content": "What is the container image tag for the default all-in-one cdxgen with deno support image with java?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-deno:master"}]}
{"messages": [{"role": "user", "content": "What is the container image tag for the secure all-in-one cdxgen image with java?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-secure:master"}]}
{"messages": [{"role": "user", "content": "What are the container image tags for Java 11?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-java11-slim:v11, ghcr.io/cyclonedx/cdxgen-java11:v11"}]}
{"messages": [{"role": "user", "content": "What are the container image tags for Java 17?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-java17-slim:v11, ghcr.io/cyclonedx/cdxgen-java17:v11"}]}
{"messages": [{"role": "user", "content": "What is the container image tag for .Net Framework 4.6 - 4.8, .Net Core 2.1, 3.1, and .Net 6.0?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-debian-dotnet6:v11"}]}
{"messages": [{"role": "user", "content": "What is the container image tag for .Net 7?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-dotnet7:v11"}]}
{"messages": [{"role": "user", "content": "What are the container image tags for .Net 8?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-debian-dotnet8:v11, ghcr.io/cyclonedx/cdxgen-dotnet8:v11"}]}
{"messages": [{"role": "user", "content": "What are the container image tags for .Net 9?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-debian-dotnet9:v11, ghcr.io/cyclonedx/cdxgen-dotnet9:v11"}]}
{"messages": [{"role": "user", "content": "What is the container image tag for Python 3.6?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-python36:v11"}]}
{"messages": [{"role": "user", "content": "What is the container image tag for Python 3.9?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-python39:v11"}]}
{"messages": [{"role": "user", "content": "What is the container image tag for Python 3.10?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-python310:v11"}]}
{"messages": [{"role": "user", "content": "What is the container image tag for Python 3.11?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-python311:v11"}]}
{"messages": [{"role": "user", "content": "What is the container image tag for Python 3.12?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-python312:v11"}]}
{"messages": [{"role": "user", "content": "What is the container image tag for Node.js 20?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-node20:v11"}]}
{"messages": [{"role": "user", "content": "What are the custom image to use for Ruby 3.3.6?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-debian-ruby33:v11"}]}
{"messages": [{"role": "user", "content": "What are the custom image to use for Ruby 3.4.1?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-debian-ruby34:v11"}]}
{"messages": [{"role": "user", "content": "What are the custom image to use for Ruby 2.6.10 (debian version)?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-debian-ruby26:v11"}]}
{"messages": [{"role": "user", "content": "What are the custom image to use for Ruby 2.5.0 (SLE version)?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/cdxgen-ruby25:v11"}]}
{"messages": [{"role": "user", "content": "What are the container image tags for Ruby 1.8.x?"}, {"role": "assistant", "content": "ghcr.io/cyclonedx/debian-ruby18:master"}]}
{"messages": [{"role": "user", "content": "How do I use the Java 11 version of cdxgen in a Docker container?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $HOME/.m2:$HOME/.m2:rw -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-java11-slim:v11 -r /app -o /app/bom.json -t java"}]}
{"messages": [{"role": "user", "content": "How do I target Java 8 with Java 11 Docker image?"}, {"role": "assistant", "content": "Use the java 11 image but pass -t java8. Example: docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $HOME/.m2:$HOME/.m2 -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-java11-slim:v11 -r /app -o /app/bom.json -t java8"}]}
{"messages": [{"role": "user", "content": "How do I generate a SBOM for a .Net Framework 4.6 - 4.8 application using the cdxgen container?"}, {"role": "assistant", "content": "docker run --rm --platform=linux/amd64 -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-debian-dotnet6:v11 -r /app -o /app/bom.json -t dotnet"}]}
{"messages": [{"role": "user", "content": "How do I generate a SBOM for a Dotnet 3.1 or Dotnet 6.0 application using the cdxgen container?"}, {"role": "assistant", "content": "docker run --rm --platform=linux/amd64 -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-debian-dotnet6:v11 -r /app -o /app/bom.json -t dotnet"}]}
{"messages": [{"role": "user", "content": "How can I use the .NET 7 container image?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-dotnet7:v11 -r /app -o /app/bom.json -t dotnet"}]}
{"messages": [{"role": "user", "content": "How can I use the .NET 8 container image?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-dotnet8:v11 -r /app -o /app/bom.json -t dotnet"}]}
{"messages": [{"role": "user", "content": "How can I use the debian version .NET 8 container image?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-debian-dotnet8:v11 -r /app -o /app/bom.json -t dotnet"}]}
{"messages": [{"role": "user", "content": "How can I use the .NET 9 container image?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-dotnet9:v11 -r /app -o /app/bom.json -t dotnet"}]}
{"messages": [{"role": "user", "content": "How can I use the debian version .NET 9 container image?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-debian-dotnet9:v11 -r /app -o /app/bom.json -t dotnet"}]}
{"messages": [{"role": "user", "content": "How do I generate a SBOM for a Python 3.6 application using the cdxgen container?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-python36:v11 -r /app -o /app/bom.json -t python . Note: dependency tree is unavailable with Python 3.6."}]}
{"messages": [{"role": "user", "content": "How do I generate a SBOM for a Python 3.9 application using the cdxgen container?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-python39:v11 -r /app -o /app/bom.json -t python"}]}
{"messages": [{"role": "user", "content": "How do I generate a SBOM for a Python 3.10 application using the cdxgen container?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-python310:v11 -r /app -o /app/bom.json -t python"}]}
{"messages": [{"role": "user", "content": "How do I generate a SBOM for a Python 3.11 application using the cdxgen container?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-python311:v11 -r /app -o /app/bom.json -t python"}]}
{"messages": [{"role": "user", "content": "How do I generate a SBOM for a Python 3.12 application using the cdxgen container?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-python312:v11 -r /app -o /app/bom.json -t python"}]}
{"messages": [{"role": "user", "content": "How do I generate a SBOM for a Node.js 20 application using the cdxgen container?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-node20:v11 -r /app -o /app/bom.json -t js. Note Use --platform=linux/amd64 in case of npm install errors."}]}
{"messages": [{"role": "user", "content": "How do I generate a SBOM for a Ruby 3.3.6 application using the cdxgen container?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-debian-ruby33:v11 -r /app -o /app/bom.json -t ruby"}]}
{"messages": [{"role": "user", "content": "How do I generate a SBOM for a Ruby 3.4.1 application using the cdxgen container?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-debian-ruby34:v11 -r /app -o /app/bom.json -t ruby"}]}
{"messages": [{"role": "user", "content": "How do I generate a SBOM for a Ruby 2.6.0 (Debian Version) application using the cdxgen container?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-debian-ruby26:v11 -r /app -o /app/bom.json -t ruby"}]}
{"messages": [{"role": "user", "content": "How do I generate a SBOM for a Ruby 2.5.0 (SLE version) application using the cdxgen container?"}, {"role": "assistant", "content": "docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-ruby25:v11 -r /app -o /app/bom.json -t ruby"}]}
{"messages": [{"role": "user", "content": "How can I generate an SBOM and automatically install the appropriate version of Ruby, using rbenv?"}, {"role": "assistant", "content": "Pass any Ruby version with the type argument to make cdxgen automatically install the appropriate version using rbenv prior to BOM generation. Example: Pass -t ruby3.3.1 to install Ruby 3.3.1. docker run --rm -e CDXGEN_DEBUG_MODE=debug -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-debian-ruby34:v11 -r /app -o /app/bom.json -t ruby3.3.1."}]}
{"messages": [{"role": "user", "content": "How can I work with Ruby 1.8 applications?"}, {"role": "assistant", "content": "We have a Ruby 1.8 image that uses debian:jessie as the base image. Unfortunately, we couldn't find a way to install nodejs >= 20 in jessie, so we need a split workflow:"}]}
{"messages": [{"role": "user", "content": "What is the first step in the split workflow for Ruby 1.8?"}, {"role": "assistant", "content": "Perform bundle install with our debian-ruby18 image: docker run --rm -v /tmp:/tmp:rw -e GEM_HOME=/tmp/gems -v $(pwd):/app:rw -w /app -t ghcr.io/cyclonedx/debian-ruby18:master bundle install."}]}
{"messages": [{"role": "user", "content": "What is the second step in the split workflow for Ruby 1.8?"}, {"role": "assistant", "content": "Run cdxgen using ruby25 image:docker run --rm -e CDXGEN_DEBUG_MODE=debug -e CDXGEN_GEM_HOME=/tmp/gems -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-ruby25:v11 -r /app -o /app/bom.json -t ruby --lifecycle pre-build. Note: --deep mode is currently not supported for Ruby 1.8."}]}
{"messages": [{"role": "user", "content": "What is the work around when .Net restore crashes on MacOS M series machine"}, {"role": "assistant", "content": "A workaround could be to perform the dotnet restore using the official image, before using cdxgen-dotnet images. docker run --rm -v /tmp:/tmp -v $(pwd):/app:rw -w /app -it mcr.microsoft.com/dotnet/sdk:8.0 dotnet restore."}]}
{"messages": [{"role": "user", "content": "I'm getting nuget crashes on .Net Framework applications, what should I do?"}, {"role": "assistant", "content": "To troubleshoot, try running the nuget restore command manually using the bci-dotnet image as shown. docker run --rm -v /tmp:/tmp -v $(pwd):/app:rw -w /app -it ghcr.io/cyclonedx/bci-dotnet:master nuget restore -Verbosity detailed /app/<solution file name>."}]}
{"messages": [{"role": "user", "content": "I need information about System. dependencies, where do I find them?"}, {"role": "assistant", "content": "Use the command gacutil -l to obtain the version details for libraries from GAC."}]}
{"messages": [{"role": "user", "content": "How can I test arm64 from x64 machines?"}, {"role": "assistant", "content": "Install Rancher Desktop and setup nerdctl instead of docker. Setup multi-platform by following this doc."}]}
{"messages": [{"role": "user", "content": "What additional flag do I need to pass when testing arm64 with Rancher Desktop and nerdctl?"}, {"role": "assistant", "content": "Include the --platform=linux/arm64 argument with the nerdctl run command."}]}
{"messages": [{"role": "user", "content": "What is the primary function of the custom language-specific base images mentioned in the documentation?"}, {"role": "assistant", "content": "The primary function of these custom language-specific base images, contributed by AppThreat, is to streamline and enable the generation of Software Bill of Materials (SBOMs) using the cdxgen tool. These images are pre-configured with all the necessary build tools, compilers, and development libraries for a specific programming language and version. For instance, a Java 8 image will contain a Java 8 JDK and compatible versions of Maven and Gradle, while a .NET image will include the required .NET SDK and runtime.\n\nBy providing these comprehensive environments, the images solve the common problem of needing to set up a complex and version-sensitive build environment just to generate an SBOM. They allow cdxgen to perform automatic dependency restoration and build operations, which are often prerequisites for accurately discovering all components and their relationships in a project. This ensures a more reliable, consistent, and accurate SBOM generation process, especially within automated CI/CD pipelines where manual environment setup is impractical."}]}
{"messages": [{"role": "user", "content": "Where do the custom container images for cdxgen originate from?"}, {"role": "assistant", "content": "The custom language-specific base images for cdxgen are contributed and maintained by AppThreat. The source and definitions for these images are managed in a dedicated GitHub repository, which is linked in the introduction of the documentation: https://github.com/AppThreat/base-images. This repository contains the Dockerfiles and build scripts used to create each of the specialized container images.\n\nThese images are then published to the GitHub Container Registry (ghcr.io) under the cyclonedx organization, making them publicly accessible for anyone to use. The collaboration between AppThreat and CycloneDX ensures that users of cdxgen have access to a wide array of well-maintained, language-specific environments, which simplifies the process of generating accurate SBOMs for various technology stacks."}]}
{"messages": [{"role": "user", "content": "I am working with a legacy Java 11 application. Which cdxgen container image should I use?"}, {"role": "assistant", "content": "For a legacy Java 11 application, you should use one of the container images specifically built for Java 11. The documentation lists two primary options: ghcr.io/cyclonedx/cdxgen-java11-slim:v11 and ghcr.io/cyclonedx/cdxgen-java11:v11. The choice between them depends on your project's specific needs.\n\nThe cdxgen-java11-slim:v11 image is the recommended starting point as it is smaller and contains the Java 11 JDK along with standard build tools like Maven and Gradle. This is sufficient for most standard Java projects. However, if your application or one of its dependencies requires the compilation of native C/C++ code (for example, via JNI), you should use the ghcr.io/cyclonedx/cdxgen-java11:v11 image, as it includes the GCC compiler toolchain in addition to the Java development tools."}]}
{"messages": [{"role": "user", "content": "What is the difference between the 'slim' and regular Java container images, for example, cdxgen-java17-slim vs cdxgen-java17?"}, {"role": "assistant", "content": "The main difference between the 'slim' and regular (non-slim) Java container images for cdxgen is the inclusion of native build tools. The 'slim' versions, such as ghcr.io/cyclonedx/cdxgen-java17-slim:v11, are lightweight images that bundle the specified Java Development Kit (JDK) and common Java build tools like Maven and Gradle. These are ideal for pure Java applications that have no native code dependencies.\n\nThe regular, non-slim images, like ghcr.io/cyclonedx/cdxgen-java17:v11, include everything that the slim version has, plus the GNU Compiler Collection (GCC). This addition is crucial for projects that rely on the Java Native Interface (JNI) or have dependencies that need to compile native C or C++ code during the build process. Therefore, if you encounter build errors related to missing compilers (e.g., make, gcc), switching to the non-slim variant of the image will likely resolve the issue."}]}
{"messages": [{"role": "user", "content": "How can I generate an SBOM for a .NET Framework 4.8 application?"}, {"role": "assistant", "content": "To generate a Software Bill of Materials (SBOM) for a .NET Framework 4.8 application, you should use the ghcr.io/cyclonedx/cdxgen-debian-dotnet6:v11 container image. This specific image is designed to support a range of .NET versions, including older .NET Framework projects from 4.6 to 4.8, by bundling the necessary tools like Mono and a compatible version of NuGet.\n\nTo execute the SBOM generation, you would use a docker run command that mounts your project directory into the container. It's often necessary to specify the platform as linux/amd64 for better compatibility, especially when running on different host architectures. An example command would be: docker run --rm --platform=linux/amd64 -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-debian-dotnet6:v11 -r /app -o /app/bom.json -t dotnet. This command initiates the cdxgen process within the container, which will then attempt to restore the .NET Framework dependencies and build the project to generate an accurate SBOM."}]}
{"messages": [{"role": "user", "content": "My .NET SBOM is missing version information for dependencies like 'System.Net.Http'. What could be the cause and how do I fix it?"}, {"role": "assistant", "content": "The issue of missing version information for dependencies starting with System. typically arises because these are Global Assembly Cache (GAC) dependencies. In a standard .NET build, these assemblies are referenced from the system's GAC and are not copied into the project's local build output directory. Since cdxgen scans the build output for dependency information, it cannot find the metadata for these GAC assemblies and thus cannot determine their versions.\n\nTo fix this, you need to configure your project to copy these GAC dependencies into the local build directory. The recommended method is to create a file named Directory.Build.props at the root of your project solution. This file should contain a small MSBuild snippet that sets the <Private>True</Private> property for all references. This forces the build process to treat all referenced assemblies as private, copying them locally. After adding this file, you must run cdxgen with the --deep command-line argument, which instructs it to perform a more thorough analysis of the project files, ensuring the now-available GAC dependency versions are included in the final SBOM."}]}
{"messages": [{"role": "user", "content": "What is the process for generating an SBOM for a Ruby 1.8 application?"}, {"role": "assistant", "content": "Generating an SBOM for a Ruby 1.8 application is a special case that requires a two-step workflow due to tool incompatibilities on the old operating system required by Ruby 1.8. Modern versions of cdxgen's dependencies (like Node.js) cannot run on the debian:jessie base image that supports Ruby 1.8.\n\nFirst, you must perform the dependency installation step. You use the ghcr.io/cyclonedx/debian-ruby18:master image to run bundle install. In this command, you must map a volume for the gems to be installed into, for example by using -v /tmp:/tmp:rw and setting the environment variable -e GEM_HOME=/tmp/gems. This ensures the installed gems are persisted outside the container for the next step. The second step is to run the SBOM generation using a more modern image, like ghcr.io/cyclonedx/cdxgen-ruby25:v11. In this command, you use the CDXGEN_GEM_HOME environment variable to point cdxgen to the location of the gems you installed in step one (e.g., -e CDXGEN_GEM_HOME=/tmp/gems). You also must add the flag --lifecycle pre-build to inform cdxgen that the dependencies are already installed and it should not attempt to run bundle install again."}]}
{"messages": [{"role": "user", "content": "I'm running cdxgen on a Mac with an M-series chip and encountering a System.AccessViolationException during a .NET restore. What is happening and how can I resolve it?"}, {"role": "assistant", "content": "The System.AccessViolationException error during a .NET restore on a Mac M-series (arm64 architecture) machine is a known issue. This often occurs when using a container image that is built exclusively for the amd64 architecture, such as the SUSE Linux Enterprise (SLE) based .NET images. The emulation layer that Docker uses to run amd64 images on an arm64 host can sometimes lead to memory corruption issues and crashes like the one you're seeing.\n\nThe recommended workaround is to switch to a container image that has better cross-platform support or a native arm64 variant. The documentation strongly recommends using the Debian-based .NET images, such as ghcr.io/cyclonedx/cdxgen-debian-dotnet8:v11, as they generally offer better performance and compatibility across different architectures. If you must use an amd64-only image, ensure you are explicitly setting the --platform=linux/amd64 flag, but switching to a Debian-based image is the most reliable solution to avoid this specific crash."}]}
{"messages": [{"role": "user", "content": "What is the default all-in-one container image for cdxgen?"}, {"role": "assistant", "content": "The default all-in-one container image is ghcr.io/cyclonedx/cdxgen:master. This image is designed as a comprehensive, general-purpose solution that bundles the latest and greatest tools required for generating SBOMs across many different programming languages. It specifically uses a Node.js 24 runtime and is suitable for a wide range of modern projects, including Java and .NET applications.\n\nThis image follows an opt-in permission model, providing a good balance between powerful functionality and security. For users who do not have specific legacy version requirements and want a single, versatile image that can handle most common development stacks, this master image is the recommended and most convenient starting point."}]}
{"messages": [{"role": "user", "content": "Can you explain the differences between the cdxgen:master, cdxgen-deno:master, and cdxgen-secure:master images?"}, {"role": "assistant", "content": "These three images are all-in-one solutions but differ primarily in their JavaScript runtime and default security posture. The standard ghcr.io/cyclonedx/cdxgen:master uses the Node.js 24 runtime and has a flexible, opt-in permission model. It is the general-purpose default image.\n\nThe ghcr.io/cyclonedx/cdxgen-deno:master image is built using the Deno runtime instead of Node.js. This is significant because it inherently uses Deno's stricter, security-first permissions model by default, where scripts need explicit permission for file, network, or environment access. The ghcr.io/cyclonedx/cdxgen-secure:master image also focuses on security, but it does so while still using the Node.js 24 runtime. It enables the Node.js permissions model by default, offering a more locked-down environment compared to the standard master image. Your choice depends on whether you prefer a Node.js or Deno runtime and the level of security you require out of the box."}]}
{"messages": [{"role": "user", "content": "Which container image should I use for a Dotnet 7 project?"}, {"role": "assistant", "content": "For a .NET 7 project, the specified container image is ghcr.io/cyclonedx/cdxgen-dotnet7:v11. However, the documentation provides an important caveat for this image: it is only available for the amd64 architecture. This is due to limitations in the base SUSE Linux Enterprise (SLE) image it is built upon.\n\nThe documentation advises using this image only as a last resort, specifically if your project fails to restore or build using the more compatible Debian-based dotnet8 image. For most use cases, even with a .NET 7 project, you should first attempt to use the ghcr.io/cyclonedx/cdxgen-debian-dotnet8:v11 image, as it offers better performance and cross-platform compatibility."}]}
{"messages": [{"role": "user", "content": "What is the recommended container image for .NET Core 3.1 applications?"}, {"role": "assistant", "content": "For .NET Core 3.1 applications, the recommended container image is ghcr.io/cyclonedx/cdxgen-debian-dotnet6:v11. This image is versatile and is designed to handle not only .NET 6 but also older versions like .NET Core 2.1, 3.1, and even .NET 5.0.\n\nIt is important to note the comment provided in the documentation: for best results and compatibility, especially when running on non-amd64 architectures like Apple M-series chips, you should invoke the Docker command with the --platform=linux/amd64 flag. This ensures that the container runs using the correct architecture, preventing potential restore failures or runtime errors during the SBOM generation process."}]}
{"messages": [{"role": "user", "content": "I am working with a Python 3.6 project. Which image should I use and are there any limitations?"}, {"role": "assistant", "content": "For a Python 3.6 project, you should use the ghcr.io/cyclonedx/cdxgen-python36:v11 container image. This image is specifically equipped with the necessary environment and tools to handle projects based on this older Python version.\n\nHowever, there is a significant limitation you must be aware of: this image does not support dependency tree construction. This means that the generated SBOM will only contain the direct dependencies listed in your project's requirements.txt or similar files. It will not be able to resolve and include transitive dependencies (i.e., the dependencies of your dependencies). For a complete SBOM with the full dependency graph, you would need to be working with Python 3.9 or newer."}]}
{"messages": [{"role": "user", "content": "Some Ruby container images mention 'automatic Ruby installation'. What does this mean?"}, {"role": "assistant", "content": "The 'automatic Ruby installation' feature, available in images like ghcr.io/cyclonedx/cdxgen-debian-ruby33:v11 and ghcr.io/cyclonedx/cdxgen-debian-ruby34:v11, provides enhanced flexibility for handling different Ruby versions. These containers come with rbenv (a Ruby version management tool) pre-installed. This allows cdxgen to automatically download and install the specific patch version of Ruby your project needs before it starts the SBOM generation process.\n\nTo use this feature, you simply pass a more specific version string to the -t (type) argument in the cdxgen command. For example, instead of just using -t ruby, you could specify -t ruby3.3.1. The container would then use rbenv to install Ruby 3.3.1 on-the-fly, ensuring that the bundle install and dependency analysis are performed with the exact version required by your project's Gemfile.lock. This is incredibly useful for ensuring build reproducibility without needing a separate container image for every single patch release of Ruby."}]}
{"messages": [{"role": "user", "content": "What does it mean that the Rust container image ghcr.io/cyclonedx/cdxgen-debian-rust is a 'rolling version'?"}, {"role": "assistant", "content": "When the documentation describes the Rust container image, ghcr.io/cyclonedx/cdxgen-debian-rust, as a 'rolling version', it means that the image is not pinned to a specific, static version of the Rust toolchain. Instead, this image is periodically updated to include the latest stable version of Rust that has been released.\n\nFor example, the documentation notes that the version is currently 1.87, but this will change over time as new versions of Rust are published. Using this image tag ensures you are always using a very recent version of the Rust compiler and Cargo. While this is convenient for staying up-to-date, it can introduce variability in your builds. If you require a specific, unchanging version of the Rust toolchain for reproducibility, you should look for a version-specific tag or use a sha256 hash to pin the image digest."}]}
{"messages": [{"role": "user", "content": "Are there any preview images available for upcoming technology versions?"}, {"role": "assistant", "content": "Yes, the documentation lists a preview image for .NET 10. The container image tag is ghcr.io/cyclonedx/cdxgen-debian-dotnet10:v11. This image is intended for developers who want to experiment with or prepare for the upcoming release of .NET 10.\n\nAs a preview image, it should not be considered stable for production use. It may contain bugs, incomplete features, or undergo significant changes before the final release of .NET 10. It is provided for early testing and evaluation purposes, allowing teams to check for compatibility and begin adapting their build and SBOM generation processes ahead of the official release."}]}
{"messages": [{"role": "user", "content": "Which languages have cdxgen container images based on Alpine Linux?"}, {"role": "assistant", "content": "Based on the provided table, several languages offer cdxgen container images that are built on Alpine Linux, which is a popular choice for its small size and security focus. These images are typically offered as an alternative to the standard Debian-based images.\n\nThe languages with Alpine variants include Java (versions 21 and 24), .NET (.NET 9), PHP (php 8.4), Node.js (versions 20 and 24), Ruby (Ruby 3.4.4), and Golang (versions 1.23 and 1.24). You can identify these images by the presence of alpine in their tag, such as ghcr.io/cyclonedx/cdxgen-alpine-java21:v11 or ghcr.io/cyclonedx/cdxgen-alpine-node24:v11."}]}
{"messages": [{"role": "user", "content": "I see some .NET container image tags are marked as 'amd64 only'. What does this mean?"}, {"role": "assistant", "content": "The 'amd64 only' designation on certain .NET container images, such as ghcr.io/cyclonedx/cdxgen-dotnet7:v11, means that the image is built exclusively for the amd64 (also known as x86_64) processor architecture. It does not have a native variant for other architectures like arm64 (used by Apple M-series chips and other ARM-based systems).\n\nThis limitation typically stems from the base image provided by the upstream vendor, in this case, SUSE's BCI (Base Container Images). When running an amd64 only image on an arm64 host machine, your container runtime (like Docker Desktop) will use emulation, which can lead to significant performance degradation and, as noted in the troubleshooting section, potential memory-related crashes. The documentation strongly advises using the Debian-based .NET images whenever possible, as they offer better multi-platform support."}]}
{"messages": [{"role": "user", "content": "How do I ensure I'm using a specific, stable version of a cdxgen container image instead of a floating tag like :v11 or :master?"}, {"role": "assistant", "content": "The documentation provides guidance on how to achieve fine-grained control over the image version to ensure build reproducibility. The tags :v11 and :master are floating tags, meaning they can be updated over time to point to a newer image build. While this is convenient for getting updates automatically, it can lead to unexpected changes in your CI/CD pipelines.\n\nTo use a specific, immutable version of an image, you should replace the floating tag with either a specific release version tag (if available) or, for maximum precision, the image's sha256 hash. For example, instead of ghcr.io/cyclonedx/cdxgen-java11-slim:v11, you would use a more specific tag like ghcr.io/cyclonedx/cdxgen-java11-slim:11.0.1 (if such a tag exists) or pin it to its digest like ghcr.io/cyclonedx/cdxgen-java11-slim@sha256:abcdef123.... Using the sha256 hash guarantees you are always pulling and running the exact same image, making your SBOM generation process completely deterministic."}]}
{"messages": [{"role": "user", "content": "What is the purpose of the ghcr.io/cyclonedx/debian-ruby18:master image and why is it special?"}, {"role": "assistant", "content": "The ghcr.io/cyclonedx/debian-ruby18:master image is a special-purpose tool designed solely to handle the bundle install command for extremely old Ruby 1.8.x applications. It is special because Ruby 1.8 requires a very old operating system environment to function correctly, in this case, debian:jessie. This old base image is incompatible with the modern dependencies (like Node.js >= 20) required to run the full cdxgen tool.\n\nTherefore, this image does not contain cdxgen itself. Its only job is to create a compatible environment to install the gems. This is the first step in a mandatory two-step workflow for Ruby 1.8 projects. After using this image to install dependencies, you must use a different, more modern image (like cdxgen-ruby25:v11) to perform the actual SBOM analysis. Additionally, the documentation notes that advanced features like --deep mode are not supported for this legacy workflow."}]}
{"messages": [{"role": "user", "content": "I'm having npm install errors when using the cdxgen-node20:v11 image on my Mac. What should I do?"}, {"role": "assistant", "content": "If you are encountering npm install errors while using the ghcr.io/cyclonedx/cdxgen-node20:v11 image, particularly on a Mac with an M-series (arm64) chip, the issue is likely related to the container's architecture. Some Node.js packages have native components that need to be compiled, and cross-architecture compilation can sometimes fail.\n\nThe troubleshooting guidance in the documentation suggests a specific workaround for this problem. You should add the --platform=linux/amd64 flag to your docker run command. This forces Docker to run the amd64 version of the container image through its emulation layer. While this might result in a slight performance decrease, it often resolves compilation and installation errors by providing a more consistent and expected environment for the Node.js packages."}]}
{"messages": [{"role": "user", "content": "What container image is available for Swift 6.0.x applications?"}, {"role": "assistant", "content": "For generating SBOMs for Swift 6.0.x applications, the documentation specifies the container image ghcr.io/cyclonedx/cdxgen-debian-swift:v11. This image is built on a Debian base and comes pre-packaged with the necessary Swift 6 toolchain.\n\nTo use it, you would run a command similar to the examples for other languages, mounting your project directory into the /app volume of the container and specifying swift as the project type. The example invocation provided is: docker run --rm -e CDXGEN_DEBUG_MODE=verbose -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-debian-swift:v11 -r /app -o /app/bom.json -t swift."}]}
{"messages": [{"role": "user", "content": "Which container images are available for Golang 1.24?"}, {"role": "assistant", "content": "For Golang version 1.24, there are several container images available, offering flexibility in terms of the base operating system and tag specificity. The table lists four primary tags for Go 1.24.\n\nFirst, there are Debian-based images: ghcr.io/cyclonedx/cdxgen-debian-golang124:v11 is a version-specific tag, while ghcr.io/cyclonedx/cdxgen-debian-golang:v11 is a more generic tag that points to the latest stable Go version, which is currently 1.24. Second, there are Alpine-based alternatives for those who prefer smaller images: ghcr.io/cyclonedx/cdxgen-alpine-golang124:v11 and the generic ghcr.io/cyclonedx/cdxgen-alpine-golang:v11. The choice between Debian and Alpine depends on your specific needs for image size and tooling, while the choice between a version-specific tag and a generic one depends on your requirement for build reproducibility."}]}
{"messages": [{"role": "user", "content": "Are there any specific cdxgen images for PHP applications?"}, {"role": "assistant", "content": "Yes, there are custom cdxgen container images specifically for PHP applications. The documentation table lists images for two major versions of PHP. For projects using PHP 8.3, you can use the Debian-based image ghcr.io/cyclonedx/cdxgen-debian-php83:v11.\n\nFor projects on the newer PHP 8.4, you have two options. There is a Debian-based image, ghcr.io/cyclonedx/cdxgen-debian-php84:v11, and also an Alpine-based alternative, ghcr.io/cyclonedx/cdxgen-alpine-php84:v11. The Alpine image is a good choice if you want to minimize the container's footprint. These images come with the appropriate PHP runtime and Composer, enabling cdxgen to restore dependencies and accurately generate an SBOM for your PHP project."}]}
{"messages": [{"role": "user", "content": "What is the recommended way to get version details for libraries from the Global Assembly Cache (GAC) in a .NET project?"}, {"role": "assistant", "content": "The documentation provides a direct method to inspect the contents of the Global Assembly Cache (GAC) within the cdxgen .NET environment. This is particularly useful when dealing with components like System.* or Microsoft.* that might not have explicit version numbers in your project files. You can list all assemblies in the GAC to find their exact version details.\n\nTo do this, you should run the gacutil -l command inside the debian-dotnet6 container. The example command is: docker run --rm -v /tmp:/tmp -v $(pwd):/app:rw -w /app -it ghcr.io/cyclonedx/debian-dotnet6:master gacutil -l. Executing this command will print a list of all installed assemblies in the GAC, including their full name, version, culture, and public key token. This information can then be used to resolve any version discrepancies or to manually verify the dependencies included in your SBOM."}]}