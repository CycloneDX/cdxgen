{"messages": [{"role": "user", "content": "How can I exclude specific project types when generating an SBOM?"}, {"role": "assistant", "content": "Use the --exclude-type argument followed by the project type you want to exclude. You can specify multiple types with multiple --exclude-type arguments. For example: --exclude-type js --exclude-type dotnet."}]}
{"messages": [{"role": "user", "content": "How do I exclude specific files and directories from the SBOM?"}, {"role": "assistant", "content": "Use the --exclude argument followed by a glob pattern that matches the files or directories you want to exclude. Multiple values are allowed. Example: --exclude \"**/quickstarts/**\"."}]}
{"messages": [{"role": "user", "content": "Can I exclude files using brace expansion in the exclude argument?"}, {"role": "assistant", "content": "Yes, brace expansion is supported. For example: --exclude \"**/quickstarts/**\" --exclude \"**/{openshift,kubernetes}-maven-plugin/**\" will exclude both openshift-maven-plugin and kubernetes-maven-plugin directories."}]}
{"messages": [{"role": "user", "content": "How can I filter maven dependencies using environment variables?"}, {"role": "assistant", "content": "You can set the MVN_ARGS environment variable to pass arguments to the maven dependency:tree command. For example, export MVN_ARGS=\"-Dexcludes=:::*-SNAPSHOT\" will exclude snapshot dependencies."}]}
{"messages": [{"role": "user", "content": "How can I filter gradle dependencies using environment variables?"}, {"role": "assistant", "content": "You can set the GRADLE_ARGS environment variable to pass arguments to the Gradle command. For example, export GRADLE_ARGS=\"--configuration runtimeClasspath\"."}]}
{"messages": [{"role": "user", "content": "How do I generate an SBOM containing only required components?"}, {"role": "assistant", "content": "Use the --required-only flag. For example, cdxgen -t java -o /tmp/bom.json -p --required-only will only store components with the scope attribute set to required."}]}
{"messages": [{"role": "user", "content": "What languages support the --required-only filter?"}, {"role": "assistant", "content": "The --required-only filter is supported for Java (with Maven), Node.js, Go, and Php."}]}
{"messages": [{"role": "user", "content": "How can I filter components based on their purl or properties value?"}, {"role": "assistant", "content": "Use the --filter argument followed by the string you want to filter. This will filter components containing that string in the purl or components.properties.value. Filters are case-insensitive. Example: --filter org.springframework."}]}
{"messages": [{"role": "user", "content": "How do I filter components belonging to a specific Gradle profile?"}, {"role": "assistant", "content": "You can use the --filter argument with the profile name. For example, cdxgen -t gradle -o /tmp/bom.json -p --filter debugAndroidTestCompileClasspath --filter debugRuntimeClasspath."}]}
{"messages": [{"role": "user", "content": "How do I include only \"first party\" components in the SBOM?"}, {"role": "assistant", "content": "Use the --only argument followed by the string that identifies your first-party components in their purl. For example, cdxgen -t java -o /tmp/bom.json -p --only org.springframework."}]}
{"messages": [{"role": "user", "content": "How can I filter components based on the confidence of their purl identity?"}, {"role": "assistant", "content": "Use the --min-confidence argument with a value between 0 and 1. This will filter out components with a lower confidence score. Example: cdxgen -t c . --min-confidence 0.1."}]}
{"messages": [{"role": "user", "content": "What happens if I filter out zero confidence components?"}, {"role": "assistant", "content": "Filtering out zero confidence components with --min-confidence can be useful, but should be done with caution since it might remove valid components identified with low confidence."}]}
{"messages": [{"role": "user", "content": "How can I limit the analysis techniques used by cdxgen?"}, {"role": "assistant", "content": "Use the --technique argument to specify the allowed techniques. Example: cdxgen -t c . --technique manifest-analysis --technique source-code-analysis."}]}
{"messages": [{"role": "user", "content": "What are the supported analysis techniques?"}, {"role": "assistant", "content": "The supported analysis techniques are: auto, source-code-analysis, binary-analysis, manifest-analysis, hash-comparison, instrumentation, and filename."}]}
{"messages": [{"role": "user", "content": "How can I disable the automatic compositions feature?"}, {"role": "assistant", "content": "Pass the --no-auto-compositions argument to disable automatic setting of the compositions.aggregate property."}]}
{"messages": [{"role": "user", "content": "What file formats are supported for cdxgen configuration files?"}, {"role": "assistant", "content": "cdxgen supports configuration files in JSON (.cdxgenrc, .cdxgen.json) and YAML (.cdxgen.yml, .cdxgen.yaml) formats."}]}
{"messages": [{"role": "user", "content": "How can I pass command-line arguments as environment variables?"}, {"role": "assistant", "content": "All command-line arguments can be passed as environment variables using the CDXGEN_ prefix. For example, export CDXGEN_TYPE=java and export CDXGEN_PROJECT_NAME=foo."}]}
{"messages": [{"role": "user", "content": "What is the order of precedence for config values?"}, {"role": "assistant", "content": "The order of precedence is: Command-line arguments > Environment variables > Configuration files (JSON first, followed by YAML)."}]}
{"messages": [{"role": "user", "content": "What is Evinse and SaaSBOM?"}, {"role": "assistant", "content": "Evinse (Evinse Verification Is Nearly SBOM Evidence) is a new command within cdxgen to generate component evidence and SaaSBOM (Software as a Service Bill Of Materials) for supported languages. It is powered by atom. cdxgen accepts a new argument called --evidence to generate a comprehensive SBOM."}]}
{"messages": [{"role": "user", "content": "What are the prerequisites for using Evinse?"}, {"role": "assistant", "content": "The prerequisites are: Java > 21 installed, application source code, and an input SBOM in CycloneDX >1.5 format. Use cdxgen to generate the initial SBOM."}]}
{"messages": [{"role": "user", "content": "How do I generate an SBOM with evidence for a Java project using Evinse?"}, {"role": "assistant", "content": "Use the command evinse -i bom.json -o bom.evinse.json <path to the application>. This will generate an SBOM with occurrence evidence by creating usages slices."}]}
{"messages": [{"role": "user", "content": "How do I generate callstack evidence using Evinse?"}, {"role": "assistant", "content": "To generate callstack evidence, pass either --with-data-flow or --with-reachables to the evinse command."}]}
{"messages": [{"role": "user", "content": "What is reachability-based call stack evidence generation?"}, {"role": "assistant", "content": "Reachability refers to data flows that originate from entry points (sources) ending at a sink (which are invocations to external libraries). atom supports reachability-based evidence generation for Java, JavaScript, and TypeScript applications."}]}
{"messages": [{"role": "user", "content": "What are the prerequisites for reachability-based call stack evidence generation?"}, {"role": "assistant", "content": "The input SBOM must be generated with cdxgen and in deep mode (only for java, jars, python type) and must be placed within the application directory."}]}
{"messages": [{"role": "user", "content": "How to generate a deep SBOM for python?", "role": "assistant", "content": "shell\ncd <path to the application>\ncdxgen -t python --deep -o bom.json --evidence .\n"}]}
{"messages": [{"role": "user", "content": "How do I generate call stack evidence for Javascript projects?", "role": "assistant", "content": "shell\ncd <path to the application>\ncdxgen -t js -o bom.json .\nevinse -i bom.json -o bom.evinse.json -l js --with-reachables .\nDeep mode is optional for javascript"}]}
{"messages": [{"role": "user", "content": "How can I improve Evinse performance by caching slices?", "role": "assistant", "content": "You can cache the generated usages and data-flow slices file along with the BOM file. Use arguments --usages-slices-file, and --data-flow-slices-file to point to existing cached slices."}]}
{"messages": [{"role": "user", "content": "How do I specify the language when using Evinse?"}, {"role": "assistant", "content": "Use the -l or --language argument followed by the language name. For example: -l javascript."}]}
{"messages": [{"role": "user", "content": "How can I generate SBOM from Maven or Gradle cache?", "role": "assistant", "content": "cdxgen can generate SBOMs from maven and gradle cache directories. A bonus is that the resulting SBOM would have a property called Namespaces with a list of class names belonging to each jar."}]}
{"messages": [{"role": "user", "content": "How do I improve the performance of Evinse after SBOM is generated from cache directories?"}, {"role": "assistant", "content": "Use the argument --skip-maven-collector to use the data cached in the SQLite database from previous runs, for re-runs."}]}
{"messages": [{"role": "user", "content": "What if a java project uses both Maven and Gradle? How does cdxgen decide which one to use?"}, {"role": "assistant", "content": "Under default settings, Maven is selected for SBOM generation if a project uses both Maven and Gradle. To force cdxgen to use Gradle, use the argument -t gradle."}]}
{"messages": [{"role": "user", "content": "How can I generate container SBOM on Windows?"}, {"role": "assistant", "content": "Ensure cdxgen-plugins-bin > 1.4.0 is installed (npm install -g @cyclonedx/cdxgen-plugins-bin), run Docker for Desktop as an administrator with 'Exposing daemon on TCP without TLS' turned on, and invoke cdxgen with -t docker from a Powershell terminal running as administrator."}]}
{"messages": [{"role": "user", "content": "What does --no-recurse do?"}, {"role": "assistant", "content": "Prevents cdxgen from recursively scanning subdirectories."}]}
{"messages": [{"role": "user", "content": "For large Java projects, how can I run atom separately for slicing?"}, {"role": "assistant", "content": "Download the latest atom.zip release then follow the steps in the documentation to run atom in java mode, specifying the slice output file and then providing this file when running cdxgen."}]}
{"messages": [{"role": "user", "content": "Where is the SQLite cache database used by Evinse stored, and how can I remove it?"}, {"role": "assistant", "content": "The SQLite cache database, .atomdb, is stored by default in the user's home directory under .local/share/.atomdb (Linux), AppData/Local/.atomdb (Windows), or Library/Application Support/.atomdb (Mac). You can delete this file to recreate it. The location can be overridden by setting the ATOM_DB environment variable."}]}
{"messages": [{"role": "user", "content": "How can I customize the metadata authors in the BOM?"}, {"role": "assistant", "content": "Use the --author argument to override the author name. Use double quotes when the name includes spaces. Multiple values are allowed. Example: cdxgen --author \"OWASP Foundation\" --author \"Apache Foundation\" -t java ..."}]}
{"messages": [{"role": "user", "content": "How can I generate bash/zsh command completions for cdxgen and evinse?"}, {"role": "assistant", "content": "Run the commands such as cdxgen completion >> ~/.zshrc or evinse completion >> ~/.bashrc to generate the completions."}]}
{"messages": [{"role": "user", "content": "What is the purpose of BOM profiles?"}, {"role": "assistant", "content": "BOM profiles allow cdxgen to generate a BOM that is optimized for a specific use case or purpose. The default is generic."}]}
{"messages": [{"role": "user", "content": "What are some available BOM profiles, and what configurations do they enable?"}, {"role": "assistant", "content": "Some available profiles are: appsec (vulnerability management - enables deep mode), research (security research - enables deep and evidence mode), operational (generate OBOM - projectType set to os), license-compliance (fetch license data - set FETCH_LICENSE environment variable)."}]}
{"messages": [{"role": "user", "content": "How does cdxgen handle BOM lifecycles?"}, {"role": "assistant", "content": "By default, cdxgen attempts to generate a BOM for the build lifecycle phase for applications and post-build phase for container images. Using the argument --no-install-deps it is possible to generate pre-build BOM for certain languages. Or explicitly pass --lifecycle post-build to generate an SBOM for android, dotnet, and go binaries."}]}
{"messages": [{"role": "user", "content": "How do I handle legacy dotnet projects?"}, {"role": "assistant", "content": "To obtain transitive dependencies and a complete dependency tree for dotnet projects, dotnet restore command needs to be executed. If the project requires a specific SDK version, use a custom container image."}]}
{"messages": [{"role": "user", "content": "How do I handle legacy Java projects?"}, {"role": "assistant", "content": "For legacy Java projects, use the custom images ghcr.io/cyclonedx/cdxgen-java11:v11 (Java 11) or ghcr.io/cyclonedx/cdxgen-java17:v11 (Java 17) or use the CLI arguments such as cdxgen -t java11 or cdxgen -t java17."}]}
{"messages": [{"role": "user", "content": "What is Nydus and how does it relate to cdxgen?"}, {"role": "assistant", "content": "Nydus is a next-generation container image format that improves container launch speed and efficiency. cdxgen container images are available in nydus format with the -nydus suffix."}]}
{"messages": [{"role": "user", "content": "How do I export the BOM as a protobuf binary?"}, {"role": "assistant", "content": "Pass the argument --export-proto to serialize and export the BOM as a protobuf binary. Only the spec version 1.5 is supported in this mode. --export-proto --proto-bin-file bom.cdx.bin"}]}
{"messages": [{"role": "user", "content": "How can I include git metadata and build tool versions in the SBOM?"}, {"role": "assistant", "content": "Pass the argument --include-formulation to collect this information under the formulation section."}]}
{"messages": [{"role": "user", "content": "What is CBOM and how do I generate it?"}, {"role": "assistant", "content": "CBOM (Cryptography Bill of Materials) provides information about the cryptographic components used in a software project. Use the cbom alias to generate a CBOM for Java and Python projects. Example: cbom -t java."}]}
{"messages": [{"role": "user", "content": "What custom container images are available for cdxgen?"}, {"role": "assistant", "content": "Several custom container images are available with specific language versions and build tools. Refer to the table in the documentation for a list of available images and their tags."}]}