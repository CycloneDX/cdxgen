# Base-image
FROM registry.suse.com/bci/nodejs:20 AS base

ARG GCC_VERSION=13

ENV NVM_DIR="/root/.nvm" \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8 \
    npm_config_python=/usr/bin/python3.11
ENV PATH=${PATH}:/usr/local/bin:
RUN set -e; \
    ARCH_NAME="$(rpm --eval '%{_arch}')"; \
    url=; \
    case "${ARCH_NAME##*-}" in \
        'x86_64') \
            GOBIN_VERSION='amd64'; \
            ;; \
        'aarch64') \
            GOBIN_VERSION='arm64'; \
            ;; \
        *) echo >&2 "error: unsupported architecture: '$ARCH_NAME'"; exit 1 ;; \
    esac \
    && zypper refresh && zypper --non-interactive update && zypper --non-interactive install -l --no-recommends \
        gcc${GCC_VERSION} gcc${GCC_VERSION}-c++ \
        bzip2 git-core wget zip unzip make gawk python311 python311-pip python311-devel nodejs20-devel \
    && update-alternatives --install /usr/bin/python python /usr/bin/python3.11 10 \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 10 \
    && update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-${GCC_VERSION} 10 \
    && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_VERSION} 10 \
    && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${GCC_VERSION} 10 \
    && npm install -g node-gyp corepack \
    && npx node-gyp install \
    && node -v \
    && npm -v \
    && python --version \
    && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash \
    && source ${NVMDIR}/nvm.sh \
    && curl -L --output /usr/bin/bazel https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-${GOBIN_VERSION} \
    && chmod +x /usr/bin/bazel \
    && bazel --version \
    && zypper clean -a

CMD ["/bin/bash"]



# cdxgen-image
FROM base AS cdxgen

LABEL maintainer="CycloneDX" \
      org.opencontainers.image.authors="Team AppThreat <cloud@appthreat.com>" \
      org.opencontainers.image.source="https://github.com/CycloneDX/cdxgen" \
      org.opencontainers.image.url="https://github.com/CycloneDX/cdxgen" \
      org.opencontainers.image.version="rolling" \
      org.opencontainers.image.vendor="CycloneDX" \
      org.opencontainers.image.licenses="Apache-2.0" \
      org.opencontainers.image.title="cdxgen" \
      org.opencontainers.image.description="Rolling image with cdxgen SBOM generator for Node.js 20 apps" \
      org.opencontainers.docker.cmd="docker run --rm -v /tmp:/tmp -p 9090:9090 -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-node20:v11 -r /app --server"

ENV CDXGEN_IN_CONTAINER=true \
    NODE_COMPILE_CACHE="/opt/cdxgen-node-cache" \
    ATOM_CMD=/usr/local/bin/atom \
    PYTHONPATH=/opt/pypi
ENV PATH=${PATH}:/usr/local/bin:${PYTHONPATH}/bin:/opt/cdxgen/node_modules/.bin:

COPY . /opt/cdxgen

RUN set -e; \
    ARCH_NAME="$(rpm --eval '%{_arch}')"; \
    case "${ARCH_NAME##*-}" in \
        'x86_64') \
            ATOM_ARCH_SUFFIX='amd64'; \
            ;; \
        'arm64') \
            ATOM_ARCH_SUFFIX='arm64'; \
            ;; \
        'aarch64') \
            ATOM_ARCH_SUFFIX='arm64'; \
            ;; \
        *) echo >&2 "error: unsupported architecture: '$ARCH_NAME'"; exit 1 ;; \
    esac \
    && cd /opt/cdxgen && corepack enable && corepack pnpm install --config.strict-dep-builds=true --prod --package-import-method copy --frozen-lockfile && corepack pnpm cache delete \
    && curl -L https://github.com/AppThreat/atom/releases/latest/download/atom-${ATOM_ARCH_SUFFIX} -o /usr/local/bin/atom \
    && chmod +x /usr/local/bin/atom \
    && /usr/local/bin/atom --help \
    && npm install -g --production @appthreat/atom-parsetools@1.0.3 \
    && mkdir -p ${NODE_COMPILE_CACHE} \
    && node /opt/cdxgen/bin/cdxgen.js --help \
    && pip install --upgrade --no-cache-dir atom-tools --target /opt/pypi \
    && atom-tools --help \
    && rm -rf /root/.cache/node \
    && chmod a-w -R /opt
WORKDIR /app
ENTRYPOINT ["node", "/opt/cdxgen/bin/cdxgen.js"]
