# Base-image
FROM opensuse/tumbleweed:latest@sha256:30b149b49df7cdbadaf60bcbb870a734e7df5cf1b990b17ea914fce50e0562e7 AS base

ARG DOTNET_SDK_VERSION=9.0.305
ARG DOTNETCLI_URL=https://dotnetcli.azureedge.net
ARG GITHUB_RAW_URL=https://raw.githubusercontent.com
ARG GITHUB_URL=https://github.com
ARG GRADLE_9
ARG GRADLE_VERSION=${GRADLE_9}
ARG MAVEN_4
ARG MAVEN_VERSION=${MAVEN_4}
ARG NODE_25
ARG NODE_VERSION=${NODE_25}
ARG NODEJS_DIST_URL
ARG NPM_REPO
ARG NVM
ARG NVM_VERSION=${NVM}
ARG OPENSUSE_CODECS_REPO
ARG OPENSUSE_REPO
ARG PIP_CONFIG
ARG SBT_VERSION=1.11.6
ARG SCALA_VERSION=3.7.3
ARG SDKMAN_URL=https://api.sdkman.io/2

ENV CC=gcc \
    DOTNET_CLI_TELEMETRY_OPTOUT=1 \
    DOTNET_GENERATE_ASPNET_CERTIFICATE=false \
    DOTNET_NOLOGO=true \
    DOTNET_ROOT=/usr/share/dotnet \
    DOTNET_RUNNING_IN_CONTAINER=true \
    DOTNET_SDK_VERSION=$DOTNET_SDK_VERSION \
    DOTNET_USE_POLLING_FILE_WATCHER=false \
    GRADLE_HOME="/opt/gradle/${GRADLE_VERSION}" \
    GRADLE_VERSION=$GRADLE_VERSION \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8 \
    MAVEN_HOME="/opt/maven/${MAVEN_VERSION}" \
    MAVEN_VERSION=$MAVEN_VERSION \
    NUGET_XMLDOC_MODE=skip \
    NVM_DIR="/root/.nvm" \
    PYTHONPATH=/opt/pypi \
    SBT_HOME="/opt/sbt/${SBT_VERSION}" \
    SBT_VERSION=$SBT_VERSION \
    SCALA_HOME="/opt/scala/${SCALA_VERSION}" \
    SCALA_VERSION=$SCALA_VERSION
ENV PATH=${PATH}:/usr/local/bin:${NVM_DIR}/versions/node/v${NODE_VERSION}/bin:${MAVEN_HOME}/bin:${GRADLE_HOME}/bin:${SCALA_HOME}/bin:${SBT_HOME}/bin:${PYTHONPATH}/bin:/usr/share/dotnet

RUN set -e; \
    if [ -n "$NODEJS_DIST_URL" ]; then \
      export "NVM_NODEJS_ORG_MIRROR=$NODEJS_DIST_URL"; \
      printf "disturl=$NODEJS_DIST_URL\n" >> $HOME/.npmrc; \
    fi; \
    if [ -n "$NPM_REPO" ]; then \
      export "COREPACK_NPM_REGISTRY=$NPM_REPO"; \
      printf "registry=$NPM_REPO\n@jsr:registry=$NPM_REPO\n" >> $HOME/.npmrc; \
    fi; \
    if [ -n "$OPENSUSE_REPO" ]; then \
      sed -i "s|http://codecs.opensuse.org|$OPENSUSE_CODECS_REPO|g" /etc/zypp/repos.d/*; \
      sed -i "s|http://download.opensuse.org|$OPENSUSE_REPO|g" /etc/zypp/repos.d/*; \
      zypper --no-gpg-checks refresh; \
    fi; \
    if [ -n "$PIP_CONFIG" ]; then \
      mkdir $HOME/.pip/; \
      printf "$PIP_CONFIG" > $HOME/.pip/pip.conf; \
    fi; \
    ARCH_NAME="$(rpm --eval '%{_arch}')"; \
    case "${ARCH_NAME##*-}" in \
      'amd64' | 'x86_64') \
        OS_ARCH_SUFFIX='x64'; \
        GOBIN_VERSION='amd64'; \
        ;; \
      'aarch64' | 'arm64') \
        OS_ARCH_SUFFIX='arm64'; \
        GOBIN_VERSION='arm64'; \
        ;; \
      *) \
        echo >&2 "error: unsupported architecture: '$ARCH_NAME'"; \
        exit 1 \
        ;; \
    esac \
 && zypper refresh \
 && zypper \
      --non-interactive \
        dup \
 && zypper \
      --non-interactive \
        install \
        -l \
        --no-recommends \
          bzip2 \
          cargo1.88 \
          findutils \
          gawk \
          gcc15 \
          gcc15-c++ \
          gcc15-fortran \
          git-core \
          java-25-openjdk-devel \
          libicu-devel \
          make \
          python313 \
          python313-devel \
          python313-pip \
          rust1.88 \
          unzip \
          wget \
          zip \
 && update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-15 10 \
 && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-15 10 \
 && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-15 10 \
 && update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-15 10 \
 && update-alternatives --install /usr/bin/python python /usr/bin/python3.13 10 \
 && curl -L "https://get.sdkman.io" | bash \
 && SDKMAN_BROKER_API="$SDKMAN_URL/broker" \
 && SDKMAN_CANDIDATES_API="$SDKMAN_URL" \
 && printf "sdkman_auto_answer=true\nsdkman_selfupdate_feature=false\nsdkman_auto_env=true\nsdkman_curl_connect_timeout=20\nsdkman_curl_max_time=0" \
      >> $HOME/.sdkman/etc/config \
 && source "$HOME/.sdkman/bin/sdkman-init.sh" \
 && sdk install maven $MAVEN_VERSION \
 && sdk install gradle $GRADLE_VERSION \
 && sdk install scala $SCALA_VERSION \
 && sdk install sbt $SBT_VERSION \
 && sdk offline enable \
 && mv /root/.sdkman/candidates/* /opt/ \
 && rm -rf /root/.sdkman \
 && curl -L --output dotnet.tar.gz \
      $DOTNETCLI_URL/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-sdk-$DOTNET_SDK_VERSION-linux-${OS_ARCH_SUFFIX}.tar.gz \
 && mkdir -p /usr/share/dotnet \
 && tar -xf dotnet.tar.gz -C /usr/share/dotnet \
 && rm dotnet.tar.gz \
 && dotnet --list-sdks \
 && mkdir ${PYTHONPATH} \
 && python -m pip install \
      --no-cache-dir \
      --target ${PYTHONPATH} \
      --upgrade \
        atom-tools \
        blint \
        custom-json-diff \
        pipenv \
        poetry \
        uv \
 && curl -o- $GITHUB_RAW_URL/nvm-sh/nvm/$NVM_VERSION/install.sh | bash \
 && source ${NVM_DIR}/nvm.sh \
 && nvm install ${NODE_VERSION} \
 && npm install -g \
      corepack \
      node-gyp \
 && npx node-gyp install \
 && node -v \
 && npm -v \
 && npm install -g corepack \
 && poetry --version \
 && pipenv --version \
 && blint --help \
 && gcc --version \
 && curl -L --output /usr/bin/bazel \
      $GITHUB_URL/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-${GOBIN_VERSION} \
 && chmod +x /usr/bin/bazel \
 && BAZELISK_BASE_URL=$GITHUB_URL/bazelbuild/bazel/releases/download bazel --version \
 && rm -rf $HOME/.npmrc $HOME/.pip \
 && zypper clean -a \
 && if [ -n "$OPENSUSE_REPO" ]; then \
      sed -i "s|$OPENSUSE_CODECS_REPO|http://codecs.opensuse.org|g" /etc/zypp/repos.d/*; \
      sed -i "s|$OPENSUSE_REPO|http://download.opensuse.org|g" /etc/zypp/repos.d/*; \
    fi

CMD ["/bin/bash"]



# cdxgen-image
FROM base AS cdxgen

ENV CDXGEN_DEBUG_MODE=debug \
    CDXGEN_IN_CONTAINER=true \
    NODE_COMPILE_CACHE="/opt/cdxgen-node-cache" \
    PATH=${PATH}:/opt/cdxgen/node_modules/.bin \
    SCAN_DEBUG_MODE=debug

COPY . /opt/cdxgen

RUN set -e; \
    if [ -n "$NODEJS_DIST_URL" ]; then \
      export "NVM_NODEJS_ORG_MIRROR=$NODEJS_DIST_URL"; \
      printf "disturl=$NODEJS_DIST_URL\n" >> $HOME/.npmrc; \
    fi; \
    if [ -n "$NPM_REPO" ]; then \
      export "COREPACK_NPM_REGISTRY=$NPM_REPO"; \
      printf "registry=$NPM_REPO\n@jsr:registry=$NPM_REPO\n" >> $HOME/.npmrc; \
    fi; \
    if [ -n "$OPENSUSE_REPO" ]; then \
      sed -i "s|http://codecs.opensuse.org|$OPENSUSE_CODECS_REPO|g" /etc/zypp/repos.d/*; \
      sed -i "s|http://download.opensuse.org|$OPENSUSE_REPO|g" /etc/zypp/repos.d/*; \
      zypper --no-gpg-checks refresh; \
    fi; \
    if [ -n "$PIP_CONFIG" ]; then \
      mkdir $HOME/.pip/; \
      printf "$PIP_CONFIG" > $HOME/.pip/pip.conf; \
    fi; \
    cd /opt/cdxgen \
 && corepack enable \
 && corepack pnpm install:prod \
 && corepack pnpm cache delete \
 && mkdir -p ${NODE_COMPILE_CACHE} \
 && node /opt/cdxgen/bin/cdxgen.js --help \
 && rm -rf $HOME/.npmrc $HOME/.pip /root/.cache/node \
 && zypper clean -a \
 && chmod a-w -R /opt \
 && if [ -n "$OPENSUSE_REPO" ]; then \
      sed -i "s|$OPENSUSE_CODECS_REPO|http://codecs.opensuse.org|g" /etc/zypp/repos.d/*; \
      sed -i "s|$OPENSUSE_REPO|http://download.opensuse.org|g" /etc/zypp/repos.d/*; \
    fi

WORKDIR /app

ENTRYPOINT ["node", "/opt/cdxgen/bin/cdxgen.js"]
