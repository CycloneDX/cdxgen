# Base-image
FROM mcr.microsoft.com/dotnet/sdk:6.0-bookworm-slim AS base

ARG NODE_VERSION=22.16.0

ENV DOTNET_GENERATE_ASPNET_CERTIFICATE=false \
    DOTNET_NOLOGO=true \
    DOTNET_USE_POLLING_FILE_WATCHER=false \
    NUGET_XMLDOC_MODE=skip \
    DOTNET_RUNNING_IN_CONTAINER=true \
    DOTNET_CLI_TELEMETRY_OPTOUT=1 \
    NVM_DIR="/root/.nvm"
ENV PATH=${PATH}:${NVM_DIR}/versions/node/v${NODE_VERSION}/bin:/usr/local/bin:/root/.local/bin

COPY ci/images/debian/install.sh /tmp/

RUN apt-get update && apt-get install -qq -y --no-install-recommends gcc g++ curl bash bzip2 git-core zip unzip make gawk \
    && apt-get install -qq -y build-essential mono-devel mono-xbuild nuget python3 python3-pip python3-dev locales \
    && chmod +x /tmp/install.sh \
    && /tmp/install.sh && rm /tmp/install.sh \
    && node -v \
    && npm -v \
    && rm -rf /usr/lib/nuget \
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
    && rm -rf /var/lib/apt/lists/*
COPY ci/images/nuget /usr/lib/nuget
RUN mv /usr/lib/nuget/nuget.exe /usr/lib/nuget/NuGet.exe \
    && dotnet --list-sdks \
    && nuget help
CMD ["/bin/bash"]



# cdxgen-image
FROM base AS cdxgen

LABEL maintainer="CycloneDX" \
      org.opencontainers.image.authors="Team AppThreat <cloud@appthreat.com>" \
      org.opencontainers.image.source="https://github.com/CycloneDX/cdxgen" \
      org.opencontainers.image.url="https://github.com/CycloneDX/cdxgen" \
      org.opencontainers.image.version="rolling" \
      org.opencontainers.image.vendor="CycloneDX" \
      org.opencontainers.image.licenses="Apache-2.0" \
      org.opencontainers.image.title="cdxgen" \
      org.opencontainers.image.description="Rolling image with cdxgen SBOM generator for dotnet 6 apps" \
      org.opencontainers.docker.cmd="docker run --rm -v /tmp:/tmp -p 9090:9090 -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-debian-dotnet6:v11 -r /app --server"

ENV CDXGEN_IN_CONTAINER=true \
    NODE_COMPILE_CACHE="/opt/cdxgen-node-cache" \
    PYTHONPATH=/opt/pypi \
    DOSAI_CMD=/usr/local/bin/dosai
ENV PATH=${PATH}:/usr/local/bin:${PYTHONPATH}/bin:/opt/cdxgen/node_modules/.bin

COPY . /opt/cdxgen

RUN set -e; \
    ARCH_NAME="$(dpkg --print-architecture)"; \
    url=; \
    case "${ARCH_NAME##*-}" in \
        'amd64') \
            DOSAI_ARCH_SUFFIX='-full'; \
            ;; \
        'x86_64') \
            DOSAI_ARCH_SUFFIX='-full'; \
            ;; \
        'arm64') \
            DOSAI_ARCH_SUFFIX='-linux-arm64-full'; \
            ;; \
        'aarch64') \
            DOSAI_ARCH_SUFFIX='-linux-arm64-full'; \
            ;; \
        *) echo >&2 "error: unsupported architecture: '$ARCH_NAME'"; exit 1 ;; \
    esac \
    && cd /opt/cdxgen && corepack enable && corepack pnpm install --config.strict-dep-builds=true --prod --package-import-method copy --frozen-lockfile && corepack pnpm cache delete \
    && curl -L https://github.com/owasp-dep-scan/dosai/releases/latest/download/Dosai${DOSAI_ARCH_SUFFIX} -o /usr/local/bin/dosai \
    && chmod +x /usr/local/bin/dosai \
    && dosai --help \
    && mkdir -p ${NODE_COMPILE_CACHE} \
    && node /opt/cdxgen/bin/cdxgen.js --help \
    && pip install --upgrade --no-cache-dir blint atom-tools --target ${PYTHONPATH} \
    && rm -rf /root/.cache/node \
    && chmod a-w -R /opt
WORKDIR /app
ENTRYPOINT ["node", "/opt/cdxgen/bin/cdxgen.js"]
