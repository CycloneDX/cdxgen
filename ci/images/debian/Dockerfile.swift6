# Base-image
FROM debian:12 AS base

# renovate: datasource=docker depName=node
ARG NODE_VERSION=22.17.0
ARG SWIFT_BRANCH=swift-6.1.2-release
ARG SWIFT_PLATFORM=debian12
ARG SWIFT_SIGNING_KEY=52BB7E3DE28A71BE22EC05FFEF80A866B47A981F
ARG SWIFT_VERSION=swift-6.1.2-RELEASE
ARG SWIFT_WEBROOT=https://download.swift.org

ENV NVM_DIR="/root/.nvm" \
    PYTHONPATH=/opt/pypi \
    SWIFT_BRANCH=$SWIFT_BRANCH \
    SWIFT_PLATFORM=$SWIFT_PLATFORM \
    SWIFT_SIGNING_KEY=$SWIFT_SIGNING_KEY \
    SWIFT_VERSION=$SWIFT_VERSION \
    SWIFT_WEBROOT=$SWIFT_WEBROOT
ENV PATH=${PATH}:/usr/local/bin:/root/.local/bin:${NVM_DIR}/versions/node/v${NODE_VERSION}/bin

COPY ci/images/debian/install.sh /tmp/

RUN set -e; \
    ARCH_NAME="$(dpkg --print-architecture)"; \
    case "${ARCH_NAME##*-}" in \
      'amd64' | 'x86_64') \
        OS_ARCH_SUFFIX=''; \
        ;; \
      'aarch64' | 'arm64') \
        OS_ARCH_SUFFIX='-aarch64'; \
        ;; \
      *) \
        echo >&2 "error: unsupported architecture: '$ARCH_NAME'"; \
        exit 1 \
        ;; \
    esac; \
    export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \
 && apt-get -q update \
 && apt-get -q install -y \
        bash \
        binutils-gold \
        build-essential \
        bzip2 \
        curl \
        gawk \
        gcc \
        git \
        git-core \
        gpg \
        libcurl4-openssl-dev \
        libedit-dev \
        libicu-dev \
        libncurses-dev \
        libpython3-dev \
        libsqlite3-dev \
        libxml2-dev \
        locales \
        make \
        pkg-config \
        python3 \
        python3-dev \
        python3-pip \
        tzdata \
        unzip \
        uuid-dev \
        zip \
 && SWIFT_WEBDIR="$SWIFT_WEBROOT/$SWIFT_BRANCH/$(echo $SWIFT_PLATFORM | tr -d .)$OS_ARCH_SUFFIX" \
 && SWIFT_BIN_URL="$SWIFT_WEBDIR/$SWIFT_VERSION/$SWIFT_VERSION-$SWIFT_PLATFORM$OS_ARCH_SUFFIX.tar.gz" \
 && SWIFT_SIG_URL="$SWIFT_BIN_URL.sig" \
 && export GNUPGHOME="$(mktemp -d)" \
 && curl -fsSL \
      "$SWIFT_BIN_URL" -o swift.tar.gz \
      "$SWIFT_SIG_URL" -o swift.tar.gz.sig \
 && gpg --batch --quiet --keyserver keyserver.ubuntu.com --recv-keys "$SWIFT_SIGNING_KEY" \
 && gpg --batch --verify swift.tar.gz.sig swift.tar.gz \
 && tar -xzf swift.tar.gz --directory / --strip-components=1 \
 && chmod -R o+r /usr/lib/swift \
 && rm -rf "$GNUPGHOME" swift.tar.gz.sig swift.tar.gz \
 && swift --version \
 && chmod +x /tmp/install.sh \
 && /tmp/install.sh \
 && rm /tmp/install.sh \
 && pip install \
      --no-cache-dir \
      --target ${PYTHONPATH} \
      --upgrade \
        atom-tools \
        blint \
 && node -v \
 && npm -v \
 && apt-get purge -y --auto-remove \
      -o APT::AutoRemove::RecommendsImportant=false \
 && rm -rf /var/lib/apt/lists/*

CMD ["/bin/bash"]



# cdxgen-image
FROM base AS cdxgen

ARG VERSION=master

LABEL maintainer="CycloneDX" \
      org.opencontainers.docker.cmd="docker run --rm -v /tmp:/tmp -p 9090:9090 -v $(pwd):/app:rw -t $TAG -r /app --server" \
      org.opencontainers.image.authors="Team AppThreat <cloud@appthreat.com>" \
      org.opencontainers.image.description="Image with cdxgen SBOM generator for $LANGUAGE apps" \
      org.opencontainers.image.licenses="Apache-2.0" \
      org.opencontainers.image.source="https://github.com/CycloneDX/cdxgen" \
      org.opencontainers.image.title="cdxgen" \
      org.opencontainers.image.url="https://github.com/CycloneDX/cdxgen" \
      org.opencontainers.image.vendor="CycloneDX" \
      org.opencontainers.image.version="$VERSION"

ENV CDXGEN_IN_CONTAINER=true \
    NODE_COMPILE_CACHE="/opt/cdxgen-node-cache" \
    PATH=${PATH}:${PYTHONPATH}/bin:/opt/cdxgen/node_modules/.bin

COPY . /opt/cdxgen

RUN set -e; \
    cd /opt/cdxgen \
 && corepack enable \
 && corepack pnpm install \
      --config.strict-dep-builds=true \
      --frozen-lockfile \
      --package-import-method copy \
      --prod \
 && corepack pnpm cache delete \
 && mkdir -p ${NODE_COMPILE_CACHE} \
 && node /opt/cdxgen/bin/cdxgen.js --help \
 && rm -rf .npmrc /root/.cache/node \
 && chmod a-w -R /opt

WORKDIR /app

ENTRYPOINT ["node", "/opt/cdxgen/bin/cdxgen.js"]
