# Base-image
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS base

# renovate: datasource=docker depName=node
ARG NODE_VERSION=24.7.0
ARG NPM_REPO
ARG NUGET_REPO
ARG PIP_CONFIG

ENV DOTNET_CLI_TELEMETRY_OPTOUT=1 \
    DOTNET_GENERATE_ASPNET_CERTIFICATE=false \
    DOTNET_NOLOGO=true \
    DOTNET_RUNNING_IN_CONTAINER=true \
    DOTNET_USE_POLLING_FILE_WATCHER=false \
    NUGET_XMLDOC_MODE=skip \
    NVM_DIR="/root/.nvm" \
    PYTHONPATH=/opt/pypi
ENV PATH=${PATH}:/usr/local/bin:/root/.local/bin:${NVM_DIR}/versions/node/v${NODE_VERSION}/bin

COPY ci/images/debian/install.sh /tmp/
COPY ci/images/nuget /usr/lib/nuget

RUN set -e; \
    if [ -n "$NPM_REPO" ]; then \
      export COREPACK_NPM_REGISTRY=$NPM_REPO; \
      printf "registry=$NPM_REPO\n@jsr:registry=$NPM_REPO" > $HOME/.npmrc; \
    fi; \
    if [ -n "$NUGET_REPO" ]; then \
      dotnet nuget remove source "nuget.org"; \
      dotnet nuget add source "$NUGET_REPO/index.json" --name "nexus"; \
    fi; \
    if [ -n "$PIP_CONFIG" ]; then \
      mkdir $HOME/.pip/; \
      printf "$PIP_CONFIG" > $HOME/.pip/pip.conf; \
    fi; \
    apt-get update \
 && apt-get install -qq -y --no-install-recommends \
      autoconf-archive \
      autotools-dev \
      bash \
      bzip2 \
      curl \
      gawk \
      gcc \
      gettext \
      git-core \
      g++ \
      intltool \
      libadwaita-1-dev \
      make \
      unzip \
      zip \
 && apt-get install -qq -y \
      build-essential \
      locales \
      mono-devel \
      mono-xbuild \
      nuget \
      python3 \
      python3-dev \
      python3-pip \
 && chmod +x /tmp/install.sh \
 && /tmp/install.sh \
 && rm /tmp/install.sh \
 && pip install \
      --no-cache-dir \
      --target ${PYTHONPATH} \
      --upgrade \
        atom-tools \
        blint \
 && node -v \
 && npm -v \
 && apt-get purge -y --auto-remove \
      -o APT::AutoRemove::RecommendsImportant=false \
 && rm -rf $HOME/.npmrc $HOME/.pip /var/lib/apt/lists/* \
 && mv /usr/lib/nuget/nuget.exe /usr/lib/nuget/NuGet.exe \
 && dotnet --list-sdks \
 && ARCH_NAME="$(dpkg --print-architecture)"; \
    case "${ARCH_NAME##*-}" in \
      'amd64' | 'x86_64') \
        dotnet workload install \
          android \
          wasm-tools \
          wasm-tools-net6 \
          wasm-tools-net7 \
        ;; \
      'aarch64' | 'arm64') \
        dotnet workload install \
          wasm-tools \
        ;; \
      *) \
        echo >&2 "error: unsupported architecture: '$ARCH_NAME'"; \
        exit 1 \
        ;; \
    esac; \
    dotnet workload list \
 && nuget help \
 && if [ -n "$NUGET_REPO" ]; then \
      dotnet nuget remove source "nexus"; \
      dotnet nuget add source "https://api.nuget.org/v3/index.json" --name "nuget.org"; \
    fi

CMD ["/bin/bash"]



# cdxgen-image
FROM base AS cdxgen

ENV CDXGEN_IN_CONTAINER=true \
    DOSAI_CMD=/usr/local/bin/dosai \
    NODE_COMPILE_CACHE="/opt/cdxgen-node-cache" \
    PATH=${PATH}:${PYTHONPATH}/bin:/opt/cdxgen/node_modules/.bin

COPY . /opt/cdxgen

RUN set -e; \
    if [ -n "$NPM_REPO" ]; then \
      export COREPACK_NPM_REGISTRY=$NPM_REPO; \
      printf "registry=$NPM_REPO\n@jsr:registry=$NPM_REPO" > $HOME/.npmrc; \
    fi; \
    if [ -n "$PIP_CONFIG" ]; then \
      mkdir $HOME/.pip/; \
      printf "$PIP_CONFIG" > $HOME/.pip/pip.conf; \
    fi; \
    ARCH_NAME="$(dpkg --print-architecture)"; \
    case "${ARCH_NAME##*-}" in \
      'amd64' | 'x86_64') \
         DOSAI_ARCH_SUFFIX='-full'; \
         ;; \
      'aarch64' | 'arm64') \
         DOSAI_ARCH_SUFFIX='-linux-arm64-full'; \
         ;; \
      *) \
         echo >&2 "error: unsupported architecture: '$ARCH_NAME'"; \
         exit 1 \
         ;; \
    esac \
 && cd /opt/cdxgen \
 && corepack enable \
 && corepack pnpm install \
      --config.strict-dep-builds=true \
      --frozen-lockfile \
      --package-import-method copy \
      --prod \
 && corepack pnpm cache delete \
 && curl -L https://github.com/owasp-dep-scan/dosai/releases/latest/download/Dosai${DOSAI_ARCH_SUFFIX} \
      -o /usr/local/bin/dosai \
 && chmod +x /usr/local/bin/dosai \
 && dosai --help \
 && mkdir -p ${NODE_COMPILE_CACHE} \
 && node /opt/cdxgen/bin/cdxgen.js --help \
 && rm -rf $HOME/.npmrc $HOME/.pip /root/.cache/node \
 && chmod a-w -R /opt

WORKDIR /app

ENTRYPOINT ["node", "/opt/cdxgen/bin/cdxgen.js"]
