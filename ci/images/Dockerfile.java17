# Base-image
FROM registry.suse.com/bci/openjdk-devel:17 AS base

ARG GRADLE_VERSION=8.14.2
ARG MAVEN_VERSION=3.9.10
ARG NPM_REPO
ARG PIP_CONFIG
ARG SBT_VERSION=1.11.2
ARG SCALA_VERSION=3.6.4

ENV GRADLE_HOME="/opt/gradle/${GRADLE_VERSION}" \
    GRADLE_OPTS="-Dorg.gradle.daemon=false" \
    GRADLE_VERSION=$GRADLE_VERSION \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8 \
    MAVEN_HOME="/opt/maven/${MAVEN_VERSION}" \
    MAVEN_VERSION=$MAVEN_VERSION \
    PYTHONPATH=/opt/pypi \
    SBT_HOME="/opt/sbt/${SBT_VERSION}" \
    SBT_VERSION=$SBT_VERSION \
    SCALA_HOME="/opt/scala/${SCALA_VERSION}" \
    SCALA_VERSION=$SCALA_VERSION \
    npm_config_python=/usr/bin/python3.11
ENV PATH=${PATH}:/usr/local/bin:${PYTHONPATH}/bin:${MAVEN_HOME}/bin:${GRADLE_HOME}/bin:${SCALA_HOME}/bin:${SBT_HOME}/bin

RUN set -e; \
    if [ -n "$NPM_REPO" ]; then \
      export COREPACK_NPM_REGISTRY=$NPM_REPO; \
      printf "registry=$NPM_REPO\n@jsr:registry=$NPM_REPO" > $HOME/.npmrc; \
    fi; \
    if [ -n "$PIP_CONFIG" ]; then \
      mkdir $HOME/.pip/; \
      printf "$PIP_CONFIG" > $HOME/.pip/pip.conf; \
    fi; \
    ARCH_NAME="$(rpm --eval '%{_arch}')"; \
    case "${ARCH_NAME##*-}" in \
      'amd64' | 'x86_64') \
        GOBIN_VERSION='amd64'; \
        ;; \
      'aarch64' | 'arm64') \
        GOBIN_VERSION='arm64'; \
        ;; \
      *) \
        echo >&2 "error: unsupported architecture: '$ARCH_NAME'"; \
        exit 1 \
        ;; \
    esac \
 && zypper refresh \
 && zypper \
      --non-interactive \
        update \
 && zypper \
      --non-interactive \
        install \
        -l \
        --no-recommends \
          gawk \
          git-core \
          make \
          nodejs22 \
          npm22 \
          python311 \
          python311-pip \
          unzip \
          wget \
          zip \
 && curl -s "https://get.sdkman.io" | bash \
 && printf "sdkman_auto_answer=true\nsdkman_selfupdate_feature=false\nsdkman_auto_env=true\nsdkman_curl_connect_timeout=20\nsdkman_curl_max_time=0" \
      >> $HOME/.sdkman/etc/config \
 && source "$HOME/.sdkman/bin/sdkman-init.sh" \
 && sdk install maven $MAVEN_VERSION \
 && sdk install gradle $GRADLE_VERSION \
 && sdk install scala $SCALA_VERSION \
 && sdk install sbt $SBT_VERSION \
 && mv /root/.sdkman/candidates/* /opt/ \
 && curl -L --output /usr/bin/bazel \
      https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-${GOBIN_VERSION} \
 && chmod +x /usr/bin/bazel \
 && bazel --version \
 && pip install \
      --no-cache-dir \
      --target ${PYTHONPATH} \
      --upgrade \
        atom-tools \
 && atom-tools --help \
 && npm install -g \
      corepack \
 && rm -rf $HOME/.npmrc $HOME/.pip \
 && zypper clean -a

CMD ["/bin/bash"]



# cdxgen-image
FROM base AS cdxgen

ENV CDXGEN_IN_CONTAINER=true \
    NODE_COMPILE_CACHE="/opt/cdxgen-node-cache" \
    PATH=${PATH}:/opt/cdxgen/node_modules/.bin

COPY . /opt/cdxgen

RUN set -e; \
    if [ -n "$NPM_REPO" ]; then \
      export COREPACK_NPM_REGISTRY=$NPM_REPO; \
      printf "registry=$NPM_REPO\n@jsr:registry=$NPM_REPO" > $HOME/.npmrc; \
    fi; \
    if [ -n "$PIP_CONFIG" ]; then \
      mkdir $HOME/.pip/; \
      printf "$PIP_CONFIG" > $HOME/.pip/pip.conf; \
    fi; \
    cd /opt/cdxgen \
 && corepack enable \
 && corepack pnpm install \
      --config.strict-dep-builds=true \
      --frozen-lockfile \
      --package-import-method copy \
      --prod \
 && corepack pnpm cache delete \
 && mkdir -p ${NODE_COMPILE_CACHE} \
 && node /opt/cdxgen/bin/cdxgen.js --help \
 && rm -rf $HOME/.npmrc $HOME/.pip /root/.cache/node \
 && chmod a-w -R /opt

WORKDIR /app

ENTRYPOINT ["node", "/opt/cdxgen/bin/cdxgen.js"]
