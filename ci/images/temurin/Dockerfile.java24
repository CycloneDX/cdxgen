# Base-image
FROM eclipse-temurin:24-ubi9-minimal AS base

ARG GRADLE_VERSION=8.14.2
ARG MAVEN_VERSION=3.9.10
# renovate: datasource=docker depName=node
ARG NODE_VERSION=24.6.0
ARG PYTHON_VERSION=3.12
ARG SBT_VERSION=1.10.10
ARG SCALA_VERSION=3.7.1

ENV CDXGEN_IN_CONTAINER=true \
    GRADLE_HOME="/root/.sdkman/candidates/gradle/${GRADLE_VERSION}" \
    GRADLE_OPTS="-Dorg.gradle.daemon=false" \
    GRADLE_VERSION=$GRADLE_VERSION \
    JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF-8" \
    MAVEN_HOME="/root/.sdkman/candidates/maven/${MAVEN_VERSION}" \
    MAVEN_VERSION=$MAVEN_VERSION \
    NODE_COMPILE_CACHE="/opt/cdxgen-node-cache" \
    NODE_VERSION=$NODE_VERSION \
    NVM_DIR="/root/.nvm" \
    PYTHON_CMD=/usr/bin/python$PYTHON_VERSION \
    PYTHON_VERSION=$PYTHON_VERSION \
    PYTHONIOENCODING="utf-8" \
    PYTHONPATH=/opt/pypi \
    PYTHONUNBUFFERED=1 \
    SBT_HOME="/root/.sdkman/candidates/sbt/${SBT_VERSION}" \
    SBT_VERSION=$SBT_VERSION \
    SCALA_HOME="/root/.sdkman/candidates/scala/${SCALA_VERSION}" \
    SCALA_VERSION=$SCALA_VERSION \
    SDKMAN_CANDIDATES_DIR=/root/.sdkman/candidates \
    SDKMAN_DIR=/root/.sdkman \
    TMPDIR=/tmp \
    npm_config_build_from_source=true
ENV PATH=${PATH}:/usr/local/bin/:/root/.local/bin:${NVM_DIR}/versions/node/v${NODE_VERSION}/bin:${MAVEN_HOME}/bin:${GRADLE_HOME}/bin:${SCALA_HOME}/bin:${SBT_HOME}/bin:${PYTHONPATH}/bin

RUN set -e; \
    ARCH_NAME="$(rpm --eval '%{_arch}')"; \
    case "${ARCH_NAME##*-}" in \
      'amd64' | 'x86_64') \
        OS_ARCH_SUFFIX=''; \
        ;; \
      'aarch64' | 'arm64') \
        OS_ARCH_SUFFIX='-aarch64'; \
        ;; \
      *) \
        echo >&2 "error: unsupported architecture: '$ARCH_NAME'"; \
        exit 1 \
        ;; \
    esac \
 && microdnf install -y \
      autoconf \
      bzip2 \
      findutils \
      gcc \
      gcc-c++ \
      git-core \
      glibc-all-langpacks \
      glibc-common \
      gnupg2 \
      gzip \
      make \
      ncurses \
      pcre2 \
      python${PYTHON_VERSION} \
      python${PYTHON_VERSION}-devel \
      python${PYTHON_VERSION}-pip \
      sudo \
      tar \
      unzip \
      which \
      zip \
 && alternatives --install /usr/bin/python3 python /usr/bin/python${PYTHON_VERSION} 10 \
 && alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 10 \
 && ${PYTHON_CMD} --version \
 && ${PYTHON_CMD} -m pip install \
      --no-cache-dir \
      --upgrade \
        pip \
        setuptools==77.0.3 \
        virtualenv \
        wheel \
 && ${PYTHON_CMD} -m pip install \
      --no-cache-dir \
      --target ${PYTHONPATH} \
      --upgrade \
        atom-tools \
        pipenv \
 && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash \
 && source ${NVM_DIR}/nvm.sh \
 && nvm install ${NODE_VERSION} \
 && node --version \
 && curl -s "https://get.sdkman.io" | bash \
 && echo -e "sdkman_auto_answer=true\nsdkman_selfupdate_feature=false\nsdkman_auto_env=true\nsdkman_curl_connect_timeout=20\nsdkman_curl_max_time=0" \
      >> $HOME/.sdkman/etc/config \
 && source "$HOME/.sdkman/bin/sdkman-init.sh" \
 && sdk install maven $MAVEN_VERSION \
 && sdk install gradle $GRADLE_VERSION \
 && sdk install scala $SCALA_VERSION \
 && sdk install sbt $SBT_VERSION \
 && useradd -ms /bin/bash cyclonedx \
 && npm install -g npm \
 && npm install -g node-gyp corepack \
 && npx node-gyp install \
 && rm -rf /var/cache/yum /root/.cache/node \
 && microdnf clean all

CMD ["/bin/bash"]



# cdxgen-image
FROM base AS cdxgen

ENV CDXGEN_IN_CONTAINER=true \
    PATH=${PATH}:/opt/cdxgen/node_modules/.bin

COPY . /opt/cdxgen

RUN set -e; \
    cd /opt/cdxgen \
 && corepack enable \
 && corepack pnpm install \
      --config.strict-dep-builds=true \
      --frozen-lockfile \
      --package-import-method copy \
      --prod \
 && corepack pnpm cache delete \
 && mkdir -p ${NODE_COMPILE_CACHE} \
 && node /opt/cdxgen/bin/cdxgen.js --help \
 && rm -rf .npmrc /root/.cache/node \
 && chmod a-w -R /opt

WORKDIR /app

ENTRYPOINT ["node", "/opt/cdxgen/bin/cdxgen.js"]
