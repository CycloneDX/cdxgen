# Base-image
FROM registry.suse.com/bci/ruby:2.5 AS base

ARG ATOM_RUBY_VERSION=3.4.4

ENV LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8 \
    ATOM_RUBY_VERSION=$ATOM_RUBY_VERSION \
    ATOM_RUBY_HOME=/root/.rbenv/versions/3.4.1 \
    BUNDLE_SILENCE_ROOT_WARNING=true \
    JAVA_OPTIONS="-Dhttps.protocols=TLSv1.1,TLSv1.2" \
    RUBY_BUILD_BUILD_PATH="/tmp/rbenv" \
    RUBY_BUILD_HTTP_CLIENT=curl \
    npm_config_python=/usr/bin/python3.11

ENV PATH=${PATH}:/usr/local/bin:/root/.local/bin:/root/.rbenv/bin:

RUN set -e; \
    ARCH_NAME="$(rpm --eval '%{_arch}')"; \
    url=; \
    case "${ARCH_NAME##*-}" in \
        'x86_64') \
            OS_ARCH_SUFFIX=''; \
            GOBIN_VERSION='amd64'; \
            ;; \
        'aarch64') \
            OS_ARCH_SUFFIX='-aarch64'; \
            GOBIN_VERSION='arm64'; \
            ;; \
        *) echo >&2 "error: unsupported architecture: '$ARCH_NAME'"; exit 1 ;; \
    esac \
    && zypper refresh && zypper --non-interactive update && zypper --non-interactive install -l --no-recommends git-core java-21-openjdk-devel nodejs20 npm20 python311 python311-pip wget zip \
      unzip make gawk rust1.85 libopenssl-devel libffi-devel readline-devel libyaml-devel zlib-devel ncurses ncurses-devel jemalloc-devel \
    && npm install -g corepack \
    && gem install bundler -v 2.3.27 \
    && gem install rubygems-update -v 3.3.27 \
    && bundle config git.allow_insecure true \
    && git clone https://github.com/rbenv/rbenv.git --depth=1 ~/.rbenv \
    && echo 'export PATH="/root/.rbenv/bin:$PATH"' >> ~/.bashrc \
    && echo 'eval "$(/root/.rbenv/bin/rbenv init - bash)"' >> ~/.bashrc \
    && source ~/.bashrc \
    && mkdir -p "$(rbenv root)/plugins" \
    && git clone https://github.com/rbenv/ruby-build.git --depth=1 "$(rbenv root)/plugins/ruby-build" \
    && rbenv install ${ATOM_RUBY_VERSION} -- --disable-install-doc \
    && ruby --version \
    && java --version \
    && zypper clean -a

CMD ["/bin/bash"]



# cdxgen-image
FROM base AS cdxgen

LABEL maintainer="CycloneDX" \
      org.opencontainers.image.authors="Team AppThreat <cloud@appthreat.com>" \
      org.opencontainers.image.source="https://github.com/CycloneDX/cdxgen" \
      org.opencontainers.image.url="https://github.com/CycloneDX/cdxgen" \
      org.opencontainers.image.version="rolling" \
      org.opencontainers.image.vendor="CycloneDX" \
      org.opencontainers.image.licenses="Apache-2.0" \
      org.opencontainers.image.title="cdxgen" \
      org.opencontainers.image.description="Rolling image with cdxgen SBOM generator for Ruby 2.5 apps" \
      org.opencontainers.docker.cmd="docker run --rm -v /tmp:/tmp -p 9090:9090 -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-ruby25:v11 -r /app --server"

ENV CDXGEN_IN_CONTAINER=true \
    NODE_COMPILE_CACHE="/opt/cdxgen-node-cache" \
    CDXGEN_GEM_HOME="/tmp/gems" \
    ATOM_RUBY_HOME=/root/.rbenv/versions/3.4.1 \
    PYTHONPATH=/opt/pypi:${PYTHONPATH}
ENV PATH=${PATH}:/usr/local/bin:/opt/pypi/bin:/opt/cdxgen/node_modules/.bin:

COPY . /opt/cdxgen

RUN cd /opt/cdxgen && corepack enable && corepack pnpm install --config.strict-dep-builds=true --prod --package-import-method copy --frozen-lockfile && corepack pnpm cache delete \
    && npm install -g --production @appthreat/atom-parsetools@1.0.3 \
    && mkdir -p /opt/cdxgen-node-cache \
    && node /opt/cdxgen/bin/cdxgen.js --help \
    && pip install --upgrade --no-cache-dir atom-tools --target /opt/pypi \
    && rbastgen --help \
    && rm -rf ${CDXGEN_GEM_HOME} && mkdir -p ${CDXGEN_GEM_HOME} \
    && rm -rf /root/.cache/node \
    && chmod a-w -R /opt
WORKDIR /app
ENTRYPOINT ["node", "/opt/cdxgen/bin/cdxgen.js"]
