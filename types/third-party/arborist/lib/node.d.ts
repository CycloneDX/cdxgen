export default Node;
declare class Node {
    constructor(options: any);
    queryContext: {};
    errors: any[];
    isInStore: any;
    sourceReference: any;
    name: any;
    path: string;
    realpath: string;
    resolved: any;
    integrity: any;
    hasShrinkwrap: any;
    installLinks: any;
    legacyPeerDeps: any;
    children: CaseInsensitiveMap;
    fsChildren: Set<any>;
    inventory: Inventory;
    tops: Set<any>;
    linksIn: Set<any>;
    dev: any;
    optional: any;
    devOptional: any;
    peer: any;
    extraneous: any;
    dummy: boolean;
    ideallyInert: any;
    edgesIn: Set<any>;
    edgesOut: CaseInsensitiveMap;
    overrides: any;
    set meta(meta: any);
    get meta(): any;
    set parent(parent: any);
    get parent(): any;
    set fsParent(fsParent: any);
    get fsParent(): any;
    set root(root: any);
    get root(): any;
    get global(): any;
    get globalTop(): any;
    set workspaces(workspaces: any);
    get workspaces(): any;
    get binPaths(): any;
    get hasInstallScript(): boolean;
    get version(): any;
    get packageName(): any;
    get pkgid(): string;
    get overridden(): boolean;
    set package(pkg: any);
    get package(): any;
    explain(edge?: any, seen?: any[]): any;
    isDescendantOf(node: any): boolean;
    shouldOmit(omitSet: any): any;
    getBundler(path?: any[]): any;
    get inBundle(): boolean;
    get inDepBundle(): boolean;
    get isWorkspace(): boolean;
    get isRoot(): boolean;
    get isProjectRoot(): boolean;
    get isRegistryDependency(): boolean;
    ancestry(): Generator<this, void, unknown>;
    canReplaceWith(node: any, ignorePeers: any): boolean;
    canReplace(node: any, ignorePeers: any): any;
    canDedupe(preferDedupe?: boolean, explicitRequest?: boolean): boolean;
    satisfies(requested: any): any;
    matches(node: any): any;
    replaceWith(node: any): void;
    replace(node: any): void;
    get inShrinkwrap(): any;
    location: string;
    assertRootOverrides(): void;
    addEdgeOut(edge: any): void;
    recalculateOutEdgesOverrides(): void;
    updateOverridesEdgeInRemoved(otherOverrideSet: any): boolean;
    updateOverridesEdgeInAdded(otherOverrideSet: any): boolean;
    deleteEdgeIn(edge: any): void;
    addEdgeIn(edge: any): void;
    get isLink(): boolean;
    set target(_n: this);
    get target(): this;
    get depth(): any;
    get isTop(): any;
    get top(): any;
    get isFsTop(): boolean;
    get fsTop(): any;
    get resolveParent(): any;
    resolve(name: any): any;
    inNodeModules(): string | false;
    querySelectorAll(query: any, opts: any): Promise<any[]>;
    toJSON(): any;
    #private;
}
import CaseInsensitiveMap from "./case-insensitive-map.js";
import Inventory from "./inventory.js";
//# sourceMappingURL=node.d.ts.map